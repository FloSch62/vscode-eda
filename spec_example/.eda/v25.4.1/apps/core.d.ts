/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/core.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from core.eda.nokia.com */
        get: operations["getVersionCoreEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from core.eda.nokia.com/v1 */
        get: operations["getResourcesCoreEdaNokiaComV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for core.eda.nokia.com v1 */
        get: operations["uiCoreEdaNokiaComV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/clusterroles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list clusterroles */
        get: operations["listCoreEdaNokiaComV1Clusterroles"];
        put?: never;
        /** @description create a non-namespaced ClusterRole */
        post: operations["createCoreEdaNokiaComV1Clusterroles"];
        /** @description Delete all instances of ClusterRole.  If ClusterRole is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced ClusterRole, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllCoreEdaNokiaComV1Clusterroles"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/clusterroles/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of ClusterRole that have been deleted. */
        get: operations["getDeletedCoreEdaNokiaComV1Clusterroles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/clusterroles/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced ClusterRole.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1Clusterroles"];
        /** @description replace a non-namespaced ClusterRole */
        put: operations["replaceCoreEdaNokiaComV1Clusterroles"];
        post?: never;
        /** @description delete the specified non-namespaced ClusterRole */
        delete: operations["deleteCoreEdaNokiaComV1Clusterroles"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced ClusterRole */
        patch: operations["patchCoreEdaNokiaComV1Clusterroles"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/clusterroles/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced ClusterRole. */
        get: operations["getHistoryCoreEdaNokiaComV1Clusterroles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/deviationactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list deviationactions */
        get: operations["listCoreEdaNokiaComV1Deviationactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/deviations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list deviations */
        get: operations["listCoreEdaNokiaComV1Deviations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/edgeinterfaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list edgeinterfaces */
        get: operations["listCoreEdaNokiaComV1Edgeinterfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/httpproxies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list httpproxies */
        get: operations["listCoreEdaNokiaComV1Httpproxies"];
        put?: never;
        /** @description create a non-namespaced HttpProxy */
        post: operations["createCoreEdaNokiaComV1Httpproxies"];
        /** @description Delete all instances of HttpProxy.  If HttpProxy is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced HttpProxy, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllCoreEdaNokiaComV1Httpproxies"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/httpproxies/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of HttpProxy that have been deleted. */
        get: operations["getDeletedCoreEdaNokiaComV1Httpproxies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/httpproxies/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced HttpProxy.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1Httpproxies"];
        /** @description replace a non-namespaced HttpProxy */
        put: operations["replaceCoreEdaNokiaComV1Httpproxies"];
        post?: never;
        /** @description delete the specified non-namespaced HttpProxy */
        delete: operations["deleteCoreEdaNokiaComV1Httpproxies"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced HttpProxy */
        patch: operations["patchCoreEdaNokiaComV1Httpproxies"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/httpproxies/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced HttpProxy. */
        get: operations["getHistoryCoreEdaNokiaComV1Httpproxies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/indexallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list indexallocationpools */
        get: operations["listCoreEdaNokiaComV1Indexallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/ipallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ipallocationpools */
        get: operations["listCoreEdaNokiaComV1Ipallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/ipinsubnetallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ipinsubnetallocationpools */
        get: operations["listCoreEdaNokiaComV1Ipinsubnetallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/licenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list licenses */
        get: operations["listCoreEdaNokiaComV1Licenses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/licenses/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced License.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1Licenses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/licenses/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced License. */
        get: operations["getHistoryCoreEdaNokiaComV1Licenses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list namespaces */
        get: operations["listCoreEdaNokiaComV1Namespaces"];
        put?: never;
        /** @description create a non-namespaced Namespace */
        post: operations["createCoreEdaNokiaComV1Namespaces"];
        /** @description Delete all instances of Namespace.  If Namespace is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced Namespace, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllCoreEdaNokiaComV1Namespaces"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Namespace that have been deleted. */
        get: operations["getDeletedCoreEdaNokiaComV1Namespaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/deviationactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list deviationactions in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceDeviationactions"];
        put?: never;
        /** @description create a DeviationAction */
        post: operations["createCoreEdaNokiaComV1NamespaceDeviationactions"];
        /** Delete all instances of DeviationAction in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceDeviationactions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/deviationactions/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of DeviationAction that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceDeviationactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/deviationactions/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified DeviationAction.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceDeviationactions"];
        /** @description replace a DeviationAction */
        put: operations["replaceCoreEdaNokiaComV1NamespaceDeviationactions"];
        post?: never;
        /** @description delete the specified DeviationAction */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceDeviationactions"];
        options?: never;
        head?: never;
        /** @description patch a DeviationAction */
        patch: operations["patchCoreEdaNokiaComV1NamespaceDeviationactions"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/deviationactions/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced DeviationAction. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceDeviationactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/deviations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list deviations in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceDeviations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/deviations/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Deviation.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceDeviations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/deviations/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Deviation. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceDeviations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/edgeinterfaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list edgeinterfaces in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        put?: never;
        /** @description create a EdgeInterface */
        post: operations["createCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        /** Delete all instances of EdgeInterface in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/edgeinterfaces/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of EdgeInterface that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/edgeinterfaces/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified EdgeInterface.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        /** @description replace a EdgeInterface */
        put: operations["replaceCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        post?: never;
        /** @description delete the specified EdgeInterface */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        options?: never;
        head?: never;
        /** @description patch a EdgeInterface */
        patch: operations["patchCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/edgeinterfaces/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced EdgeInterface. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceEdgeinterfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/indexallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list indexallocationpools in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        put?: never;
        /** @description create a IndexAllocationPool */
        post: operations["createCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        /** Delete all instances of IndexAllocationPool in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/indexallocationpools/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of IndexAllocationPool that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/indexallocationpools/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified IndexAllocationPool.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        /** @description replace a IndexAllocationPool */
        put: operations["replaceCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        post?: never;
        /** @description delete the specified IndexAllocationPool */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        options?: never;
        head?: never;
        /** @description patch a IndexAllocationPool */
        patch: operations["patchCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/indexallocationpools/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced IndexAllocationPool. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceIndexallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ipallocationpools in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceIpallocationpools"];
        put?: never;
        /** @description create a IPAllocationPool */
        post: operations["createCoreEdaNokiaComV1NamespaceIpallocationpools"];
        /** Delete all instances of IPAllocationPool in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceIpallocationpools"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipallocationpools/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of IPAllocationPool that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceIpallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipallocationpools/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified IPAllocationPool.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceIpallocationpools"];
        /** @description replace a IPAllocationPool */
        put: operations["replaceCoreEdaNokiaComV1NamespaceIpallocationpools"];
        post?: never;
        /** @description delete the specified IPAllocationPool */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceIpallocationpools"];
        options?: never;
        head?: never;
        /** @description patch a IPAllocationPool */
        patch: operations["patchCoreEdaNokiaComV1NamespaceIpallocationpools"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipallocationpools/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced IPAllocationPool. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceIpallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipinsubnetallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ipinsubnetallocationpools in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        put?: never;
        /** @description create a IPInSubnetAllocationPool */
        post: operations["createCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        /** Delete all instances of IPInSubnetAllocationPool in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipinsubnetallocationpools/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of IPInSubnetAllocationPool that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipinsubnetallocationpools/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified IPInSubnetAllocationPool.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        /** @description replace a IPInSubnetAllocationPool */
        put: operations["replaceCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        post?: never;
        /** @description delete the specified IPInSubnetAllocationPool */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        options?: never;
        head?: never;
        /** @description patch a IPInSubnetAllocationPool */
        patch: operations["patchCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/ipinsubnetallocationpools/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced IPInSubnetAllocationPool. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeprofiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list nodeprofiles in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceNodeprofiles"];
        put?: never;
        /** @description create a NodeProfile */
        post: operations["createCoreEdaNokiaComV1NamespaceNodeprofiles"];
        /** Delete all instances of NodeProfile in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceNodeprofiles"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeprofiles/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of NodeProfile that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceNodeprofiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeprofiles/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified NodeProfile.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceNodeprofiles"];
        /** @description replace a NodeProfile */
        put: operations["replaceCoreEdaNokiaComV1NamespaceNodeprofiles"];
        post?: never;
        /** @description delete the specified NodeProfile */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceNodeprofiles"];
        options?: never;
        head?: never;
        /** @description patch a NodeProfile */
        patch: operations["patchCoreEdaNokiaComV1NamespaceNodeprofiles"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeprofiles/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced NodeProfile. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceNodeprofiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeusers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list nodeusers in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceNodeusers"];
        put?: never;
        /** @description create a NodeUser */
        post: operations["createCoreEdaNokiaComV1NamespaceNodeusers"];
        /** Delete all instances of NodeUser in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceNodeusers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeusers/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of NodeUser that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceNodeusers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeusers/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified NodeUser.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceNodeusers"];
        /** @description replace a NodeUser */
        put: operations["replaceCoreEdaNokiaComV1NamespaceNodeusers"];
        post?: never;
        /** @description delete the specified NodeUser */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceNodeusers"];
        options?: never;
        head?: never;
        /** @description patch a NodeUser */
        patch: operations["patchCoreEdaNokiaComV1NamespaceNodeusers"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/nodeusers/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced NodeUser. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceNodeusers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list roles in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceRoles"];
        put?: never;
        /** @description create a Role */
        post: operations["createCoreEdaNokiaComV1NamespaceRoles"];
        /** Delete all instances of Role in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceRoles"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/roles/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Role that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/roles/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Role.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceRoles"];
        /** @description replace a Role */
        put: operations["replaceCoreEdaNokiaComV1NamespaceRoles"];
        post?: never;
        /** @description delete the specified Role */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceRoles"];
        options?: never;
        head?: never;
        /** @description patch a Role */
        patch: operations["patchCoreEdaNokiaComV1NamespaceRoles"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/roles/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Role. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/subnetallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list subnetallocationpools in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        put?: never;
        /** @description create a SubnetAllocationPool */
        post: operations["createCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        /** Delete all instances of SubnetAllocationPool in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/subnetallocationpools/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of SubnetAllocationPool that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/subnetallocationpools/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified SubnetAllocationPool.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        /** @description replace a SubnetAllocationPool */
        put: operations["replaceCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        post?: never;
        /** @description delete the specified SubnetAllocationPool */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        options?: never;
        head?: never;
        /** @description patch a SubnetAllocationPool */
        patch: operations["patchCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/subnetallocationpools/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced SubnetAllocationPool. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceSubnetallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topobreakouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list topobreakouts in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceTopobreakouts"];
        put?: never;
        /** @description create a TopoBreakout */
        post: operations["createCoreEdaNokiaComV1NamespaceTopobreakouts"];
        /** Delete all instances of TopoBreakout in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceTopobreakouts"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topobreakouts/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of TopoBreakout that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceTopobreakouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topobreakouts/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified TopoBreakout.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceTopobreakouts"];
        /** @description replace a TopoBreakout */
        put: operations["replaceCoreEdaNokiaComV1NamespaceTopobreakouts"];
        post?: never;
        /** @description delete the specified TopoBreakout */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceTopobreakouts"];
        options?: never;
        head?: never;
        /** @description patch a TopoBreakout */
        patch: operations["patchCoreEdaNokiaComV1NamespaceTopobreakouts"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topobreakouts/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced TopoBreakout. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceTopobreakouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topolinks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list topolinks in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceTopolinks"];
        put?: never;
        /** @description create a TopoLink */
        post: operations["createCoreEdaNokiaComV1NamespaceTopolinks"];
        /** Delete all instances of TopoLink in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceTopolinks"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topolinks/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of TopoLink that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceTopolinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topolinks/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified TopoLink.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceTopolinks"];
        /** @description replace a TopoLink */
        put: operations["replaceCoreEdaNokiaComV1NamespaceTopolinks"];
        post?: never;
        /** @description delete the specified TopoLink */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceTopolinks"];
        options?: never;
        head?: never;
        /** @description patch a TopoLink */
        patch: operations["patchCoreEdaNokiaComV1NamespaceTopolinks"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/topolinks/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced TopoLink. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceTopolinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/toponodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list toponodes in namespace */
        get: operations["listCoreEdaNokiaComV1NamespaceToponodes"];
        put?: never;
        /** @description create a TopoNode */
        post: operations["createCoreEdaNokiaComV1NamespaceToponodes"];
        /** Delete all instances of TopoNode in the specified namespace. */
        delete: operations["deleteAllCoreEdaNokiaComV1NamespaceToponodes"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/toponodes/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of TopoNode that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedCoreEdaNokiaComV1NamespaceToponodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/toponodes/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified TopoNode.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1NamespaceToponodes"];
        /** @description replace a TopoNode */
        put: operations["replaceCoreEdaNokiaComV1NamespaceToponodes"];
        post?: never;
        /** @description delete the specified TopoNode */
        delete: operations["deleteCoreEdaNokiaComV1NamespaceToponodes"];
        options?: never;
        head?: never;
        /** @description patch a TopoNode */
        patch: operations["patchCoreEdaNokiaComV1NamespaceToponodes"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{namespace}/toponodes/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced TopoNode. */
        get: operations["getHistoryCoreEdaNokiaComV1NamespaceToponodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced Namespace.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1Namespaces"];
        /** @description replace a non-namespaced Namespace */
        put: operations["replaceCoreEdaNokiaComV1Namespaces"];
        post?: never;
        /** @description delete the specified non-namespaced Namespace */
        delete: operations["deleteCoreEdaNokiaComV1Namespaces"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced Namespace */
        patch: operations["patchCoreEdaNokiaComV1Namespaces"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/namespaces/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced Namespace. */
        get: operations["getHistoryCoreEdaNokiaComV1Namespaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/nodeprofiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list nodeprofiles */
        get: operations["listCoreEdaNokiaComV1Nodeprofiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/nodeusers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list nodeusers */
        get: operations["listCoreEdaNokiaComV1Nodeusers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list roles */
        get: operations["listCoreEdaNokiaComV1Roles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/subnetallocationpools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list subnetallocationpools */
        get: operations["listCoreEdaNokiaComV1Subnetallocationpools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/topobreakouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list topobreakouts */
        get: operations["listCoreEdaNokiaComV1Topobreakouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/topolinks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list topolinks */
        get: operations["listCoreEdaNokiaComV1Topolinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/toponodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list toponodes */
        get: operations["listCoreEdaNokiaComV1Toponodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/udpproxies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list udpproxies */
        get: operations["listCoreEdaNokiaComV1Udpproxies"];
        put?: never;
        /** @description create a non-namespaced UdpProxy */
        post: operations["createCoreEdaNokiaComV1Udpproxies"];
        /** @description Delete all instances of UdpProxy.  If UdpProxy is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced UdpProxy, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllCoreEdaNokiaComV1Udpproxies"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/udpproxies/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of UdpProxy that have been deleted. */
        get: operations["getDeletedCoreEdaNokiaComV1Udpproxies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/udpproxies/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced UdpProxy.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1Udpproxies"];
        /** @description replace a non-namespaced UdpProxy */
        put: operations["replaceCoreEdaNokiaComV1Udpproxies"];
        post?: never;
        /** @description delete the specified non-namespaced UdpProxy */
        delete: operations["deleteCoreEdaNokiaComV1Udpproxies"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced UdpProxy */
        patch: operations["patchCoreEdaNokiaComV1Udpproxies"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/udpproxies/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced UdpProxy. */
        get: operations["getHistoryCoreEdaNokiaComV1Udpproxies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/workflowdefinitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list workflowdefinitions */
        get: operations["listCoreEdaNokiaComV1Workflowdefinitions"];
        put?: never;
        /** @description create a non-namespaced WorkflowDefinition */
        post: operations["createCoreEdaNokiaComV1Workflowdefinitions"];
        /** @description Delete all instances of WorkflowDefinition.  If WorkflowDefinition is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced WorkflowDefinition, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllCoreEdaNokiaComV1Workflowdefinitions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/workflowdefinitions/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of WorkflowDefinition that have been deleted. */
        get: operations["getDeletedCoreEdaNokiaComV1Workflowdefinitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/workflowdefinitions/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced WorkflowDefinition.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readCoreEdaNokiaComV1Workflowdefinitions"];
        /** @description replace a non-namespaced WorkflowDefinition */
        put: operations["replaceCoreEdaNokiaComV1Workflowdefinitions"];
        post?: never;
        /** @description delete the specified non-namespaced WorkflowDefinition */
        delete: operations["deleteCoreEdaNokiaComV1Workflowdefinitions"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced WorkflowDefinition */
        patch: operations["patchCoreEdaNokiaComV1Workflowdefinitions"];
        trace?: never;
    };
    "/apps/core.eda.nokia.com/v1/workflowdefinitions/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced WorkflowDefinition. */
        get: operations["getHistoryCoreEdaNokiaComV1Workflowdefinitions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description ClusterRole is the Schema for the clusterroles API */
        "com.nokia.eda.core.v1.ClusterRole": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default ClusterRole */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.ClusterRole_metadata"];
            /**
             * Specification
             * @description ClusterRole defines a set of permissions to access EDA resources.
             *     ClusterRoles and users are bound via groups, selecting a set of users and a set of ClusterRoles to bind.
             */
            spec: {
                /**
                 * Description
                 * @description A description for the role.
                 */
                description?: string;
                /**
                 * Resource Rules
                 * @description Rules for access to resources.
                 */
                resourceRules?: {
                    /**
                     * API Groups
                     * @description The API groups for the resources controlled by the rule.
                     *     An API group consists of an apiGroup and a version, e.g. "apigroup/version".
                     *     The API group can be a wildcard ("*"), in which case it will match any API group.
                     */
                    apiGroups: string[];
                    /**
                     * Permissions
                     * @description Permissions for resources specified by the rule.
                     * @enum {string}
                     */
                    permissions: "none" | "read" | "readWrite";
                    /**
                     * Resources
                     * @description Names for the resources controlled by the rule.
                     *     It can be a wildcard ("*"), in which case it will match any resource
                     *     in the matching API groups.
                     */
                    resources: string[];
                }[];
                /**
                 * Table Rules
                 * @description Rules for access to EDB tables, including via EQL.
                 */
                tableRules?: {
                    /**
                     * Path
                     * @description EDB path to which this rule applies. It can end in ".*"
                     *     in which case the final portion of the table path can be anything, if the
                     *     prefix matches. It can end in ".**" in which case the table path can be
                     *     anything if the prefix matches.
                     */
                    path: string;
                    /**
                     * Permissions
                     * @description Permissions for the given EDB path.
                     * @enum {string}
                     */
                    permissions: "none" | "read";
                }[];
                /**
                 * URL Rules
                 * @description Rules for access to APIServer proxied routes.
                 */
                urlRules?: {
                    /**
                     * Path
                     * @description The API server URL path to which this rule applies. It can end in "/*"
                     *     in which case the final portion of the URL path can be anything, if the
                     *     prefix matches. It can end in "/**" in which case the URL path can be
                     *     anything if the prefix matches.
                     */
                    path: string;
                    /**
                     * Permissions
                     * @description The permissions for the API server URL for the rule.
                     * @enum {string}
                     */
                    permissions: "none" | "read" | "readWrite";
                }[];
            };
            /**
             * Status
             * @description RoleStatus defines the observed state of Role
             */
            readonly status?: Record<string, never>;
        };
        /** @description ClusterRoleList is a list of clusterroles */
        "com.nokia.eda.core.v1.ClusterRoleList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.ClusterRole"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.ClusterRole_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.ClusterRole_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.ClusterRole_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.ClusterRole_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
        /** @description Deviation is the Schema for the deviations API */
        "com.nokia.eda.core.v1.Deviation": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Deviation */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.Deviation_metadata"];
            /**
             * Specification
             * @description Deviations are used to represent differences between the intended and actual state of a target.
             *     They indicate the intended state - or the computed configuration EDA expects, and compare this to the actual or running state, or the configuration retrieved from the target.
             *     Deviations are most often generated by out-of-band changes to a target by an external system or user, and
             *     can be accepted or rejected. Rejecting a Deviation will result in the intended configuration being re-applied, undoing the out-of-band change.
             *     Deviations are raised per table, meaning a single change on a target may result in more than one Deviation.
             */
            spec: {
                /**
                 * Accepted
                 * @description Indicates whether this Deviation has been accepted.
                 */
                accepted?: boolean;
                /**
                 * Associated Resources
                 * @description Resources impacted by this Deviation.
                 */
                associatedCrs?: {
                    /**
                     * Group + Version
                     * @description Group and version of the resource.
                     */
                    groupVersion: string;
                    /**
                     * Kind
                     * @description Kind of the resource.
                     */
                    kind: string;
                    /**
                     * Name
                     * @description Name of the resource.
                     */
                    name: string;
                }[];
                /**
                 * Intended Values
                 * Format: json
                 * @description JSON object containing intended values of fields at the specified path.
                 */
                intendedValues?: string;
                /**
                 * Target
                 * @description Target on which this Deviation is present.
                 */
                nodeEndpoint: string;
                /**
                 * Operation
                 * @description Indicates the operation in this Deviation.
                 * @enum {string}
                 */
                operation: "create" | "delete";
                /**
                 * Path
                 * @description Path on the target this Deviation is present at. This path is relative to the target's root, without any EDA prefixes - for example ".system" rather than ".namespace.node.srl.system".
                 */
                path: string;
                /**
                 * Running Values
                 * Format: json
                 * @description JSON object containing running values of fields at the specified path.
                 */
                runningValues?: string;
            };
            /**
             * Status
             * @description DeviationStatus defines the observed state of Deviation
             */
            readonly status?: Record<string, never>;
        };
        /** @description DeviationAction is the Schema for the deviationactions API */
        "com.nokia.eda.core.v1.DeviationAction": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default DeviationAction */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.DeviationAction_metadata"];
            /**
             * Specification
             * @description DeviationAction allows manual and API-driven actions to be performed on Deviation resources.
             *     They are the only means to which and end user can accept or reject deviations, as Deviation resources themselves are read only.
             */
            spec: {
                /**
                 * Actions
                 * @description The set of actions to perform on the target.
                 */
                actions: {
                    /**
                     * Action
                     * @description Action to perform on matching Deviations.
                     * @enum {string}
                     */
                    action: "setAccept" | "clearAccept" | "reject";
                    /**
                     * Path
                     * @description Path to match Deviation resources on this target. Only one action is allowed per path.
                     */
                    path: string;
                    /**
                     * Recurse
                     * @description Recursively accept/reject Deviations from the specified path.
                     */
                    recurse?: boolean;
                }[];
                /**
                 * Target
                 * @description The target on which this action is to be performed.
                 */
                nodeEndpoint: string;
            };
            /**
             * Status
             * @description DeviationActionStatus defines the observed state of DeviationAction
             */
            readonly status?: {
                /**
                 * Result
                 * @description The result of the set of actions.
                 * @enum {string}
                 */
                result?: "OK" | "Failed";
                /**
                 * Transaction Id
                 * @description The transaction id these actions were part of.
                 */
                transactionId?: number;
            };
        };
        /** @description DeviationActionList is a list of deviationactions */
        "com.nokia.eda.core.v1.DeviationActionList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.DeviationAction"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.DeviationAction_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.DeviationAction_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.DeviationAction_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.DeviationAction_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description DeviationList is a list of deviations */
        "com.nokia.eda.core.v1.DeviationList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.Deviation"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.Deviation_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description EdgeInterface is the Schema for the edgeinterfaces API */
        "com.nokia.eda.core.v1.EdgeInterface": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default EdgeInterface */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.EdgeInterface_metadata"];
            /**
             * Specification
             * @description EdgeInterfaceSpec defines the desired state of EdgeInterface
             */
            spec: {
                /**
                 * bridgeDomain
                 * @description Reference to a Bridge Domain
                 */
                bridgeDomain?: string;
                /**
                 * Encapsulation
                 * @description Indicates if the EdgeInterface uses VLAN tagging
                 * @default null
                 * @enum {string}
                 */
                encapType: "null" | "dot1q";
                /**
                 * Gateway IPv4 Addresses
                 * @description List of gateway IPv4 addresses in ip/mask form - e.g. 192.168.0.1/24
                 */
                gatewayIPV4Addresses?: {
                    /**
                     * IP Prefix
                     * @description Address and mask to use
                     */
                    ipPrefix: string;
                    /**
                     * Primary
                     * @description Indicates which address to use as primary for broadcast
                     */
                    primary?: boolean;
                }[];
                /**
                 * Gateway IPv6 Addresses
                 * @description List of gateway IPv6 addresses in ip/mask form - e.g. fc00::1/120
                 */
                gatewayIPV6Addresses?: {
                    /**
                     * IP Prefix
                     * @description Address and mask to use
                     */
                    ipPrefix: string;
                    /**
                     * Primary
                     * @description Indicates which address to use as primary for broadcast
                     */
                    primary?: boolean;
                }[];
                /**
                 * Interface Resource
                 * @description Reference to an interface
                 */
                interfaceResource: string;
                /**
                 * Router
                 * @description Reference to a Router
                 */
                router?: string;
                /**
                 * VLAN ID
                 * @description Single value between 0-4094 supported
                 */
                vlanID?: number;
            };
            /**
             * Status
             * @description EdgeInterfaceStatus defines the observed state of EdgeInterface
             */
            readonly status?: Record<string, never>;
        };
        /** @description EdgeInterfaceList is a list of edgeinterfaces */
        "com.nokia.eda.core.v1.EdgeInterfaceList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.EdgeInterface"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.EdgeInterface_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.EdgeInterface_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.EdgeInterface_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description HttpProxy is the Schema for the httpproxies API */
        "com.nokia.eda.core.v1.HttpProxy": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default HttpProxy */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.HttpProxy_metadata"];
            /**
             * Specification
             * @description HttpProxySpec defines the desired state of HttpProxy
             */
            spec: {
                /**
                 * Authentication Type
                 * @description Determines where authentication happens.
                 *     If "atDestination", then no authentication happens in API server and any auth tokens are forwarded as is.
                 *     If "inApiServer", then authentication happens within the API server and auth tokens are stripped prior to forwarding.
                 * @enum {string}
                 */
                authType: "atDestination" | "inApiServer";
                /**
                 * Git
                 * @description The proxy destination, including the protocol.
                 */
                rootUrl: string;
            };
            /**
             * Status
             * @description HttpProxyStatus defines the observed state of HttpProxy
             */
            readonly status?: Record<string, never>;
        };
        /** @description HttpProxyList is a list of httpproxies */
        "com.nokia.eda.core.v1.HttpProxyList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.HttpProxy"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.HttpProxy_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.HttpProxy_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.HttpProxy_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.HttpProxy_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
        /** @description IPAllocationPool is the Schema for the ipallocationpools API */
        "com.nokia.eda.core.v1.IPAllocationPool": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default IPAllocationPool */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool_metadata"];
            /**
             * Specification
             * @description IPAllocationPool is a generic IP allocation pool supporting allocation of IPv4 and/or IPv6 addresses from a set of segments.
             *     It is different from IPInSubnetAllocationPool in that it returns a single unzoned IP address, i.e. an IP address without a subnet. For example a 10.1.1.0/24 segment could return 10.1.1.1.
             *     Consult application documentation to know which pool type to use for a given use case.
             */
            spec: {
                /**
                 * Publish Allocations
                 * @description If true, allocations in segments will be published to EDB, available to query via EQL and trigger state applications off of.
                 */
                publishAllocations?: boolean;
                /**
                 * Segments
                 * @description List of segments containing IPv4 or IPv6 addresses to allocate.
                 */
                segments: {
                    /**
                     * Allocations
                     * @description List of reservations to exclude from allocations from this segment.
                     */
                    allocations?: {
                        /**
                         * Name
                         * @description Name of this allocation.
                         */
                        name: string;
                        /**
                         * Value
                         * @description Allocation to reserve.
                         */
                        value: string;
                    }[];
                    /**
                     * Reservations
                     * @description List of ranges to exclude from allocations from this segment.
                     */
                    reservations?: {
                        /**
                         * End
                         * @description Value to reserve to.
                         */
                        end: string;
                        /**
                         * Start
                         * @description Value to start reserving.
                         */
                        start: string;
                    }[];
                    /**
                     * Subnet
                     * @description IPv4 or IPv6 subnet, e.g. 10.1.1.0/24.
                     */
                    subnet: string;
                }[];
            };
            /**
             * Status
             * @description IPAllocationPoolStatus defines the observed state of IPAllocationPool
             */
            readonly status?: Record<string, never>;
        };
        /** @description IPAllocationPoolList is a list of ipallocationpools */
        "com.nokia.eda.core.v1.IPAllocationPoolList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.IPAllocationPool_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.IPAllocationPool_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.IPAllocationPool_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description IPInSubnetAllocationPool is the Schema for the ipinsubnetallocationpools API */
        "com.nokia.eda.core.v1.IPInSubnetAllocationPool": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default IPInSubnetAllocationPool */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool_metadata"];
            /**
             * Specification
             * @description IPInSubnetAllocationPool is a generic IP allocation pool supporting allocation of IPv4 and/or IPv6 addresses from a set of segments.
             *     It is different from IPAllocationPool in that it returns a single zoned IP address, i.e. an IP address with a subnet. For example a 10.1.1.0/24 segment could return 10.1.1.1/24.
             *     Consult application documentation to know which pool type to use for a given use case.
             */
            spec: {
                /**
                 * Publish Allocations
                 * @description If true, allocations in segments will be published to EDB, available to query via EQL and trigger state applications off of.
                 */
                publishAllocations?: boolean;
                /**
                 * Segments
                 * @description List of segments containing IPv4 or IPv6 addresses to allocate.
                 */
                segments: {
                    /**
                     * Allocations
                     * @description List of reservations to exclude from allocations from this segment.
                     */
                    allocations?: {
                        /**
                         * Name
                         * @description Name of this allocation.
                         */
                        name: string;
                        /**
                         * Value
                         * @description Allocation to reserve.
                         */
                        value: string;
                    }[];
                    /**
                     * Reservations
                     * @description List of ranges to exclude from allocations from this segment.
                     */
                    reservations?: {
                        /**
                         * End
                         * @description Value to reserve to.
                         */
                        end: string;
                        /**
                         * Start
                         * @description Value to start reserving.
                         */
                        start: string;
                    }[];
                    /**
                     * Subnet
                     * @description IPv4 or IPv6 subnet, e.g. 10.1.1.0/24.
                     */
                    subnet: string;
                }[];
            };
            /**
             * Status
             * @description IPInSubnetAllocationPoolStatus defines the observed state of IPInSubnetAllocationPool
             */
            readonly status?: Record<string, never>;
        };
        /** @description IPInSubnetAllocationPoolList is a list of ipinsubnetallocationpools */
        "com.nokia.eda.core.v1.IPInSubnetAllocationPoolList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.IPInSubnetAllocationPool_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.IPInSubnetAllocationPool_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.IPInSubnetAllocationPool_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description IndexAllocationPool is the Schema for the indexallocationpools API */
        "com.nokia.eda.core.v1.IndexAllocationPool": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default IndexAllocationPool */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool_metadata"];
            /**
             * Specification
             * @description IndexAllocationPool is a generic allocation pool supporting allocation of indexes from a set of segments.
             *     It supports allocating things like VLANs, subinterface indexes, autonomous system numbers, or any other integer-based index.
             */
            spec: {
                /**
                 * Publish Allocations
                 * @description If true, allocations in segments will be published to EDB, available to query via EQL and trigger state applications off of.
                 */
                publishAllocations?: boolean;
                /**
                 * Segments
                 * @description List of segments containing indexes to allocate.
                 */
                segments: {
                    /**
                     * Allocations
                     * @description List of reservations to exclude from allocations from this segment.
                     */
                    allocations?: {
                        /**
                         * Name
                         * @description Name of this allocation.
                         */
                        name: string;
                        /**
                         * Value
                         * Format: int32
                         * @description Index to reserve.
                         */
                        value: number;
                    }[];
                    /**
                     * Reservations
                     * @description Range of reservations to exclude from allocations from this segment.
                     */
                    reservations?: {
                        /**
                         * End
                         * Format: int32
                         * @description Value to reserve to.
                         */
                        end: number;
                        /**
                         * Start
                         * Format: int32
                         * @description Value to start reserving.
                         */
                        start: number;
                    }[];
                    /**
                     * Size
                     * Format: int32
                     * @description Number of elements in the segment.
                     */
                    size: number;
                    /**
                     * Start
                     * Format: int32
                     * @description Starting value of the segment.
                     */
                    start: number;
                }[];
            };
            /**
             * Status
             * @description IndexAllocationPoolStatus defines the observed state of IndexAllocationPool
             */
            readonly status?: Record<string, never>;
        };
        /** @description IndexAllocationPoolList is a list of indexallocationpools */
        "com.nokia.eda.core.v1.IndexAllocationPoolList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.IndexAllocationPool_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.IndexAllocationPool_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.IndexAllocationPool_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description License is the Schema for the licenses API */
        "com.nokia.eda.core.v1.License": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default License */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.License_metadata"];
            /**
             * Specification
             * @description A License represents an application license providing functionality within EDA. A license providing the "base" feature must be provided/valid for transactions to be processed.
             */
            spec: {
                /**
                 * Data
                 * @description The license key. This is a base64 encoded string.
                 */
                data: string;
                /**
                 * Enabled
                 * @description Indicates if this license is available for use.
                 * @default true
                 */
                enabled: boolean;
            };
            /**
             * Status
             * @description Status information for this license.
             */
            readonly status?: {
                /**
                 * Comment
                 * @description Any comment provided in the license.
                 */
                comment?: string;
                /**
                 * Expiration Date
                 * Format: date
                 * @description Date and time the license expires.
                 */
                expirationDate?: string;
                /**
                 * Expired
                 * @description Indicates if the license has expired.
                 */
                expired: boolean;
                /**
                 * Issued Date
                 * Format: date
                 * @description Date and time the license was issued.
                 */
                issuedDate?: string;
                /**
                 * Used
                 * @description Indicates if license has been used.
                 */
                used: boolean;
                /**
                 * Valid
                 * @description Indicates if the license is valid.
                 */
                valid: boolean;
            };
        };
        /** @description LicenseList is a list of licenses */
        "com.nokia.eda.core.v1.LicenseList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.License"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.License_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
        /** @description Namespace is the Schema for the namespaces API */
        "com.nokia.eda.core.v1.Namespace": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Namespace */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.Namespace_metadata"];
            /**
             * Specification
             * @description A Namespace is a logical partition within the cluster that provides a mechanism for isolating resources.
             *     Namespaces allow for resource segmentation, enabling multiple teams or applications to share the same cluster without conflict.
             */
            spec: {
                /**
                 * Description
                 * @description An optional description of the use of the namespace.
                 */
                description?: string;
            };
            /**
             * Status
             * @description NamespaceStatus defines the observed state of Namespace
             */
            readonly status?: Record<string, never>;
        };
        /** @description NamespaceList is a list of namespaces */
        "com.nokia.eda.core.v1.NamespaceList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.Namespace"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.Namespace_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.Namespace_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.Namespace_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.Namespace_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
        /** @description NodeProfile is the Schema for the nodeprofiles API */
        "com.nokia.eda.core.v1.NodeProfile": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default NodeProfile */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.NodeProfile_metadata"];
            /**
             * Specification
             * @description NodeProfileSpec defines the desired state of NodeProfile
             */
            spec: {
                /**
                 * Annotations
                 * @description Indicates if NPP should annotate sent configuration.
                 * @default false
                 */
                annotate: boolean;
                /**
                 * Container Image
                 * @description Container image to use when simulating TopoNodes referencing this NodeProfile, e.g. ghcr.io/nokia/srlinux:24.7.1.
                 */
                containerImage?: string;
                /**
                 * DHCP
                 * @description DHCP options to use when onboarding the TopoNode. Optional if not bootstrapping using EDA.
                 */
                dhcp?: {
                    /**
                     * DHCPv4 Options
                     * @description DHCPv4 options to return to TopoNodes referencing this NodeProfile.
                     */
                    dhcp4Options?: {
                        /**
                         * Option
                         * @description DHCPv4 option to return to the TopoNode.
                         * @enum {string}
                         */
                        option: "1-SubnetMask" | "2-TimeOffset" | "3-Router" | "4-TimeServer" | "5-NameServer" | "6-DomainNameServer" | "7-LogServer" | "8-QuoteServer" | "9-LPRServer" | "10-ImpressServer" | "11-ResourceLocationServer" | "12-HostName" | "13-BootFileSize" | "14-MeritDumpFile" | "15-DomainName" | "16-SwapServer" | "17-RootPath" | "18-ExtensionsPath" | "19-IPForwarding" | "20-NonLocalSourceRouting" | "21-PolicyFilter" | "22-MaximumDatagramAssemblySize" | "23-DefaultIPTTL" | "24-PathMTUAgingTimeout" | "25-PathMTUPlateauTable" | "26-InterfaceMTU" | "27-AllSubnetsAreLocal" | "28-BroadcastAddress" | "29-PerformMaskDiscovery" | "30-MaskSupplier" | "31-PerformRouterDiscovery" | "32-RouterSolicitationAddress" | "33-StaticRoutingTable" | "34-TrailerEncapsulation" | "35-ArpCacheTimeout" | "36-EthernetEncapsulation" | "37-DefaulTCPTTL" | "38-TCPKeepaliveInterval" | "39-TCPKeepaliveGarbage" | "40-NetworkInformationServiceDomain" | "41-NetworkInformationServers" | "42-NTPServers" | "43-VendorSpecificInformation" | "44-NetBIOSOverTCPIPNameServer" | "45-NetBIOSOverTCPIPDatagramDistributionServer" | "46-NetBIOSOverTCPIPNodeType" | "47-NetBIOSOverTCPIPScope" | "48-XWindowSystemFontServer" | "49-XWindowSystemDisplayManager" | "50-RequestedIPAddress" | "51-IPAddressLeaseTime" | "52-OptionOverload" | "53-DHCPMessageType" | "54-ServerIdentifier" | "55-ParameterRequestList" | "56-Message" | "57-MaximumDHCPMessageSize" | "58-RenewTimeValue" | "59-RebindingTimeValue" | "60-ClassIdentifier" | "61-ClientIdentifier" | "62-NetWareIPDomainName" | "63-NetWareIPInformation" | "64-NetworkInformationServicePlusDomain" | "65-NetworkInformationServicePlusServers" | "66-TFTPServerName" | "67-BootfileName" | "68-MobileIPHomeAgent" | "69-SimpleMailTransportProtocolServer" | "70-PostOfficeProtocolServer" | "71-NetworkNewsTransportProtocolServer" | "72-DefaultWorldWideWebServer" | "73-DefaultFingerServer" | "74-DefaultInternetRelayChatServer" | "75-StreetTalkServer" | "76-StreetTalkDirectoryAssistanceServer" | "77-UserClassInformation" | "78-SLPDirectoryAgent" | "79-SLPServiceScope" | "80-RapidCommit" | "81-FQDN" | "82-RelayAgentInformation" | "83-InternetStorageNameService" | "85-NDSServers" | "86-NDSTreeName" | "87-NDSContext" | "88-BCMCSControllerDomainNameList" | "89-BCMCSControllerIPv4AddressList" | "90-Authentication" | "91-ClientLastTransactionTime" | "92-AssociatedIP" | "93-ClientSystemArchitectureType" | "94-ClientNetworkInterfaceIdentifier" | "95-LDAP" | "97-ClientMachineIdentifier" | "98-OpenGroupUserAuthentication" | "99-GeoConfCivic" | "100-IEEE10031TZString" | "101-ReferenceToTZDatabase" | "112-NetInfoParentServerAddress" | "113-NetInfoParentServerTag" | "114-URL" | "116-AutoConfigure" | "117-NameServiceSearch" | "118-SubnetSelection" | "119-DNSDomainSearchList" | "120-SIPServers" | "121-ClasslessStaticRoute" | "122-CCC" | "123-GeoConf" | "124-VendorIdentifyingVendorClass" | "125-VendorIdentifyingVendorSpecific" | "128-TFTPServerIPAddress" | "129-CallServerIPAddress" | "130-DiscriminationString" | "131-RemoteStatisticsServerIPAddress" | "132-8021PVLANID" | "133-8021QL2Priority" | "134-DiffservCodePoint" | "135-HTTPProxyForPhoneSpecificApplications" | "136-PANAAuthenticationAgent" | "137-LoSTServer" | "138-CAPWAPAccessControllerAddresses" | "139-OPTIONIPv4AddressMoS" | "140-OPTIONIPv4FQDNMoS" | "141-SIPUAConfigurationServiceDomains" | "142-OPTIONIPv4AddressANDSF" | "143-OPTIONIPv6AddressANDSF" | "150-TFTPServerAddress" | "151-StatusCode" | "152-BaseTime" | "153-StartTimeOfState" | "154-QueryStartTime" | "155-QueryEndTime" | "156-DHCPState" | "157-DataSource" | "175-Etherboot" | "176-IPTelephone" | "177-EtherbootPacketCableAndCableHome" | "208-PXELinuxMagicString" | "209-PXELinuxConfigFile" | "210-PXELinuxPathPrefix" | "211-PXELinuxRebootTime" | "212-OPTION6RD" | "213-OPTIONv4AccessDomain" | "220-SubnetAllocation" | "221-VirtualSubnetAllocation" | "224-Reserved" | "225-Reserved" | "226-Reserved" | "227-Reserved" | "228-Reserved" | "229-Reserved" | "230-Reserved" | "231-Reserved" | "232-Reserved" | "233-Reserved" | "234-Reserved" | "235-Reserved" | "236-Reserved" | "237-Reserved" | "238-Reserved" | "239-Reserved" | "240-Reserved" | "241-Reserved" | "242-Reserved" | "243-Reserved" | "244-Reserved" | "245-Reserved" | "246-Reserved" | "247-Reserved" | "248-Reserved" | "249-Reserved" | "250-Reserved" | "251-Reserved" | "252-Reserved" | "253-Reserved" | "254-Reserved" | "255-End";
                        /**
                         * Value
                         * @description Value to return to the TopoNode for the specified option.
                         */
                        value: string[];
                    }[];
                    /**
                     * DHCPv6 Options
                     * @description DHCPv6 options to return to TopoNodes referencing this NodeProfile.
                     */
                    dhcp6Options?: {
                        /**
                         * Option
                         * @description DHCPv6 option to return to the TopoNode.
                         * @enum {string}
                         */
                        option: "59-BootfileUrl";
                        /**
                         * Value
                         * @description Value to return to the TopoNode for the specified option.
                         */
                        value: string[];
                    }[];
                    /**
                     * Management Pool - IPv4
                     * @description IPInSubnetAllocationPool to use for IPv4 allocations of the management address for TopoNodes referencing this NodeProfile.
                     */
                    managementPoolv4?: string;
                    /**
                     * Management Pool - IPv6
                     * @description IPInSubnetAllocationPool to use for IPv6 allocations of the management address for TopoNodes referencing this NodeProfile.
                     */
                    managementPoolv6?: string;
                    /**
                     * Preferred Address Family
                     * @description Preferred IP address family
                     * @enum {string}
                     */
                    preferredAddressFamily?: "IPv4" | "IPv6";
                };
                /**
                 * Image Pull Secret
                 * @description Secret used to authenticate to the container registry where the container image is hosted.
                 */
                imagePullSecret?: string;
                /**
                 * Images
                 * @description URLs hosting software images for bootstrapping TopoNodes referencing this NodeProfile.
                 */
                images?: {
                    /**
                     * Image
                     * @description URL hosting the software image, e.g. srlimages/srlinux-24.7.1.bin.
                     */
                    image: string;
                    /**
                     * Image MD5
                     * @description URL hosting the software image md5 hash. e.g. srlimages/srlinux-24.7.1.bin.md5.
                     */
                    imageMd5?: string;
                }[];
                /**
                 * License
                 * @description ConfigMap containing a license for TopoNodes referencing this NodeProfile.
                 */
                license?: string;
                /**
                 * LLMDB
                 * @description URL containing LLDB  to use when interacting with LLM-DB and OpenAI for query autocompletion, e.g. http://eda-asvr/llmdb/ce-llm-db-srlinux-24.7.1.tar.gz.
                 */
                llmDb?: string;
                /**
                 * Node User
                 * @description Reference to a NodeUser to use for authentication to TopoNodes referencing this NodeProfile.
                 */
                nodeUser: string;
                /**
                 * Onboarding Password
                 * Format: password
                 * @description The password to use when onboarding TopoNodes referencing this NodeProfile, e.g. admin.
                 */
                onboardingPassword?: string;
                /**
                 * Onboarding Username
                 * @description The username to use when onboarding TopoNodes referencing this NodeProfile, e.g. admin.
                 */
                onboardingUsername?: string;
                /**
                 * Operating System
                 * @description Sets the operating system of this NodeProfile, e.g. srl.
                 * @enum {string}
                 */
                operatingSystem: "srl" | "sros" | "nxos";
                /**
                 * Platform Path
                 * @description JSPath to use for retrieving the version string from TopoNodes referencing this NodeProfile, e.g. .platform.chassis.type.
                 */
                platformPath?: string;
                /**
                 * Port
                 * @description Port used to establish a connection to the TopoNode, e.g. 57400.
                 * @default 57400
                 */
                port: number;
                /**
                 * Serial Number Path
                 * @description JSPath to use for retrieving the serial number string from TopoNodes referencing this NodeProfile, e.g. .platform.chassis.serial-number.
                 */
                serialNumberPath?: string;
                /**
                 * Version
                 * @description Sets the software version of this NodeProfile, e.g. 24.7.1 (for srl), or 24.7.r1 (for sros).
                 */
                version: string;
                /**
                 * Version Match
                 * @description Regular expression to match the node-retrieved version string to TopoNode version, e.g. v0\.0\.0.*.
                 */
                versionMatch?: string;
                /**
                 * Version Path
                 * @description JSPath to use for retrieving the version string from TopoNodes referencing this NodeProfile, e.g. .system.information.version.
                 */
                versionPath?: string;
                /**
                 * YANG
                 * @description URL containing YANG modules and schema profile to use when interacting with TopoNodes referencing this NodeProfile, e.g. http://eda-asvr/schemaprofiles/srlinux-24.7.1.zip.
                 */
                yang: string;
            };
            /** Status */
            readonly status?: Record<string, never>;
        };
        /** @description NodeProfileList is a list of nodeprofiles */
        "com.nokia.eda.core.v1.NodeProfileList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.NodeProfile"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.NodeProfile_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.NodeProfile_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.NodeProfile_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.NodeProfile_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description NodeUser is the Schema for the nodeusers API */
        "com.nokia.eda.core.v1.NodeUser": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default NodeUser */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.NodeUser_metadata"];
            /**
             * Specification
             * @description The NodeUser resource represents a user that can be deployed to a set of TopoNodes. It supports managing the user's password, SSH keys, and group bindings.
             *     Additionally a NodeUser is referenced by a NodeProfile to indicate how NPP should connect to TopoNodes.
             */
            spec: {
                /**
                 * Group Bindings
                 * @description Matching of this user to node-specific permissions via groups.
                 */
                groupBindings: {
                    /**
                     * Groups
                     * @description Assigned groups for this user.
                     */
                    groups: string[];
                    /**
                     * Node Selector
                     * Format: labelselector
                     * @description Selector to use when selecting TopoNodes to deploy this user to.
                     */
                    nodeSelector?: string[];
                    /**
                     * Nodes
                     * @description  TopoNodes to deploy this user to.
                     */
                    nodes?: string[];
                }[];
                /**
                 * Password
                 * Format: password
                 * @description Password for this user.
                 */
                password: string;
                /**
                 * SSH Public Keys
                 * @description SSH public keys to deploy for the user.
                 */
                sshPublicKeys?: string[];
                /**
                 * Username
                 * @description Name of this user. If not provided, the name of the resource will be used.
                 */
                username?: string;
            };
            /**
             * Status
             * @description Deployment status of this NodeUser.
             */
            readonly status?: {
                /**
                 * Group Bindings
                 * @description List of TopoNodes user has been deployed to, along with corresponding groups.
                 */
                groupBindings?: {
                    /**
                     * Groups
                     * @description Groups this user is a member of on this node.
                     */
                    groups?: string[];
                    /**
                     * Node
                     * @description Node this user is deployed to.
                     */
                    node?: string;
                }[];
            };
        };
        /** @description NodeUserList is a list of nodeusers */
        "com.nokia.eda.core.v1.NodeUserList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.NodeUser"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.NodeUser_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.NodeUser_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.NodeUser_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.NodeUser_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Role is the Schema for the roles API */
        "com.nokia.eda.core.v1.Role": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Role */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.Role_metadata"];
            /**
             * Specification
             * @description RoleSpec defines the desired state of Role
             */
            spec: {
                /**
                 * Description
                 * @description A description for the role.
                 */
                description?: string;
                /**
                 * Resource Rules
                 * @description The rules for access to kubernetes resources
                 */
                resourceRules?: {
                    /**
                     * API Groups
                     * @description The API groups for the resources controlled by the rule.
                     *     An API group consists of an apiGroup and a version, e.g. "apigroup/version".
                     *     The API group can be a wildcard ("*"), in which case it will match any API group.
                     */
                    apiGroups: string[];
                    /**
                     * Permissions
                     * @description Permissions for resources specified by the rule.
                     * @enum {string}
                     */
                    permissions: "none" | "read" | "readWrite";
                    /**
                     * Resources
                     * @description Names for the resources controlled by the rule.
                     *     It can be a wildcard ("*"), in which case it will match any resource
                     *     in the matching API groups.
                     */
                    resources: string[];
                }[];
                /**
                 * Table Rules
                 * @description The rules for access to the database tables.
                 */
                tableRules?: {
                    /**
                     * Path
                     * @description EDB path to which this rule applies. It can end in ".*"
                     *     in which case the final portion of the table path can be anything, if the
                     *     prefix matches. It can end in ".**" in which case the table path can be
                     *     anything if the prefix matches.
                     */
                    path: string;
                    /**
                     * Permissions
                     * @description Permissions for the given EDB path.
                     * @enum {string}
                     */
                    permissions: "none" | "read";
                }[];
                /**
                 * URL Rules
                 * @description The rules for access to api-server proxied routes.
                 */
                urlRules?: {
                    /**
                     * Path
                     * @description The API server URL path to which this rule applies. It can end in "/*"
                     *     in which case the final portion of the URL path can be anything, if the
                     *     prefix matches. It can end in "/**" in which case the URL path can be
                     *     anything if the prefix matches.
                     */
                    path: string;
                    /**
                     * Permissions
                     * @description The permissions for the API server URL for the rule.
                     * @enum {string}
                     */
                    permissions: "none" | "read" | "readWrite";
                }[];
            };
            /**
             * Status
             * @description RoleStatus defines the observed state of Role
             */
            readonly status?: Record<string, never>;
        };
        /** @description RoleList is a list of roles */
        "com.nokia.eda.core.v1.RoleList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.Role"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.Role_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.Role_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.Role_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.Role_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description SubnetAllocationPool is the Schema for the subnetallocationpools API */
        "com.nokia.eda.core.v1.SubnetAllocationPool": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default SubnetAllocationPool */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool_metadata"];
            /**
             * Specification
             * @description SubnetAllocationPool is a generic subnet allocation pool supporting allocation of IPv4 and/or IPv6 child subnets from a list of parent subnet segments.
             *     It allocates a subnet of the configured length from the provided parent subnet.
             *     For example a pool could return 10.1.0.8/29 when a segment is defined as subnet 10.1.0.0/16 with subnet length 29.
             *     Consult application documentation to know which pool type to use for a given use case.
             */
            spec: {
                /**
                 * Publish Allocations
                 * @description If true, allocations in segments will be published to EDB, available to query via EQL and trigger state applications off of.
                 */
                publishAllocations?: boolean;
                /**
                 * Segments
                 * @description List of segments containing subnets to allocate.
                 */
                segments: {
                    /**
                     * Allocations
                     * @description List of reservations to exclude from allocations from this segment.
                     */
                    allocations?: {
                        /**
                         * Name
                         * @description Name of this allocation.
                         */
                        name: string;
                        /**
                         * Value
                         * @description Allocation to reserve.
                         */
                        value: string;
                    }[];
                    /**
                     * Reservations
                     * @description List of ranges to exclude from allocations from this segment.
                     */
                    reservations?: {
                        /**
                         * End
                         * @description Value to reserve to.
                         */
                        end: string;
                        /**
                         * Start
                         * @description Value to start reserving.
                         */
                        start: string;
                    }[];
                    /**
                     * Subnet
                     * @description IPv4 or IPv6 subnet to allocate subnets from, e.g. 10.1.0.0/16.
                     */
                    subnet: string;
                    /**
                     * Subnet Length
                     * Format: int32
                     * @description The size of the subnets to be allocated from within the parent subnet, e.g. 29 (which could allocate 10.1.0.8/29, for example).
                     */
                    subnetLength: number;
                }[];
            };
            /**
             * Status
             * @description SubnetAllocationPoolStatus defines the observed state of SubnetAllocationPool
             */
            readonly status?: Record<string, never>;
        };
        /** @description SubnetAllocationPoolList is a list of subnetallocationpools */
        "com.nokia.eda.core.v1.SubnetAllocationPoolList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.SubnetAllocationPool_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.SubnetAllocationPool_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.SubnetAllocationPool_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description TopoBreakout is the Schema for the topobreakouts API */
        "com.nokia.eda.core.v1.TopoBreakout": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default TopoBreakout */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.TopoBreakout_metadata"];
            /**
             * Specification
             * @description TopoBreakoutSpec defines the desired state of TopoBreakout
             */
            spec: {
                /**
                 * Number of Channels
                 * @description The number of breakout channels to create
                 */
                channels: number;
                /**
                 * Normalized Parent Interface
                 * @description A list of normalized parent interface/port
                 */
                interface?: string[];
                /**
                 * Node
                 * @description Reference to a list of TopoNodes where the parent interfaces are to be broken out
                 */
                node: string[];
                /**
                 * Speed
                 * @description The speed of each breakout channel
                 * @enum {string}
                 */
                speed: "800G" | "400G" | "200G" | "100G" | "50G" | "40G" | "25G" | "10G";
            };
            /**
             * Status
             * @description TopoBreakoutStatus defines the observed state of TopoBreakout
             */
            readonly status?: Record<string, never>;
        };
        /** @description TopoBreakoutList is a list of topobreakouts */
        "com.nokia.eda.core.v1.TopoBreakoutList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.TopoBreakout"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.TopoBreakout_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.TopoBreakout_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.TopoBreakout_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description TopoLink is the Schema for the topolinks API */
        "com.nokia.eda.core.v1.TopoLink": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default TopoLink */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.TopoLink_metadata"];
            /**
             * Specification
             * @description TopoLink represents a logical link between two TopoNodes. It may include more than one physical link, being used to represent a LAG or multihomed link.
             *     To create a point to point link with a single interface on both sides use a single link property.
             *     To create a point to point link with a LAG configured on both side, use two links with matching nodes.
             *     A multihomed LAG is created by using two or more links where the A side and/or B side can be different.
             *     Creating a link with only A specified will create an edge interface.
             */
            spec: {
                /**
                 * Links
                 * @description Define the set of physical links making up this TopoLink.
                 */
                links: {
                    /**
                     * A
                     * @description Local, or "A" endpoint of the link.
                     */
                    local: {
                        /**
                         * Interface
                         * @description Normalized name of the interface/port, e.g. ethernet-1-1.
                         */
                        interface?: string;
                        /**
                         * Interface Resource
                         * @description Reference to a Interface.
                         */
                        interfaceResource: string;
                        /**
                         * Node
                         * @description Reference to a TopoNode.
                         */
                        node: string;
                    };
                    /**
                     * B
                     * @description Remote, or "B" endpoint of the link.
                     */
                    remote?: {
                        /**
                         * Interface
                         * @description Normalized name of the interface/port, e.g. ethernet-1-1.
                         */
                        interface?: string;
                        /**
                         * Interface Resource
                         * @description Reference to a Interface.
                         */
                        interfaceResource: string;
                        /**
                         * Node
                         * @description Reference to a TopoNode.
                         */
                        node: string;
                    };
                    /**
                     * Speed
                     * @description Speed of the link.
                     * @enum {string}
                     */
                    speed?: "800G" | "400G" | "200G" | "100G" | "50G" | "40G" | "25G" | "10G" | "2.5G" | "1G" | "100M";
                    /**
                     * Type
                     * @description Specify the type of link.
                     *     If type is set to edge, topology information for the remote device can be set; when doing so the Remote Node can be set as the hostname of the remote device and Remote Interface as the remote interface name in the device specific format, e.g. eth0.
                     * @enum {string}
                     */
                    type: "edge" | "interSwitch" | "loopback";
                }[];
            };
            /**
             * Status
             * @description TopoLinkStatus defines the observed state of TopoLink
             */
            readonly status?: {
                /**
                 * Members
                 * @description List of members present on the TopoLink.
                 */
                members?: {
                    /**
                     * Interface
                     * @description Reference to an Interface
                     */
                    interface?: string;
                    /**
                     * Node
                     * @description Reference to a TopoNode
                     */
                    node: string;
                    /**
                     * Operational State
                     * @description Indicates the operational state of the TopoLink member.
                     */
                    operationalState: string;
                }[];
                /**
                 * Operational State
                 * @description Indicates the aggregate operational state of the TopoLink.
                 */
                operationalState: string;
            };
        };
        /** @description TopoLinkList is a list of topolinks */
        "com.nokia.eda.core.v1.TopoLinkList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.TopoLink"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.TopoLink_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.TopoLink_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.TopoLink_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.TopoLink_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description TopoNode is the Schema for the toponodes API */
        "com.nokia.eda.core.v1.TopoNode": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default TopoNode */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.TopoNode_metadata"];
            /**
             * Specification
             * @description A managed network element is represented via a TopoNode resource, describing characteristics of a specific element in the topology.
             */
            spec: {
                /**
                 * Components
                 * @description List of components within the TopoNode.
                 *     Used to define the type and location of linecards, fabrics (SFM), media adapter cards (MDA) and control cards (CPM).
                 */
                component?: {
                    /**
                     * Kind
                     * @description The kind of Component, e.g. lineCard.
                     * @enum {string}
                     */
                    kind: "lineCard" | "fabric" | "mda" | "connector" | "xiom" | "powerShelf" | "powerModule";
                    /**
                     * Slot
                     * @description The slot this Component resides in, unset for Components that do not have a slot or ID.
                     *     e.g. 1 would denote the linecard slot 1, 1/1 would denote linecard slot 1 mda slot 1.
                     */
                    slot?: string;
                    /**
                     * Type
                     * @description Denotes the type of hardware being provisioned, e.g. xcm-x20.
                     */
                    type: string;
                }[];
                /**
                 * License
                 * @description Reference to a ConfigMap containing a license for the TopoNode. Overrides the license set in the referenced NodeProfile, if present.
                 */
                license?: string;
                /**
                 * MAC Address
                 * Format: macAddr
                 * @description MAC address to associate with this TopoNode.
                 *     Typically the chassis MAC address, optionally sent by a node in DHCP requests.
                 *     Not required when a TopoNode is not being bootstrapped by EDA, or is simulated through CX.
                 */
                macAddress?: string;
                /**
                 * Node Profile
                 * @description Reference to a NodeProfile to use with this TopoNode.
                 */
                nodeProfile: string;
                /**
                 * NPP
                 * @description Options relating to NPP interactions with the node.
                 */
                npp?: {
                    /**
                     * Mode
                     * @description The mode in which this TopoNode is functioning.
                     *     "normal" (the default)
                     *        indicates that NPP is expecting an endpoint to exist, and will accept and confirm changes only if the endpoint
                     *        accepts them.
                     *     "maintenance"
                     *        indicates that no changes will be accepted for the TopoNode, irrespective if the endpoint is up and reachable.
                     *        The exception is if an upgrade is occuring, in which case changes will be accepted.
                     *     "null"
                     *     	  indicates that changes will be accepted from CRs and no NPP will be spun up. NPP validation will not occur.
                     *        This may be useful in playground mode to avoid spinning up of 1000s of NPPs.
                     *     "emulate"
                     *        indicates that changes will be accepted at the NPP level, without pushing them to a endpoint. NPP validation
                     *        still occurs.  If no IP address is present, we also run in emulate mode.
                     * @default normal
                     * @enum {string}
                     */
                    mode: "normal" | "maintenance" | "null" | "emulate";
                };
                /**
                 * Onboarded
                 * @description Indicates if this TopoNode has been bootstrapped or is reachable via configured credentials. Set by BootstrapServer when it completes onboarding functions for a given TopoNode.
                 *     Most applications ignore TopoNodes that have not been onboarded yet.
                 * @default false
                 */
                onBoarded: boolean;
                /**
                 * Operating System
                 * @description Operating system running on this TopoNode, e.g. srl.
                 * @default srl
                 * @enum {string}
                 */
                operatingSystem: "srl" | "sros" | "nxos";
                /**
                 * Platform
                 * @description Platform type of this TopoNode, e.g. 7220 IXR-D3L.
                 */
                platform: string;
                /**
                 * Production Address
                 * Format: ip
                 * @description Production address of this TopoNode - this is the address the real, production instance of this TopoNode uses.
                 *     If left blank, an address will be allocated from the management IP pool specified in the referenced NodeProfile.
                 *     If this TopoNode is not bootstrapped by EDA this field must be provided.
                 */
                productionAddress?: {
                    /**
                     * IPv4
                     * Format: ip
                     * @description The IPv4 production address
                     */
                    ipv4?: string;
                    /**
                     * IPv6
                     * Format: ip
                     * @description The IPv6 production address
                     */
                    ipv6?: string;
                };
                /**
                 * Serial Number
                 * @description Serial number of this TopoNode, optionally sent by a node in DHCP requests.
                 *     Not required when a TopoNode is not being bootstrapped by EDA, or is simulated through CX.
                 */
                serialNumber?: string;
                /**
                 * System Interface
                 * @description Name of the Interface resource representing the primary loopback on the TopoNode.
                 */
                systemInterface?: string;
                /**
                 * Version
                 * @description Sets the software version of this TopoNode, e.g. 24.7.1 (for srl), or 24.7.r1 (for sros).
                 */
                version: string;
            };
            /**
             * Status
             * @description TopoNodeStatus defines the observed state of TopoNode
             */
            readonly status?: {
                /**
                 * Node Address
                 * @description Address and port used to connected to the node.
                 */
                "node-details"?: string;
                /**
                 * Node
                 * @description The current state of the connection between NPP and the node.
                 *     "TryingToConnect"
                 *        NPP is attempting to connect and establish connectivity to the node
                 *     "WaitingForInitialCfg"
                 *        NPP is connected to the node but waiting for intial config to push
                 *     "Committing"
                 *     	  NPP is in progress of commiting
                 *     "RetryingCommit"
                 *        NPP lost sync to node and is re-pushing current config
                 *     "Synced"
                 *        NPP is in fully synced state
                 *     "Standby"
                 *        NPP is running in standby mode. This state is only used on standby clusters with georedundancy.
                 *     "NoIpAddress"
                 *        NPP is running but there is no IP address for node. This only happen in sim setups when
                 *        CX has not created the simulated node, or the simulated pod failed to launch due to image error.
                 */
                "node-state"?: string;
                /**
                 * NPP Address
                 * @description NPP address and port for this TopoNode.
                 */
                "npp-details"?: string;
                /**
                 * NPP Pod
                 * @description NPP pod name
                 */
                "npp-pod"?: string;
                /**
                 * NPP
                 * @description The current state of the connection between ConfigEngine and NPP.
                 */
                "npp-state"?: string;
                /**
                 * Operating System
                 * @description Operational operating system running on this TopoNode, e.g. srl, sros.
                 */
                operatingSystem?: string;
                /**
                 * Platform
                 * @description Operational platform type of this TopoNode, e.g. 7220 IXR-D3L.
                 */
                platform?: string;
                /**
                 * Simulate
                 * @description Simulate using CX - if true CX is reponsible for generating the TargetNode resource.
                 */
                simulate?: boolean;
                /**
                 * Version
                 * @description Operational software version of this TopoNode, e.g. 24.7.1 (for srl), or 24.7.r1 (for sros).
                 */
                version?: string;
            };
        };
        /** @description TopoNodeList is a list of toponodes */
        "com.nokia.eda.core.v1.TopoNodeList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.TopoNode"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.TopoNode_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.TopoNode_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.TopoNode_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.TopoNode_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description UdpProxy is the Schema for the udpproxies API */
        "com.nokia.eda.core.v1.UdpProxy": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default UdpProxy */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.UdpProxy_metadata"];
            /**
             * Specification
             * @description UdpProxySpec defines the desired state of UdpProxy
             */
            spec: {
                /**
                 * Buffer Size
                 * @description The proxy will use a buffer of this size for all datagrams it receives and this must be sized
                 *     to accommodate the largest datagrams expected
                 */
                bufferSize: number;
                /**
                 * Destination Host
                 * @description The destination hostname or IP address to forward the datagrams to
                 */
                destHost: string;
                /**
                 * Destination Port
                 * @description The destination UDP port to forward the datagrams to
                 */
                destPort: number;
                /**
                 * Idle Timeout
                 * @description The proxy will listen for responses from the destination and forward it back to the source
                 *     of the datagram until there is no traffic at all for at least the idle timeout in seconds
                 */
                idleTimeout: number;
                /**
                 * Proxy Port
                 * @description The UDP port on which to listen for datagrams and then proxy to the destination
                 */
                proxyPort: number;
            };
            /**
             * Status
             * @description UdpProxyStatus defines the observed state of UdpProxy
             */
            readonly status?: Record<string, never>;
        };
        /** @description UdpProxyList is a list of udpproxies */
        "com.nokia.eda.core.v1.UdpProxyList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.UdpProxy"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.UdpProxy_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.UdpProxy_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.UdpProxy_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.UdpProxy_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
        /** @description WorkflowDefinition is the Schema for the workflowdefinitions API */
        "com.nokia.eda.core.v1.WorkflowDefinition": {
            /** @default core.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default WorkflowDefinition */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition_metadata"];
            /**
             * Specification
             * @description WorkflowDefinitionSpec defines the desired state of FlowDefinition
             */
            spec: {
                /** @description the resource type to be used for this flow, can only be set if Schema is not set */
                flowDefinitionResource?: {
                    /** Group */
                    group?: string;
                    /** Kind */
                    kind: string;
                    /** Version */
                    version: string;
                };
                /** @description the schema for the flow, can only be set if Resource is not set */
                flowDefinitionSchema?: {
                    /**
                     * JSON Schema (Spec)
                     * Format: json
                     * @description A string containing the JSON schema the workflow accepts as input.
                     */
                    jsonSchemaSpec?: string;
                    /**
                     * JSON Schema (Status)
                     * Format: json
                     * @description A string containing the JSON schema the workflow will populate as output.
                     */
                    jsonSchemaStatus?: string;
                };
                /**
                 * Image
                 * @description Container image containing the flow. For example "ghcr.io/nokia-eda/apps/operatingsystem:v1.0.0".
                 */
                image: string;
                /**
                 * Image Pull Secrets
                 * @description Secrets to use to pull the image for this workflow.
                 */
                imagePullSecrets?: string[];
            };
            /**
             * Status
             * @description WorkflowDefinitionStatus defines the observed state of FlowDefinition
             */
            readonly status?: Record<string, never>;
        };
        /** @description WorkflowDefinitionList is a list of workflowdefinitions */
        "com.nokia.eda.core.v1.WorkflowDefinitionList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition"][];
            kind: string;
        };
        "com.nokia.eda.core.v1.WorkflowDefinition_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.core.v1.WorkflowDefinition_DeletedResources": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition_DeletedResourceEntry"][];
        "com.nokia.eda.core.v1.WorkflowDefinition_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionCoreEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesCoreEdaNokiaComV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiCoreEdaNokiaComV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRoleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRole"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRole"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRoleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRole_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the ClusterRole to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRole"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRole"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRole"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the ClusterRole to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.ClusterRole"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1Clusterroles: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the ClusterRole to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Deviationactions: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationActionList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Deviations: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Edgeinterfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterfaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxy_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the HttpProxy to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the HttpProxy to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.HttpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1Httpproxies: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the HttpProxy to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Indexallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Ipallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Ipinsubnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Licenses: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.LicenseList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1Licenses: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the License to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.License"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1Licenses: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the License to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NamespaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.Namespace"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Namespace"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NamespaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Namespace_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationActionList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationAction"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationAction"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationActionList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationAction_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the DeviationAction to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationAction"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationAction"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationAction"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the DeviationAction to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationAction"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceDeviationactions: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the DeviationAction to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceDeviations: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.DeviationList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceDeviations: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Deviation to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Deviation"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceDeviations: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Deviation to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterfaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterfaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the EdgeInterface to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the EdgeInterface to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.EdgeInterface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceEdgeinterfaces: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the EdgeInterface to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the IndexAllocationPool to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the IndexAllocationPool to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IndexAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceIndexallocationpools: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the IndexAllocationPool to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the IPAllocationPool to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the IPAllocationPool to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceIpallocationpools: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the IPAllocationPool to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the IPInSubnetAllocationPool to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the IPInSubnetAllocationPool to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.IPInSubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceIpinsubnetallocationpools: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the IPInSubnetAllocationPool to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfileList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfile"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfile"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfileList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfile_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the NodeProfile to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfile"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfile"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfile"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the NodeProfile to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfile"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceNodeprofiles: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the NodeProfile to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUserList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUser"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUser"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUserList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUser_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the NodeUser to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUser"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUser"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUser"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the NodeUser to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUser"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceNodeusers: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the NodeUser to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.RoleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.Role"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Role"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.RoleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Role_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Role to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Role"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.Role"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Role"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Role to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Role"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceRoles: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Role to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the SubnetAllocationPool to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the SubnetAllocationPool to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPool"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceSubnetallocationpools: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the SubnetAllocationPool to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakoutList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakoutList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the TopoBreakout to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the TopoBreakout to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceTopobreakouts: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the TopoBreakout to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLinkList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLink"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLink"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLinkList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLink_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the TopoLink to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLink"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLink"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLink"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the TopoLink to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLink"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceTopolinks: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the TopoLink to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNodeList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNode"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNode"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNodeList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNode_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the TopoNode to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNode"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNode"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNode"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the TopoNode to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNode"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1NamespaceToponodes: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the TopoNode to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the Namespace to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Namespace"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.Namespace"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Namespace"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the Namespace to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.Namespace"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1Namespaces: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Namespace to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Nodeprofiles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeProfileList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Nodeusers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.NodeUserList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Roles: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.RoleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Subnetallocationpools: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.SubnetAllocationPoolList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Topobreakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoBreakoutList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Topolinks: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoLinkList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Toponodes: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.TopoNodeList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxy_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the UdpProxy to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the UdpProxy to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.UdpProxy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1Udpproxies: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the UdpProxy to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinitionList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinitionList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the WorkflowDefinition to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the WorkflowDefinition to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.core.v1.WorkflowDefinition"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryCoreEdaNokiaComV1Workflowdefinitions: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the WorkflowDefinition to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
