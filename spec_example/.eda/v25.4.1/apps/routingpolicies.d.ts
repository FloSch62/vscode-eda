/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/routingpolicies.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from routingpolicies.eda.nokia.com */
        get: operations["getVersionRoutingpoliciesEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from routingpolicies.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesRoutingpoliciesEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for routingpolicies.eda.nokia.com v1alpha1 */
        get: operations["uiRoutingpoliciesEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/communitysets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list communitysets */
        get: operations["listRoutingpoliciesEdaNokiaComV1alpha1Communitysets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/communitysets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list communitysets in namespace */
        get: operations["listRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        put?: never;
        /** @description create a CommunitySet */
        post: operations["createRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        /** Delete all instances of CommunitySet in the specified namespace. */
        delete: operations["deleteAllRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/communitysets/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of CommunitySet that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/communitysets/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified CommunitySet.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        /** @description replace a CommunitySet */
        put: operations["replaceRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        post?: never;
        /** @description delete the specified CommunitySet */
        delete: operations["deleteRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        options?: never;
        head?: never;
        /** @description patch a CommunitySet */
        patch: operations["patchRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/communitysets/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced CommunitySet. */
        get: operations["getHistoryRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/policys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list policys in namespace */
        get: operations["listRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        put?: never;
        /** @description create a Policy */
        post: operations["createRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        /** Delete all instances of Policy in the specified namespace. */
        delete: operations["deleteAllRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/policys/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Policy that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/policys/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Policy.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        /** @description replace a Policy */
        put: operations["replaceRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        post?: never;
        /** @description delete the specified Policy */
        delete: operations["deleteRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        options?: never;
        head?: never;
        /** @description patch a Policy */
        patch: operations["patchRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/policys/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Policy. */
        get: operations["getHistoryRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/prefixsets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list prefixsets in namespace */
        get: operations["listRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        put?: never;
        /** @description create a PrefixSet */
        post: operations["createRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        /** Delete all instances of PrefixSet in the specified namespace. */
        delete: operations["deleteAllRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/prefixsets/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of PrefixSet that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/prefixsets/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified PrefixSet.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        /** @description replace a PrefixSet */
        put: operations["replaceRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        post?: never;
        /** @description delete the specified PrefixSet */
        delete: operations["deleteRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        options?: never;
        head?: never;
        /** @description patch a PrefixSet */
        patch: operations["patchRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/namespaces/{namespace}/prefixsets/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced PrefixSet. */
        get: operations["getHistoryRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/policys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list policys */
        get: operations["listRoutingpoliciesEdaNokiaComV1alpha1Policys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/routingpolicies.eda.nokia.com/v1alpha1/prefixsets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list prefixsets */
        get: operations["listRoutingpoliciesEdaNokiaComV1alpha1Prefixsets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description CommunitySet is the Schema for the communitysets API */
        "com.nokia.eda.routingpolicies.v1alpha1.CommunitySet": {
            /** @default routingpolicies.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default CommunitySet */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet_metadata"];
            /**
             * Specification
             * @description CommunitySetSpec defines the desired state of CommunitySet
             */
            spec: {
                /**
                 * Expression Match
                 * @description Options that determine the matching criteria that applies to the list of community members.
                 */
                expressionMatch?: string;
                /**
                 * Community Set Members
                 * @description A standard BGP community value, regular expression or well-known name or else a large BGP community value or regular expression.
                 */
                members?: string[];
            };
            /**
             * Status
             * @description CommunitySetStatus defines the observed state of CommunitySet
             */
            readonly status?: Record<string, never>;
        };
        /** @description CommunitySetList is a list of communitysets */
        "com.nokia.eda.routingpolicies.v1alpha1.CommunitySetList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet"][];
            kind: string;
        };
        "com.nokia.eda.routingpolicies.v1alpha1.CommunitySet_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.routingpolicies.v1alpha1.CommunitySet_DeletedResources": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet_DeletedResourceEntry"][];
        "com.nokia.eda.routingpolicies.v1alpha1.CommunitySet_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Policy is the Schema for the policys API */
        "com.nokia.eda.routingpolicies.v1alpha1.Policy": {
            /** @default routingpolicies.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Policy */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy_metadata"];
            /**
             * Specification
             * @description Policy defines a set of rules and actions to manage network traffic or routing behavior, with statements that include matching conditions and actions, such as accepting or rejecting routes, or modifying route attributes like BGP parameters.
             */
            spec: {
                /**
                 * Default Action
                 * @description The default action to apply if no other actions are defined.
                 */
                defaultAction?: {
                    /**
                     * BGP
                     * @description Actions related to the BGP protocol.
                     */
                    bgp?: {
                        /**
                         * AS Path Prepend
                         * Format: int32
                         * @description AS number to prepend to the AS Path attributes.
                         */
                        asPathPrepend?: number;
                        /**
                         * AS Path Remove
                         * @description Clear the AS path to make it empty.
                         */
                        asPathRemove?: boolean;
                        /**
                         * AS Path Replace
                         * @description Replace the existing AS path with a new AS_SEQUENCE containing the listed AS numbers.
                         */
                        asPathReplace?: number[];
                        /**
                         * Set Local Preference
                         * Format: int32
                         * @description Set a new LOCAL_PREF value for matching BGP routes.
                         */
                        localPreference?: number;
                        /**
                         * Set Origin
                         * @description Set a new ORIGIN attribute for matching BGP routes.
                         * @enum {string}
                         */
                        setOrigin?: "egp" | "igp" | "incomplete";
                    };
                    /**
                     * Policy Result
                     * @description Final disposition for the route.
                     * @enum {string}
                     */
                    policyResult?: "accept" | "reject";
                };
                /**
                 * Statements
                 * @description List of policy statements.
                 */
                statement?: {
                    /**
                     * Action
                     * @description Actions for routes that match the policy statement.
                     */
                    action?: {
                        /**
                         * BGP
                         * @description Actions related to the BGP protocol.
                         */
                        bgp?: {
                            /**
                             * AS Path Prepend
                             * Format: int32
                             * @description AS number to prepend to the AS Path attributes.
                             */
                            asPathPrepend?: number;
                            /**
                             * AS Path Remove
                             * @description Clear the AS path to make it empty.
                             */
                            asPathRemove?: boolean;
                            /**
                             * AS Path Replace
                             * @description Replace the existing AS path with a new AS_SEQUENCE containing the listed AS numbers.
                             */
                            asPathReplace?: number[];
                            /**
                             * Set Local Preference
                             * Format: int32
                             * @description Set a new LOCAL_PREF value for matching BGP routes.
                             */
                            localPreference?: number;
                            /**
                             * Set Origin
                             * @description Set a new ORIGIN attribute for matching BGP routes.
                             * @enum {string}
                             */
                            setOrigin?: "egp" | "igp" | "incomplete";
                        };
                        /**
                         * Policy Result
                         * @description Final disposition for the route.
                         * @enum {string}
                         */
                        policyResult?: "accept" | "reject";
                    };
                    /**
                     * Match
                     * @description Match conditions of the policy statement.
                     */
                    match?: {
                        /**
                         * BGP
                         * @description Configuration for BGP-specific policy match criteria.
                         */
                        bgp?: {
                            /**
                             * BGP Community
                             * @description Match conditions for BGP communities.
                             */
                            communitySet?: string;
                            /**
                             * EVPN Route Type
                             * @description Match conditions for EVPN route types.
                             */
                            evpnRouteType?: number[];
                        };
                        /**
                         * Family
                         * @description Address families that the route belongs to.
                         */
                        family?: string[];
                        /**
                         * Prefix Set
                         * @description Reference to a PrefixSet resource.
                         */
                        prefixSet?: string;
                        /**
                         * Protocol
                         * @description The route protocol type to match.
                         * @enum {string}
                         */
                        protocol?: "AGGREGATE" | "ARP_ND" | "BGP" | "BGP_EVPN" | "DHCP" | "GRIBI" | "HOST" | "ISIS" | "LOCAL" | "LINUX" | "NDK1" | "NDK2" | "OSPFV2" | "OSPFV3" | "STATIC";
                    };
                    /**
                     * Name
                     * @description Name of the policy statement.
                     */
                    name: string;
                }[];
            };
            /**
             * Status
             * @description PolicyStatus defines the observed state of Policy.
             */
            readonly status?: Record<string, never>;
        };
        /** @description PolicyList is a list of policys */
        "com.nokia.eda.routingpolicies.v1alpha1.PolicyList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy"][];
            kind: string;
        };
        "com.nokia.eda.routingpolicies.v1alpha1.Policy_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.routingpolicies.v1alpha1.Policy_DeletedResources": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy_DeletedResourceEntry"][];
        "com.nokia.eda.routingpolicies.v1alpha1.Policy_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description PrefixSet is the Schema for the prefixsets API */
        "com.nokia.eda.routingpolicies.v1alpha1.PrefixSet": {
            /** @default routingpolicies.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default PrefixSet */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet_metadata"];
            /**
             * Specification
             * @description PrefixSet defines a collection of IP prefixes, which may include specific CIDR blocks or a range of prefixes. This set is typically used for matching routes or implementing routing policies.
             */
            spec: {
                /**
                 * Prefixes
                 * @description List of IPv4 or IPv6 prefixes in CIDR notation.
                 */
                prefix: {
                    /**
                     * End Range
                     * @description The end range when using a range to match prefixes.
                     */
                    endRange?: number;
                    /**
                     * Exact
                     * @description Indicates if it is an exact match. Ignores the StartRange and EndRange if this param is set.
                     */
                    exact?: boolean;
                    /**
                     * Prefix
                     * Format: ip
                     * @description The IPv4 or IPv6 prefix in CIDR notation with mask.
                     */
                    prefix: string;
                    /**
                     * Start Range
                     * @description If specifying a range, this is the start of the range.
                     */
                    startRange?: number;
                }[];
            };
            /**
             * Status
             * @description PrefixSetStatus defines the observed state of PrefixSet.
             */
            readonly status?: Record<string, never>;
        };
        /** @description PrefixSetList is a list of prefixsets */
        "com.nokia.eda.routingpolicies.v1alpha1.PrefixSetList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet"][];
            kind: string;
        };
        "com.nokia.eda.routingpolicies.v1alpha1.PrefixSet_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.routingpolicies.v1alpha1.PrefixSet_DeletedResources": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet_DeletedResourceEntry"][];
        "com.nokia.eda.routingpolicies.v1alpha1.PrefixSet_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionRoutingpoliciesEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesRoutingpoliciesEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiRoutingpoliciesEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listRoutingpoliciesEdaNokiaComV1alpha1Communitysets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySetList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySetList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySetList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the CommunitySet to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the CommunitySet to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.CommunitySet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryRoutingpoliciesEdaNokiaComV1alpha1NamespaceCommunitysets: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the CommunitySet to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Policy to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Policy to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.Policy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryRoutingpoliciesEdaNokiaComV1alpha1NamespacePolicys: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Policy to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSetList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSetList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the PrefixSet to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the PrefixSet to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSet"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryRoutingpoliciesEdaNokiaComV1alpha1NamespacePrefixsets: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the PrefixSet to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listRoutingpoliciesEdaNokiaComV1alpha1Policys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listRoutingpoliciesEdaNokiaComV1alpha1Prefixsets: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.routingpolicies.v1alpha1.PrefixSetList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
