/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/timing.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from timing.eda.nokia.com */
        get: operations["getVersionTimingEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/timing.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from timing.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesTimingEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/timing.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for timing.eda.nokia.com v1alpha1 */
        get: operations["uiTimingEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/timing.eda.nokia.com/v1alpha1/namespaces/{namespace}/ntpclients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ntpclients in namespace */
        get: operations["listTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        put?: never;
        /** @description create a NTPClient */
        post: operations["createTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        /** Delete all instances of NTPClient in the specified namespace. */
        delete: operations["deleteAllTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/timing.eda.nokia.com/v1alpha1/namespaces/{namespace}/ntpclients/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of NTPClient that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/timing.eda.nokia.com/v1alpha1/namespaces/{namespace}/ntpclients/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified NTPClient.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        /** @description replace a NTPClient */
        put: operations["replaceTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        post?: never;
        /** @description delete the specified NTPClient */
        delete: operations["deleteTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        options?: never;
        head?: never;
        /** @description patch a NTPClient */
        patch: operations["patchTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        trace?: never;
    };
    "/apps/timing.eda.nokia.com/v1alpha1/namespaces/{namespace}/ntpclients/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced NTPClient. */
        get: operations["getHistoryTimingEdaNokiaComV1alpha1NamespaceNtpclients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/timing.eda.nokia.com/v1alpha1/ntpclients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ntpclients */
        get: operations["listTimingEdaNokiaComV1alpha1Ntpclients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description NTPClient is the Schema for the ntpclients API */
        "com.nokia.eda.timing.v1alpha1.NTPClient": {
            /** @default timing.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default NTPClient */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient_metadata"];
            /**
             * Specification
             * @description The NTP client allows for configuring NTP servers and the source of NTP traffic in order for the devices to synchronize their clocks.
             */
            spec: {
                /**
                 * Router
                 * @description Router used to reach the NTP servers.
                 */
                router?: string;
                /**
                 * Router Kind
                 * @description the Kind of the router used to reach the NTP servers.
                 * @enum {string}
                 */
                routerKind: "MANAGEMENTROUTER" | "ROUTER" | "DEFAULTROUTER";
                /**
                 * Router Selector
                 * Format: labelselector
                 * @description Selects router resources based on the defined KIND.  Applies to DefaultRouter only. Not supported for Router and ManagementRouter.
                 */
                routerSelector?: string[];
                /**
                 * Servers
                 * @description A list of NTP servers, each entry in the list can either be an IP address or an FQDN.
                 */
                servers: {
                    /**
                     * Enable iBurst
                     * @description Indicates whether this server should enable burst synchronization or not
                     */
                    iBurst?: boolean;
                    /**
                     * Preferred Server
                     * @description Indicates whether this server should be preferred or not
                     */
                    preferred?: boolean;
                    /**
                     * Server
                     * @description An NTP server can either be an IP address or an FQDN
                     */
                    server: string;
                }[];
                /**
                 * Source Interface
                 * @description Specifies a Interface resource to use as a source of NTP traffic. If none is specified the Node default behavior is used.
                 */
                sourceInterface?: string;
                /**
                 * Source Interface Kind
                 * @description Specifies the source interface Kind to use as a source of NTP traffic.
                 * @enum {string}
                 */
                sourceInterfaceKind?: "IRB" | "ROUTED" | "DEFAULT" | "SYSTEM";
            };
            /**
             * Status
             * @description NTPClientStatus defines the observed state of NTPClient
             */
            readonly status?: {
                /**
                 * Health Score
                 * @description Indicates the health score of the NTPClient
                 */
                health?: number;
                /**
                 * Health Score Reason
                 * @description Indicates the reason for the health score
                 */
                healthScoreReason?: string;
                /**
                 * Last Change
                 * Format: date
                 * @description The time when the state of the resource last changed
                 */
                lastChange?: string;
                /**
                 * Unsynchronized Nodes
                 * @description List of nodes which are not synchronized
                 */
                nodes?: {
                    /**
                     * Node
                     * @description Reference to Node object
                     */
                    node: string;
                    /**
                     * Operating System
                     * @description Operating System of the Node
                     */
                    operatingSystem: string;
                    /**
                     * Synchronized
                     * @description Synchronized state of the Node
                     */
                    synchronized?: string;
                }[];
                /**
                 * Operational State
                 * @description Operational state of the NTPClient
                 */
                operationalState?: string;
            };
        };
        /** @description NTPClientList is a list of ntpclients */
        "com.nokia.eda.timing.v1alpha1.NTPClientList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient"][];
            kind: string;
        };
        "com.nokia.eda.timing.v1alpha1.NTPClient_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.timing.v1alpha1.NTPClient_DeletedResources": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient_DeletedResourceEntry"][];
        "com.nokia.eda.timing.v1alpha1.NTPClient_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionTimingEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesTimingEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiTimingEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClientList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClientList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the NTPClient to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the NTPClient to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClient"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryTimingEdaNokiaComV1alpha1NamespaceNtpclients: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the NTPClient to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listTimingEdaNokiaComV1alpha1Ntpclients: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.timing.v1alpha1.NTPClientList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
