/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/filters.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from filters.eda.nokia.com */
        get: operations["getVersionFiltersEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from filters.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesFiltersEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for filters.eda.nokia.com v1alpha1 */
        get: operations["uiFiltersEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/controlplanefilters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list controlplanefilters */
        get: operations["listFiltersEdaNokiaComV1alpha1Controlplanefilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list filters */
        get: operations["listFiltersEdaNokiaComV1alpha1Filters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/controlplanefilters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list controlplanefilters in namespace */
        get: operations["listFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        put?: never;
        /** @description create a ControlPlaneFilter */
        post: operations["createFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        /** Delete all instances of ControlPlaneFilter in the specified namespace. */
        delete: operations["deleteAllFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/controlplanefilters/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of ControlPlaneFilter that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/controlplanefilters/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified ControlPlaneFilter.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        /** @description replace a ControlPlaneFilter */
        put: operations["replaceFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        post?: never;
        /** @description delete the specified ControlPlaneFilter */
        delete: operations["deleteFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        options?: never;
        head?: never;
        /** @description patch a ControlPlaneFilter */
        patch: operations["patchFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/controlplanefilters/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced ControlPlaneFilter. */
        get: operations["getHistoryFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list filters in namespace */
        get: operations["listFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        put?: never;
        /** @description create a Filter */
        post: operations["createFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        /** Delete all instances of Filter in the specified namespace. */
        delete: operations["deleteAllFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/filters/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Filter that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/filters/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Filter.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        /** @description replace a Filter */
        put: operations["replaceFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        post?: never;
        /** @description delete the specified Filter */
        delete: operations["deleteFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        options?: never;
        head?: never;
        /** @description patch a Filter */
        patch: operations["patchFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        trace?: never;
    };
    "/apps/filters.eda.nokia.com/v1alpha1/namespaces/{namespace}/filters/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Filter. */
        get: operations["getHistoryFiltersEdaNokiaComV1alpha1NamespaceFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description ControlPlaneFilter is the Schema for the controlplanefilters API */
        "com.nokia.eda.filters.v1alpha1.ControlPlaneFilter": {
            /** @default filters.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default ControlPlaneFilter */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter_metadata"];
            /**
             * Specification
             * @description ControlPlaneFilter allows for specifying a list of Nodes or Node selectors where the filter should be applied and managing filter entries in order.
             */
            spec: {
                /**
                 * Entries
                 * @description Specifies the list of filter entries, in order.
                 */
                entries: {
                    /** IP Entry */
                    ipEntry?: {
                        /**
                         * Action
                         * @description An action to take, either 'Accept','Drop', or 'RateLimit'.
                         * @enum {string}
                         */
                        action?: "Drop" | "Accept" | "RateLimit";
                        /**
                         * Destination Port Name
                         * @description Destination port to match by name.
                         * @enum {string}
                         */
                        destinationPortName?: "ACAP" | "AFP-TCP" | "ARNS" | "ASF-RMCP" | "ASHARE" | "ATALK-RM" | "AURP" | "AUTH" | "BFD" | "BFD-ECHO" | "BFTP" | "BGMP" | "BGP" | "BOOTPC" | "BOOTPS" | "CCSO-NS" | "CHARGEN" | "CISCO-TDP" | "CITADEL" | "CLEARCASE" | "COMMERCE" | "COURIER" | "DAYTIME" | "DHCP-FAILOVER" | "DHCPV6-CLIENT" | "DHCPV6-SERVER" | "DICOM" | "DISCARD" | "DNSIX" | "DOMAIN" | "DSP" | "ECHO" | "EPP" | "ESRO" | "EXEC" | "FINGER" | "FTP" | "FTP-DATA" | "FTPS" | "FTPS-DATA" | "GODI" | "GOPHER" | "GTP-C" | "GTP-PRIME" | "GTP-U" | "HA-CLUSTER" | "HOSTNAME" | "HP-ALARM-MGR" | "HTTP" | "HTTP-ALT" | "HTTP-MGMT" | "HTTP-RPC" | "HTTPS" | "IEEE-MMS-SSL" | "IMAP" | "IMAP3" | "IMAPS" | "IPP" | "IPSEC" | "IPX" | "IRC" | "IRIS-BEEP" | "ISAKMP" | "ISAKMP-NAT" | "ISCSI" | "ISO-TSAP" | "KERBEROS" | "KERBEROS-ADM" | "KLOGIN" | "KPASSWD" | "KSHELL" | "L2TP" | "LDAP" | "LDAPS" | "LDP" | "LMP" | "LOGIN" | "LPD" | "LSP-PING" | "MAC-SERVER-ADM" | "MATIP-A" | "MATIP-B" | "MICRO-BFD" | "MICROSOFT-DS" | "MOBILE-IP" | "MONITOR" | "MPP" | "MS-EXCHANGE" | "MSDP" | "MSP" | "MSSQL-M" | "MSSQL-S" | "MULTIHOP-BFD" | "NAS" | "NCP" | "NETBIOS-DATA" | "NETBIOS-NS" | "NETBIOS-SS" | "NETNEWS" | "NETRJS-1" | "NETRJS-2" | "NETRJS-3" | "NETRJS-4" | "NETWALL" | "NEW-RWHO" | "NFS" | "NNTP" | "NNTPS" | "NTP" | "ODMR" | "OLSR" | "OPENVPN" | "PIM-AUTO-RP" | "PKIX-TIMESTAMP" | "POP2" | "POP3" | "POP3S" | "PPTP" | "PRINT-SRV" | "PTP-EVENT" | "PTP-GENERAL" | "QMTP" | "QOTD" | "RADIUS" | "RADIUS-ACCT" | "REMOTE-MAIL" | "REMOTEFS" | "REMOTECMD" | "RIP" | "RJE" | "RLP" | "RLZDB" | "RMC" | "RMONITOR" | "RPC2PORTMAP" | "RSYNC" | "RTELNET" | "RTSP" | "SGMP" | "SILC" | "SMUX" | "SNA-GW" | "SNMP" | "SNMP-TRAP" | "SNPP" | "SMTP" | "SQL-SVCS" | "SQL" | "SSH" | "SUBMISSION" | "SUNRPC" | "SVCLOC" | "SYSLOG" | "SYSTAT" | "TACACS" | "TALK" | "TCPMUX" | "TCPNETHASPSRV" | "TFTP" | "TIME" | "TIMED" | "UPS" | "XDMCP" | "XNS-CH" | "XNS-MAIL" | "XNS-TIME" | "Z3950";
                        /**
                         * Destination Port Number
                         * @description Destination port to match by numerical value.
                         */
                        destinationPortNumber?: number;
                        /**
                         * Destination Port Operator
                         * @description Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.
                         * @enum {string}
                         */
                        destinationPortOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                        /**
                         * Destination Port Range
                         * @description Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.
                         */
                        destinationPortRange?: string;
                        /**
                         * Destination Prefix
                         * Format: ip
                         * @description Destination prefix to match.
                         */
                        destinationPrefix?: string;
                        /**
                         * First Fragment
                         * @description Match the first fragment only.
                         */
                        firstFragment?: boolean;
                        /**
                         * Fragment
                         * @description Match any fragment.
                         */
                        fragment?: boolean;
                        /**
                         * ICMP Code
                         * @description Match a specific ICMP code, as a number between 0-255, e.g. 0.
                         */
                        icmpCode?: number[];
                        /**
                         * ICMP Type Name
                         * @description Match a specific ICMP type by name, e.g. dest-unreachable.
                         * @enum {string}
                         */
                        icmpTypeName?: "DestUnreachable" | "Echo" | "EchoReply" | "EchoRequest" | "McastRtrAdv" | "McastRtrSolicit" | "McastRtrTerm" | "MldDone" | "MldQuery" | "MldReport" | "MldV2" | "NeighborAdvertise" | "NeighborSolicit" | "NodeInfoQuery" | "NodeInfoResponse" | "PacketTooBig" | "ParamProblem" | "Redirect" | "RouterAdvertise" | "RouterRenumber" | "RouterSolicit" | "SourceQuench" | "TimeExceeded" | "Timestamp" | "TimestampReply";
                        /**
                         * ICMP Type Number
                         * @description Match a specific ICMP type by number.
                         */
                        icmpTypeNumber?: number;
                        /**
                         * Protocol Name
                         * @description Match a specific IP protocol name (specified in the type field of the IP header).
                         * @enum {string}
                         */
                        protocolName?: "AH" | "EGP" | "EIGRP" | "ESP" | "GGP" | "GRE" | "ICMP" | "ICMP6" | "IDRP" | "IGMP" | "IGP" | "IPV4" | "IPV6" | "IPV6-DEST-OPTS" | "IPV6-HOP" | "L2TP" | "MPLS-IN-IP" | "NO-NEXT-HDR" | "OSPF" | "PIM" | "ROHC" | "RSVP" | "SCTP" | "ST" | "TCP" | "UDP" | "VRRP";
                        /**
                         * Protocol Number
                         * @description Match a specific IP protocol number (specified in the type field of the IP header).
                         */
                        protocolNumber?: number;
                        /**
                         * Rate Limit
                         * @description Rate limit to apply when the action is 'RateLimit'.
                         */
                        rateLimit?: {
                            /**
                             * Burst Size
                             * Format: int32
                             * @description The maximum burst size in bytes.
                             */
                            burstSize?: number;
                            /**
                             * Entry Specific Policer
                             * @description Controls policer instantiation: false for shared instance, true for per-entry instances
                             * @default false
                             */
                            entrySpecificPolicer: boolean;
                            /**
                             * Peak Rate
                             * Format: int32
                             * @description The peak rate in kilobytes per second.
                             */
                            peakRate?: number;
                            /**
                             * Scope
                             * @description Determines how the policer is applied across subinterfaces. Global applies the policer across all subinterfaces, while Subinterface applies it individually to each subinterface.
                             * @default Global
                             * @enum {string}
                             */
                            scope: "Global" | "Subinterface";
                        };
                        /**
                         * Source Port Name
                         * @description Source port to match by name.
                         * @enum {string}
                         */
                        sourcePortName?: "ACAP" | "AFP-TCP" | "ARNS" | "ASF-RMCP" | "ASHARE" | "ATALK-RM" | "AURP" | "AUTH" | "BFD" | "BFD-ECHO" | "BFTP" | "BGMP" | "BGP" | "BOOTPC" | "BOOTPS" | "CCSO-NS" | "CHARGEN" | "CISCO-TDP" | "CITADEL" | "CLEARCASE" | "COMMERCE" | "COURIER" | "DAYTIME" | "DHCP-FAILOVER" | "DHCPV6-CLIENT" | "DHCPV6-SERVER" | "DICOM" | "DISCARD" | "DNSIX" | "DOMAIN" | "DSP" | "ECHO" | "EPP" | "ESRO" | "EXEC" | "FINGER" | "FTP" | "FTP-DATA" | "FTPS" | "FTPS-DATA" | "GODI" | "GOPHER" | "GTP-C" | "GTP-PRIME" | "GTP-U" | "HA-CLUSTER" | "HOSTNAME" | "HP-ALARM-MGR" | "HTTP" | "HTTP-ALT" | "HTTP-MGMT" | "HTTP-RPC" | "HTTPS" | "IEEE-MMS-SSL" | "IMAP" | "IMAP3" | "IMAPS" | "IPP" | "IPSEC" | "IPX" | "IRC" | "IRIS-BEEP" | "ISAKMP" | "ISAKMP-NAT" | "ISCSI" | "ISO-TSAP" | "KERBEROS" | "KERBEROS-ADM" | "KLOGIN" | "KPASSWD" | "KSHELL" | "L2TP" | "LDAP" | "LDAPS" | "LDP" | "LMP" | "LOGIN" | "LPD" | "LSP-PING" | "MAC-SERVER-ADM" | "MATIP-A" | "MATIP-B" | "MICRO-BFD" | "MICROSOFT-DS" | "MOBILE-IP" | "MONITOR" | "MPP" | "MS-EXCHANGE" | "MSDP" | "MSP" | "MSSQL-M" | "MSSQL-S" | "MULTIHOP-BFD" | "NAS" | "NCP" | "NETBIOS-DATA" | "NETBIOS-NS" | "NETBIOS-SS" | "NETNEWS" | "NETRJS-1" | "NETRJS-2" | "NETRJS-3" | "NETRJS-4" | "NETWALL" | "NEW-RWHO" | "NFS" | "NNTP" | "NNTPS" | "NTP" | "ODMR" | "OLSR" | "OPENVPN" | "PIM-AUTO-RP" | "PKIX-TIMESTAMP" | "POP2" | "POP3" | "POP3S" | "PPTP" | "PRINT-SRV" | "PTP-EVENT" | "PTP-GENERAL" | "QMTP" | "QOTD" | "RADIUS" | "RADIUS-ACCT" | "REMOTE-MAIL" | "REMOTEFS" | "REMOTECMD" | "RIP" | "RJE" | "RLP" | "RLZDB" | "RMC" | "RMONITOR" | "RPC2PORTMAP" | "RSYNC" | "RTELNET" | "RTSP" | "SGMP" | "SILC" | "SMUX" | "SNA-GW" | "SNMP" | "SNMP-TRAP" | "SNPP" | "SMTP" | "SQL-SVCS" | "SQL" | "SSH" | "SUBMISSION" | "SUNRPC" | "SVCLOC" | "SYSLOG" | "SYSTAT" | "TACACS" | "TALK" | "TCPMUX" | "TCPNETHASPSRV" | "TFTP" | "TIME" | "TIMED" | "UPS" | "XDMCP" | "XNS-CH" | "XNS-MAIL" | "XNS-TIME" | "Z3950";
                        /**
                         * Source Port Number
                         * @description Source port to match by numerical value.
                         */
                        sourcePortNumber?: number;
                        /**
                         * Source Port Operator
                         * @description Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.
                         * @enum {string}
                         */
                        sourcePortOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                        /**
                         * Source Port Range
                         * @description Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.
                         */
                        sourcePortRange?: string;
                        /**
                         * Source Prefix
                         * Format: ip
                         * @description Source prefix to match.
                         */
                        sourcePrefix?: string;
                        /**
                         * TCP Flags
                         * @description Match TCP flags, usable with !, &, | and the flags RST, SYN, and ACK.
                         */
                        tcpFlags?: string;
                    };
                    /** MAC Entry */
                    macEntry?: {
                        /**
                         * Action
                         * @description An action to take, either 'Accept','Drop', or 'RateLimit'.
                         * @enum {string}
                         */
                        action?: "Drop" | "Accept" | "RateLimit";
                        /**
                         * Destination MAC
                         * Format: macAddr
                         * @description Match an Ethernet frame if its destination MAC address logically anded with the mask equals this MAC address.
                         */
                        destinationMAC?: string;
                        /**
                         * Destination MAC Mask
                         * @description Match an Ethernet frame if its destination MAC address logically anded with the mask equals the configured MAC address.
                         */
                        destinationMACMask?: string;
                        /**
                         * Ethertype
                         * @description An Ethernet frame matches this condition if its ethertype value (after 802.1Q VLAN tags) matches the specified value.
                         * @enum {string}
                         */
                        ethertype?: "ARP" | "AUTHENTICATION8021X" | "ETHOAM" | "FCOE" | "FCOEINITIALIZATION" | "FLOWCONTROL" | "IPV4" | "IPV6" | "LACP" | "LLDP" | "MACSEC" | "MPLSMULTICAST" | "MPLSUNICAST" | "PBB" | "PPPOEDISCOVERY" | "PPPOESESSION" | "PTP" | "ROCE";
                        /**
                         * Outer VLAN ID Operator
                         * @description Operator to use when matching OuterVlanIdValue, either Equals, GreaterOrEquals, or LessOrEquals.
                         * @enum {string}
                         */
                        outerVLANIDOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                        /**
                         * Outer VLAN ID Range
                         * @description Range of Outer vlan IDs to match, in the format n-m, e.g. 100-200
                         */
                        outerVLANIDRange?: string;
                        /**
                         * Outer VLAN ID Value
                         * @description Ethernet frame matching criteria based on the outermost VLAN ID found before the subinterface-defining VLAN tag (if any) is removed. A value of 'none' will match only untagged frames.
                         */
                        outerVLANIDValue?: string;
                        /**
                         * Rate Limit
                         * @description Rate limit to apply when the action is 'RateLimit'.
                         */
                        rateLimit?: {
                            /**
                             * Burst Size
                             * Format: int32
                             * @description The maximum burst size in bytes.
                             */
                            burstSize?: number;
                            /**
                             * Entry Specific Policer
                             * @description Controls policer instantiation: false for shared instance, true for per-entry instances
                             * @default false
                             */
                            entrySpecificPolicer: boolean;
                            /**
                             * Peak Rate
                             * Format: int32
                             * @description The peak rate in kilobytes per second.
                             */
                            peakRate?: number;
                            /**
                             * Scope
                             * @description Determines how the policer is applied across subinterfaces. Global applies the policer across all subinterfaces, while Subinterface applies it individually to each subinterface.
                             * @default Global
                             * @enum {string}
                             */
                            scope: "Global" | "Subinterface";
                        };
                        /**
                         * Source MAC
                         * Format: macAddr
                         * @description Match an Ethernet frame if its source MAC address logically anded with the mask equals this MAC address.
                         */
                        sourceMAC?: string;
                        /**
                         * Source MAC Mask
                         * @description Match an Ethernet frame if its source MAC address logically anded with the mask equals the configured MAC address.
                         */
                        sourceMACMask?: string;
                    };
                    /**
                     * Type
                     * @default Auto
                     * @enum {string}
                     */
                    type: "IPV4" | "IPV6" | "MAC" | "Auto";
                }[];
                /**
                 * Node Selector
                 * Format: labelselector
                 * @description Label selector used to select Toponodes on which to deploy the CPM filter.
                 */
                nodeSelector?: string[];
                /**
                 * Nodes
                 * @description Reference to a list of TopoNodes on which to deploy the CPM filter.
                 */
                nodes?: string[];
            };
            /**
             * Status
             * @description ControlPlaneFilterStatus defines the observed state of ControlPlaneFilter
             */
            readonly status?: Record<string, never>;
        };
        /** @description ControlPlaneFilterList is a list of controlplanefilters */
        "com.nokia.eda.filters.v1alpha1.ControlPlaneFilterList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter"][];
            kind: string;
        };
        "com.nokia.eda.filters.v1alpha1.ControlPlaneFilter_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.filters.v1alpha1.ControlPlaneFilter_DeletedResources": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter_DeletedResourceEntry"][];
        "com.nokia.eda.filters.v1alpha1.ControlPlaneFilter_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Filter is the Schema for the filters API */
        "com.nokia.eda.filters.v1alpha1.Filter": {
            /** @default filters.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Filter */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter_metadata"];
            /**
             * Specification
             * @description Filter allows for the creation and management of ordered filtering rules based on IP or MAC criteria. The resource supports various conditions and actions, enabling fine-grained control over network traffic by specifying rules for source and destination addresses, ports, and protocols.
             */
            spec: {
                /**
                 * Entries
                 * @description Specifies the list of filter entries, in order.
                 */
                entries: {
                    /** IP Entry */
                    ipEntry?: {
                        /**
                         * Action
                         * @description An action to take, either 'Accept','Drop', or 'RateLimit'.
                         * @enum {string}
                         */
                        action?: "Drop" | "Accept" | "RateLimit";
                        /**
                         * Destination Port Name
                         * @description Destination port to match by name.
                         * @enum {string}
                         */
                        destinationPortName?: "ACAP" | "AFP-TCP" | "ARNS" | "ASF-RMCP" | "ASHARE" | "ATALK-RM" | "AURP" | "AUTH" | "BFD" | "BFD-ECHO" | "BFTP" | "BGMP" | "BGP" | "BOOTPC" | "BOOTPS" | "CCSO-NS" | "CHARGEN" | "CISCO-TDP" | "CITADEL" | "CLEARCASE" | "COMMERCE" | "COURIER" | "DAYTIME" | "DHCP-FAILOVER" | "DHCPV6-CLIENT" | "DHCPV6-SERVER" | "DICOM" | "DISCARD" | "DNSIX" | "DOMAIN" | "DSP" | "ECHO" | "EPP" | "ESRO" | "EXEC" | "FINGER" | "FTP" | "FTP-DATA" | "FTPS" | "FTPS-DATA" | "GODI" | "GOPHER" | "GTP-C" | "GTP-PRIME" | "GTP-U" | "HA-CLUSTER" | "HOSTNAME" | "HP-ALARM-MGR" | "HTTP" | "HTTP-ALT" | "HTTP-MGMT" | "HTTP-RPC" | "HTTPS" | "IEEE-MMS-SSL" | "IMAP" | "IMAP3" | "IMAPS" | "IPP" | "IPSEC" | "IPX" | "IRC" | "IRIS-BEEP" | "ISAKMP" | "ISAKMP-NAT" | "ISCSI" | "ISO-TSAP" | "KERBEROS" | "KERBEROS-ADM" | "KLOGIN" | "KPASSWD" | "KSHELL" | "L2TP" | "LDAP" | "LDAPS" | "LDP" | "LMP" | "LOGIN" | "LPD" | "LSP-PING" | "MAC-SERVER-ADM" | "MATIP-A" | "MATIP-B" | "MICRO-BFD" | "MICROSOFT-DS" | "MOBILE-IP" | "MONITOR" | "MPP" | "MS-EXCHANGE" | "MSDP" | "MSP" | "MSSQL-M" | "MSSQL-S" | "MULTIHOP-BFD" | "NAS" | "NCP" | "NETBIOS-DATA" | "NETBIOS-NS" | "NETBIOS-SS" | "NETNEWS" | "NETRJS-1" | "NETRJS-2" | "NETRJS-3" | "NETRJS-4" | "NETWALL" | "NEW-RWHO" | "NFS" | "NNTP" | "NNTPS" | "NTP" | "ODMR" | "OLSR" | "OPENVPN" | "PIM-AUTO-RP" | "PKIX-TIMESTAMP" | "POP2" | "POP3" | "POP3S" | "PPTP" | "PRINT-SRV" | "PTP-EVENT" | "PTP-GENERAL" | "QMTP" | "QOTD" | "RADIUS" | "RADIUS-ACCT" | "REMOTE-MAIL" | "REMOTEFS" | "REMOTECMD" | "RIP" | "RJE" | "RLP" | "RLZDB" | "RMC" | "RMONITOR" | "RPC2PORTMAP" | "RSYNC" | "RTELNET" | "RTSP" | "SGMP" | "SILC" | "SMUX" | "SNA-GW" | "SNMP" | "SNMP-TRAP" | "SNPP" | "SMTP" | "SQL-SVCS" | "SQL" | "SSH" | "SUBMISSION" | "SUNRPC" | "SVCLOC" | "SYSLOG" | "SYSTAT" | "TACACS" | "TALK" | "TCPMUX" | "TCPNETHASPSRV" | "TFTP" | "TIME" | "TIMED" | "UPS" | "XDMCP" | "XNS-CH" | "XNS-MAIL" | "XNS-TIME" | "Z3950";
                        /**
                         * Destination Port Number
                         * @description Destination port to match by numerical value.
                         */
                        destinationPortNumber?: number;
                        /**
                         * Destination Port Operator
                         * @description Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.
                         * @enum {string}
                         */
                        destinationPortOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                        /**
                         * Destination Port Range
                         * @description Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.
                         */
                        destinationPortRange?: string;
                        /**
                         * Destination Prefix
                         * Format: ip
                         * @description Destination prefix to match.
                         */
                        destinationPrefix?: string;
                        /**
                         * First Fragment
                         * @description Match the first fragment only.
                         */
                        firstFragment?: boolean;
                        /**
                         * Fragment
                         * @description Match any fragment.
                         */
                        fragment?: boolean;
                        /**
                         * ICMP Code
                         * @description Match a specific ICMP code, as a number between 0-255, e.g. 0.
                         */
                        icmpCode?: number[];
                        /**
                         * ICMP Type Name
                         * @description Match a specific ICMP type by name, e.g. dest-unreachable.
                         * @enum {string}
                         */
                        icmpTypeName?: "DestUnreachable" | "Echo" | "EchoReply" | "EchoRequest" | "McastRtrAdv" | "McastRtrSolicit" | "McastRtrTerm" | "MldDone" | "MldQuery" | "MldReport" | "MldV2" | "NeighborAdvertise" | "NeighborSolicit" | "NodeInfoQuery" | "NodeInfoResponse" | "PacketTooBig" | "ParamProblem" | "Redirect" | "RouterAdvertise" | "RouterRenumber" | "RouterSolicit" | "SourceQuench" | "TimeExceeded" | "Timestamp" | "TimestampReply";
                        /**
                         * ICMP Type Number
                         * @description Match a specific ICMP type by number.
                         */
                        icmpTypeNumber?: number;
                        /**
                         * Protocol Name
                         * @description Match a specific IP protocol name (specified in the type field of the IP header).
                         * @enum {string}
                         */
                        protocolName?: "AH" | "EGP" | "EIGRP" | "ESP" | "GGP" | "GRE" | "ICMP" | "ICMP6" | "IDRP" | "IGMP" | "IGP" | "IPV4" | "IPV6" | "IPV6-DEST-OPTS" | "IPV6-HOP" | "L2TP" | "MPLS-IN-IP" | "NO-NEXT-HDR" | "OSPF" | "PIM" | "ROHC" | "RSVP" | "SCTP" | "ST" | "TCP" | "UDP" | "VRRP";
                        /**
                         * Protocol Number
                         * @description Match a specific IP protocol number (specified in the type field of the IP header).
                         */
                        protocolNumber?: number;
                        /**
                         * Rate Limit
                         * @description Rate limit to apply when the action is 'RateLimit'.
                         */
                        rateLimit?: {
                            /**
                             * Burst Size
                             * Format: int32
                             * @description The maximum burst size in bytes.
                             */
                            burstSize?: number;
                            /**
                             * Entry Specific Policer
                             * @description Controls policer instantiation: false for shared instance, true for per-entry instances
                             * @default false
                             */
                            entrySpecificPolicer: boolean;
                            /**
                             * Peak Rate
                             * Format: int32
                             * @description The peak rate in kilobytes per second.
                             */
                            peakRate?: number;
                            /**
                             * Scope
                             * @description Determines how the policer is applied across subinterfaces. Global applies the policer across all subinterfaces, while Subinterface applies it individually to each subinterface.
                             * @default Global
                             * @enum {string}
                             */
                            scope: "Global" | "Subinterface";
                        };
                        /**
                         * Source Port Name
                         * @description Source port to match by name.
                         * @enum {string}
                         */
                        sourcePortName?: "ACAP" | "AFP-TCP" | "ARNS" | "ASF-RMCP" | "ASHARE" | "ATALK-RM" | "AURP" | "AUTH" | "BFD" | "BFD-ECHO" | "BFTP" | "BGMP" | "BGP" | "BOOTPC" | "BOOTPS" | "CCSO-NS" | "CHARGEN" | "CISCO-TDP" | "CITADEL" | "CLEARCASE" | "COMMERCE" | "COURIER" | "DAYTIME" | "DHCP-FAILOVER" | "DHCPV6-CLIENT" | "DHCPV6-SERVER" | "DICOM" | "DISCARD" | "DNSIX" | "DOMAIN" | "DSP" | "ECHO" | "EPP" | "ESRO" | "EXEC" | "FINGER" | "FTP" | "FTP-DATA" | "FTPS" | "FTPS-DATA" | "GODI" | "GOPHER" | "GTP-C" | "GTP-PRIME" | "GTP-U" | "HA-CLUSTER" | "HOSTNAME" | "HP-ALARM-MGR" | "HTTP" | "HTTP-ALT" | "HTTP-MGMT" | "HTTP-RPC" | "HTTPS" | "IEEE-MMS-SSL" | "IMAP" | "IMAP3" | "IMAPS" | "IPP" | "IPSEC" | "IPX" | "IRC" | "IRIS-BEEP" | "ISAKMP" | "ISAKMP-NAT" | "ISCSI" | "ISO-TSAP" | "KERBEROS" | "KERBEROS-ADM" | "KLOGIN" | "KPASSWD" | "KSHELL" | "L2TP" | "LDAP" | "LDAPS" | "LDP" | "LMP" | "LOGIN" | "LPD" | "LSP-PING" | "MAC-SERVER-ADM" | "MATIP-A" | "MATIP-B" | "MICRO-BFD" | "MICROSOFT-DS" | "MOBILE-IP" | "MONITOR" | "MPP" | "MS-EXCHANGE" | "MSDP" | "MSP" | "MSSQL-M" | "MSSQL-S" | "MULTIHOP-BFD" | "NAS" | "NCP" | "NETBIOS-DATA" | "NETBIOS-NS" | "NETBIOS-SS" | "NETNEWS" | "NETRJS-1" | "NETRJS-2" | "NETRJS-3" | "NETRJS-4" | "NETWALL" | "NEW-RWHO" | "NFS" | "NNTP" | "NNTPS" | "NTP" | "ODMR" | "OLSR" | "OPENVPN" | "PIM-AUTO-RP" | "PKIX-TIMESTAMP" | "POP2" | "POP3" | "POP3S" | "PPTP" | "PRINT-SRV" | "PTP-EVENT" | "PTP-GENERAL" | "QMTP" | "QOTD" | "RADIUS" | "RADIUS-ACCT" | "REMOTE-MAIL" | "REMOTEFS" | "REMOTECMD" | "RIP" | "RJE" | "RLP" | "RLZDB" | "RMC" | "RMONITOR" | "RPC2PORTMAP" | "RSYNC" | "RTELNET" | "RTSP" | "SGMP" | "SILC" | "SMUX" | "SNA-GW" | "SNMP" | "SNMP-TRAP" | "SNPP" | "SMTP" | "SQL-SVCS" | "SQL" | "SSH" | "SUBMISSION" | "SUNRPC" | "SVCLOC" | "SYSLOG" | "SYSTAT" | "TACACS" | "TALK" | "TCPMUX" | "TCPNETHASPSRV" | "TFTP" | "TIME" | "TIMED" | "UPS" | "XDMCP" | "XNS-CH" | "XNS-MAIL" | "XNS-TIME" | "Z3950";
                        /**
                         * Source Port Number
                         * @description Source port to match by numerical value.
                         */
                        sourcePortNumber?: number;
                        /**
                         * Source Port Operator
                         * @description Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.
                         * @enum {string}
                         */
                        sourcePortOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                        /**
                         * Source Port Range
                         * @description Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.
                         */
                        sourcePortRange?: string;
                        /**
                         * Source Prefix
                         * Format: ip
                         * @description Source prefix to match.
                         */
                        sourcePrefix?: string;
                        /**
                         * TCP Flags
                         * @description Match TCP flags, usable with !, &, | and the flags RST, SYN, and ACK.
                         */
                        tcpFlags?: string;
                    };
                    /** MAC Entry */
                    macEntry?: {
                        /**
                         * Action
                         * @description An action to take, either 'Accept','Drop', or 'RateLimit'.
                         * @enum {string}
                         */
                        action?: "Drop" | "Accept" | "RateLimit";
                        /**
                         * Destination MAC
                         * Format: macAddr
                         * @description Match an Ethernet frame if its destination MAC address logically anded with the mask equals this MAC address.
                         */
                        destinationMAC?: string;
                        /**
                         * Destination MAC Mask
                         * @description Match an Ethernet frame if its destination MAC address logically anded with the mask equals the configured MAC address.
                         */
                        destinationMACMask?: string;
                        /**
                         * Ethertype
                         * @description An Ethernet frame matches this condition if its ethertype value (after 802.1Q VLAN tags) matches the specified value.
                         * @enum {string}
                         */
                        ethertype?: "ARP" | "AUTHENTICATION8021X" | "ETHOAM" | "FCOE" | "FCOEINITIALIZATION" | "FLOWCONTROL" | "IPV4" | "IPV6" | "LACP" | "LLDP" | "MACSEC" | "MPLSMULTICAST" | "MPLSUNICAST" | "PBB" | "PPPOEDISCOVERY" | "PPPOESESSION" | "PTP" | "ROCE";
                        /**
                         * Outer VLAN ID Operator
                         * @description Operator to use when matching OuterVlanIdValue, either Equals, GreaterOrEquals, or LessOrEquals.
                         * @enum {string}
                         */
                        outerVLANIDOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                        /**
                         * Outer VLAN ID Range
                         * @description Range of Outer vlan IDs to match, in the format n-m, e.g. 100-200
                         */
                        outerVLANIDRange?: string;
                        /**
                         * Outer VLAN ID Value
                         * @description Ethernet frame matching criteria based on the outermost VLAN ID found before the subinterface-defining VLAN tag (if any) is removed. A value of 'none' will match only untagged frames.
                         */
                        outerVLANIDValue?: string;
                        /**
                         * Rate Limit
                         * @description Rate limit to apply when the action is 'RateLimit'.
                         */
                        rateLimit?: {
                            /**
                             * Burst Size
                             * Format: int32
                             * @description The maximum burst size in bytes.
                             */
                            burstSize?: number;
                            /**
                             * Entry Specific Policer
                             * @description Controls policer instantiation: false for shared instance, true for per-entry instances
                             * @default false
                             */
                            entrySpecificPolicer: boolean;
                            /**
                             * Peak Rate
                             * Format: int32
                             * @description The peak rate in kilobytes per second.
                             */
                            peakRate?: number;
                            /**
                             * Scope
                             * @description Determines how the policer is applied across subinterfaces. Global applies the policer across all subinterfaces, while Subinterface applies it individually to each subinterface.
                             * @default Global
                             * @enum {string}
                             */
                            scope: "Global" | "Subinterface";
                        };
                        /**
                         * Source MAC
                         * Format: macAddr
                         * @description Match an Ethernet frame if its source MAC address logically anded with the mask equals this MAC address.
                         */
                        sourceMAC?: string;
                        /**
                         * Source MAC Mask
                         * @description Match an Ethernet frame if its source MAC address logically anded with the mask equals the configured MAC address.
                         */
                        sourceMACMask?: string;
                    };
                    /**
                     * Type
                     * @default Auto
                     * @enum {string}
                     */
                    type: "IPV4" | "IPV6" | "MAC" | "Auto";
                }[];
            };
            /**
             * Status
             * @description FilterStatus defines the observed state of Filter
             */
            readonly status?: Record<string, never>;
        };
        /** @description FilterList is a list of filters */
        "com.nokia.eda.filters.v1alpha1.FilterList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter"][];
            kind: string;
        };
        "com.nokia.eda.filters.v1alpha1.Filter_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.filters.v1alpha1.Filter_DeletedResources": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter_DeletedResourceEntry"][];
        "com.nokia.eda.filters.v1alpha1.Filter_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionFiltersEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesFiltersEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiFiltersEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listFiltersEdaNokiaComV1alpha1Controlplanefilters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilterList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listFiltersEdaNokiaComV1alpha1Filters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.FilterList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilterList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilterList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the ControlPlaneFilter to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the ControlPlaneFilter to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.ControlPlaneFilter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryFiltersEdaNokiaComV1alpha1NamespaceControlplanefilters: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the ControlPlaneFilter to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.FilterList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.FilterList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Filter to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Filter to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.filters.v1alpha1.Filter"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryFiltersEdaNokiaComV1alpha1NamespaceFilters: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Filter to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
