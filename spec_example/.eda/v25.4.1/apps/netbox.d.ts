/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/netbox.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from netbox.eda.nokia.com */
        get: operations["getVersionNetboxEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from netbox.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesNetboxEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for netbox.eda.nokia.com v1alpha1 */
        get: operations["uiNetboxEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/allocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list allocations */
        get: operations["listNetboxEdaNokiaComV1alpha1Allocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list instances */
        get: operations["listNetboxEdaNokiaComV1alpha1Instances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/allocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list allocations in namespace */
        get: operations["listNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        put?: never;
        /** @description create a Allocation */
        post: operations["createNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        /** Delete all instances of Allocation in the specified namespace. */
        delete: operations["deleteAllNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/allocations/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Allocation that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/allocations/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Allocation.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        /** @description replace a Allocation */
        put: operations["replaceNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        post?: never;
        /** @description delete the specified Allocation */
        delete: operations["deleteNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        options?: never;
        head?: never;
        /** @description patch a Allocation */
        patch: operations["patchNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/allocations/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Allocation. */
        get: operations["getHistoryNetboxEdaNokiaComV1alpha1NamespaceAllocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list instances in namespace */
        get: operations["listNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        put?: never;
        /** @description create a Instance */
        post: operations["createNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        /** Delete all instances of Instance in the specified namespace. */
        delete: operations["deleteAllNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/instances/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Instance that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/instances/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Instance.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        /** @description replace a Instance */
        put: operations["replaceNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        post?: never;
        /** @description delete the specified Instance */
        delete: operations["deleteNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        options?: never;
        head?: never;
        /** @description patch a Instance */
        patch: operations["patchNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        trace?: never;
    };
    "/apps/netbox.eda.nokia.com/v1alpha1/namespaces/{namespace}/instances/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Instance. */
        get: operations["getHistoryNetboxEdaNokiaComV1alpha1NamespaceInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description Allocation is the Schema for the allocations API */
        "com.nokia.eda.netbox.v1alpha1.Allocation": {
            /** @default netbox.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Allocation */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation_metadata"];
            /**
             * Specification
             * @description AllocationSpec defines the desired state of Allocation
             */
            spec: {
                /**
                 * Description
                 * @description A short description of the Allocation resource
                 */
                description?: string;
                /**
                 * Enabled
                 * @description If true the Allocation is enabled.
                 * @default true
                 */
                enabled: boolean;
                /**
                 * instance
                 * @description Netbox instance reference
                 */
                instance: string;
                /**
                 * Subnet Length
                 * @description Prefix length when the type is subnet
                 */
                subnetLength?: number;
                /**
                 * Tags
                 * @description List of tags that must be included in the IPPrefix received from NetBox
                 *     for this allocation to be applied.
                 */
                tags?: string[];
                /**
                 * Allocation Type
                 * @description The allocation type: one of ip-address, subnet or ip-in-subnet
                 * @enum {string}
                 */
                type?: "ip-address" | "subnet" | "ip-in-subnet";
            };
            /**
             * Status
             * @description AllocationStatus defines the observed state of Allocation
             */
            readonly status?: {
                lastEvent?: string;
                lastEventStatus?: string;
                /** Format: date-time */
                lastEventTime?: string;
                matchedPrefixes?: {
                    /** Format: int32 */
                    id?: number;
                    isContainer?: boolean;
                    prefix?: string;
                    tags?: string[];
                }[];
            };
        };
        /** @description AllocationList is a list of allocations */
        "com.nokia.eda.netbox.v1alpha1.AllocationList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation"][];
            kind: string;
        };
        "com.nokia.eda.netbox.v1alpha1.Allocation_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.netbox.v1alpha1.Allocation_DeletedResources": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation_DeletedResourceEntry"][];
        "com.nokia.eda.netbox.v1alpha1.Allocation_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Instance is the Schema for the instances API */
        "com.nokia.eda.netbox.v1alpha1.Instance": {
            /** @default netbox.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Instance */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance_metadata"];
            /**
             * Specification
             * @description InstanceSpec defines the desired state of Instance
             */
            spec: {
                /**
                 * API Token
                 * @description Reference to a Kubernetes secret containing netbox
                 *     credentials.
                 *     The secret must define the key `apiToken`.
                 */
                apiToken: string;
                /**
                 * Check Interval
                 * @description Interval between NetBox instance status checks.
                 * @default 1m
                 */
                checkInterval: string;
                /**
                 * Signature Key
                 * @description Reference to a Kubernetes secret containing NetBox
                 *     webhook signature secret.
                 *     Secret must define the key `signatureKey`.
                 */
                signatureKey: string;
                /**
                 * Timeout
                 * @description Timeout for API requests to the NetBox instance.
                 * @default 10s
                 */
                timeout: string;
                /**
                 * TLS configuration
                 * @description Define TLS parameters for connecting to
                 *     the NetBox instance.
                 */
                tls?: {
                    /**
                     * Skip Verify
                     * @description If true, the app will not verify the certificate returned
                     *     by NetBox.
                     */
                    skipVerify?: boolean;
                    /**
                     * Trust Bundle
                     * @description configMap reference containing CA (key `trust-bundle.pem`)
                     *     to validate the certificate returned by NetBox.
                     */
                    trustBundle?: string;
                };
                /**
                 * URL
                 * @description The URL of the Netbox instance.
                 */
                url: string;
            };
            /**
             * Status
             * @description InstanceStatus defines the observed state of Instance
             */
            readonly status?: {
                /**
                 * Error Reason
                 * @description Provides an error reason if the instance is unreachable
                 */
                errorReason?: string;
                /**
                 * Last Checked
                 * Format: date-time
                 * @description Last checked time for connectivity status
                 */
                lastChecked?: string;
                /**
                 * Reachable
                 * @description Indicates if the netbox instance is reachable
                 */
                reachable?: boolean;
            };
        };
        /** @description InstanceList is a list of instances */
        "com.nokia.eda.netbox.v1alpha1.InstanceList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance"][];
            kind: string;
        };
        "com.nokia.eda.netbox.v1alpha1.Instance_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.netbox.v1alpha1.Instance_DeletedResources": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance_DeletedResourceEntry"][];
        "com.nokia.eda.netbox.v1alpha1.Instance_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionNetboxEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesNetboxEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiNetboxEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listNetboxEdaNokiaComV1alpha1Allocations: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.AllocationList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listNetboxEdaNokiaComV1alpha1Instances: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.InstanceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.AllocationList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.AllocationList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Allocation to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Allocation to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Allocation"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryNetboxEdaNokiaComV1alpha1NamespaceAllocations: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Allocation to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.InstanceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.InstanceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Instance to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Instance to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.netbox.v1alpha1.Instance"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryNetboxEdaNokiaComV1alpha1NamespaceInstances: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Instance to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
