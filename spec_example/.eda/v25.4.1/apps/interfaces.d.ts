/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/interfaces.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from interfaces.eda.nokia.com */
        get: operations["getVersionInterfacesEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from interfaces.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesInterfacesEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for interfaces.eda.nokia.com v1alpha1 */
        get: operations["uiInterfacesEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/breakouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list breakouts */
        get: operations["listInterfacesEdaNokiaComV1alpha1Breakouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/interfaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list interfaces */
        get: operations["listInterfacesEdaNokiaComV1alpha1Interfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/interfacestates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list interfacestates */
        get: operations["listInterfacesEdaNokiaComV1alpha1Interfacestates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/breakouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list breakouts in namespace */
        get: operations["listInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        put?: never;
        /** @description create a Breakout */
        post: operations["createInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        /** Delete all instances of Breakout in the specified namespace. */
        delete: operations["deleteAllInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/breakouts/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Breakout that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/breakouts/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Breakout.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        /** @description replace a Breakout */
        put: operations["replaceInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        post?: never;
        /** @description delete the specified Breakout */
        delete: operations["deleteInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        options?: never;
        head?: never;
        /** @description patch a Breakout */
        patch: operations["patchInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/breakouts/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Breakout. */
        get: operations["getHistoryInterfacesEdaNokiaComV1alpha1NamespaceBreakouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list interfaces in namespace */
        get: operations["listInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        put?: never;
        /** @description create a Interface */
        post: operations["createInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        /** Delete all instances of Interface in the specified namespace. */
        delete: operations["deleteAllInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfaces/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Interface that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfaces/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Interface.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        /** @description replace a Interface */
        put: operations["replaceInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        post?: never;
        /** @description delete the specified Interface */
        delete: operations["deleteInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        options?: never;
        head?: never;
        /** @description patch a Interface */
        patch: operations["patchInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfaces/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Interface. */
        get: operations["getHistoryInterfacesEdaNokiaComV1alpha1NamespaceInterfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfacestates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list interfacestates in namespace */
        get: operations["listInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        put?: never;
        /** @description create a InterfaceState */
        post: operations["createInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        /** Delete all instances of InterfaceState in the specified namespace. */
        delete: operations["deleteAllInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfacestates/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of InterfaceState that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfacestates/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified InterfaceState.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        /** @description replace a InterfaceState */
        put: operations["replaceInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        post?: never;
        /** @description delete the specified InterfaceState */
        delete: operations["deleteInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        options?: never;
        head?: never;
        /** @description patch a InterfaceState */
        patch: operations["patchInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        trace?: never;
    };
    "/apps/interfaces.eda.nokia.com/v1alpha1/namespaces/{namespace}/interfacestates/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced InterfaceState. */
        get: operations["getHistoryInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description Breakout is the Schema for the breakouts API */
        "com.nokia.eda.interfaces.v1alpha1.Breakout": {
            /** @default interfaces.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Breakout */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout_metadata"];
            /**
             * Specification
             * @description Breakout allows for the configuration of interface breakouts on specified Nodes. This resource specifies the Nodes, parent Interfaces, the number of breakout channels, and the speed of each channel.
             */
            spec: {
                /**
                 * Number of Channels
                 * @description The number of breakout channels to create.
                 */
                channels: number;
                /**
                 * Nomalized Parent Interface
                 * @description A list of normalized parent interface/port.
                 */
                interface?: string[];
                /**
                 * Nodes
                 * @description Reference to a list of TopoNodes where the parent interfaces are to be broken out.
                 */
                node: string[];
                /**
                 * TopoNode
                 * @description TopoNode where the parent interfaces are to be broken out.
                 */
                nodeSelector?: string[];
                /**
                 * Speed
                 * @description The speed of each breakout channel.
                 * @enum {string}
                 */
                speed: "800G" | "400G" | "200G" | "100G" | "50G" | "40G" | "25G" | "10G";
            };
            /**
             * Status
             * @description BreakoutStatus defines the observed state of Breakout
             */
            readonly status?: Record<string, never>;
        };
        /** @description BreakoutList is a list of breakouts */
        "com.nokia.eda.interfaces.v1alpha1.BreakoutList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout"][];
            kind: string;
        };
        "com.nokia.eda.interfaces.v1alpha1.Breakout_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.interfaces.v1alpha1.Breakout_DeletedResources": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout_DeletedResourceEntry"][];
        "com.nokia.eda.interfaces.v1alpha1.Breakout_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Interface is the Schema for the interfaces API */
        "com.nokia.eda.interfaces.v1alpha1.Interface": {
            /** @default interfaces.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Interface */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface_metadata"];
            /**
             * Specification
             * @description Interface allows for the configuration of various interface properties such as enabling/disabling the interface, setting descriptions, specifying interface types (e.g., LAG, interface, loopback), configuring VLAN encapsulation, and setting Ethernet or LAG-specific options.
             */
            spec: {
                /**
                 * DDM
                 * @description Enables reporting of DDM events.
                 */
                ddm?: boolean;
                /**
                 * Description
                 * @description Description of the interface.
                 */
                description?: string;
                /**
                 * Enabled
                 * @description Enable or disable the interface.
                 * @default true
                 */
                enabled: boolean;
                /**
                 * Encapsulation Type
                 * @description Enable or disable VLAN tagging on this interface. [default="null"]
                 * @default null
                 * @enum {string}
                 */
                encapType: "null" | "dot1q";
                /**
                 * Ethernet
                 * @description Ethernet configuration options.
                 */
                ethernet?: {
                    /**
                     * Forward Error Correction
                     * @description Sets the Forward Error Correction (FEC) on the members of the interface.
                     * @enum {string}
                     */
                    fec?: "disabled" | "rs528" | "rs544" | "baser" | "rs108";
                    /**
                     * Hold Down Timer
                     * Format: int32
                     * @description The hold-time down behavior is triggered with events that try to bring the ethernet interface down and can change quickly. It is not triggered with an admin-state disable event or interface disable due to other internal reasons.  Units in milliseconds.
                     */
                    holdDownTimer?: number;
                    /**
                     * Hold Up Timer
                     * Format: int32
                     * @description The hold-time up behavior is triggered with any event that tries to bring up the ethernet interface.  While the hold-time up is running, the transceiver laser will be enabled, however the higher layers will not be notified that the interface is operationally up until the timer expires.  Units in milliseconds.
                     */
                    holdUpTimer?: number;
                    /**
                     * Reload Delay Timer
                     * @description After the system boots, the reload-delay timer in seconds keeps an interface shut down with the laser off for a configured amount of time until connectivity with the rest of network is established.
                     */
                    reloadDelayTimer?: number;
                    /**
                     * Speed
                     * @description The speed of this interface, in human-readable format - e.g. 25G, 100G.
                     * @enum {string}
                     */
                    speed?: "100G" | "10G" | "1G" | "25G" | "40G" | "50G" | "400G";
                    /**
                     * Standby Signaling
                     * @description Indicates the standby-signaling used in the interface.
                     * @enum {string}
                     */
                    standbySignaling?: "lacp" | "power-off";
                    /**
                     * Storm Control
                     * @description Enables storm control.
                     */
                    stormControl?: {
                        /**
                         * Broadcast Rate
                         * Format: int32
                         * @description Sets the maximum rate allowed for ingress broadcast frames on the interface.
                         */
                        broadcastRate?: number;
                        /**
                         * Enabled
                         * @description Enables storm control.
                         */
                        enabled?: boolean;
                        /**
                         * Multicast Rate
                         * Format: int32
                         * @description Sets the maximum rate allowed for ingress multicast frames on the interface.
                         */
                        multicastRate?: number;
                        /**
                         * Units
                         * @description Set the units to be used for measurement.
                         * @enum {string}
                         */
                        units?: "kbps" | "percentage";
                        /**
                         * Unknown Unicast Rate
                         * @description Sets the maximum rate allowed for ingress unknown unicast frames on the interface.
                         */
                        unknownUnicastRate?: number;
                    };
                    /**
                     * Transparent L2CP Protocols
                     * @description A list of L2CP protocols to tunnel. Options: LLDP, LACP, xSTP, Dot1x, PTP, All.
                     */
                    transparentL2CPProtocols?: ("LLDP" | "LACP" | "xSTP" | "Dot1x" | "PTP" | "All")[];
                };
                /**
                 * LAG
                 * @description LAG configuration options.
                 */
                lag?: {
                    /** LACP */
                    lacp?: {
                        /**
                         * Admin Key
                         * @description Configure the LACP admin-key to be advertised by the local system.
                         */
                        adminKey?: number;
                        /**
                         * Interval
                         * @description Set the period between LACP messages, uses the lacp-period-type enumeration. [default="fast"]
                         * @default fast
                         * @enum {string}
                         */
                        interval: "fast" | "slow";
                        /**
                         * Fallback
                         * @description LACP fallback allows one or more designated links of an LACP controlled LAG to go into forwarding mode if LACP is not yet operational after a configured timeout period. [default=disabled]
                         */
                        lacpFallback?: {
                            /**
                             * Mode
                             * @description Specifies lacp-fallback mode if enabled.
                             * @default static
                             * @enum {string}
                             */
                            mode: "static";
                            /**
                             * Timeout
                             * @description Specifies the LACP-fallback timeout interval in seconds. [default=60]
                             * @default 60
                             */
                            timeout: number;
                        };
                        /**
                         * Mode
                         * @description Active is to initiate the transmission of LACP PDUs. Passive is to wait for peer to initiate the transmission of LACP PDUs.[default="active"]
                         * @default active
                         * @enum {string}
                         */
                        mode: "active" | "passive";
                        /**
                         * System ID MAC
                         * @description The MAC address portion of the Node's System ID. This is combined with the system priority to construct the 8-octet system-id.
                         */
                        systemIdMac?: string;
                        /**
                         * System Priority
                         * @description System priority used by the Node on this LAG interface. Lower value is higher priority for determining which Node is the controlling system.[default=32768]
                         * @default 32768
                         */
                        systemPriority: number;
                    };
                    /**
                     * Minimum Links
                     * @description The min-link threshold specifies the minimum number of member links that must be active in order for the LAG to be operationally up. If the number of active links falls below this threshold, the entire LAG is brought operationally down.[default=1]
                     * @default 1
                     */
                    minLinks: number;
                    /** Multi Homing */
                    multihoming?: {
                        /**
                         * ESI
                         * @description 10 byte Ethernet Segment Identifier, if not set a type 0 ESI is generated. [default=auto]
                         * @default auto
                         */
                        esi: string;
                        /**
                         * Mode
                         * @description "all-active": All interfaces are active.
                         *     "single-active": In a single active MH LAG, the active and standby function is handled at the sub-interface layer within a network-instance.  That is, the physical interfaces within the same LAG all remain operationally up, however each sub-interface associated with a network-instance has its operational state up or down based on whether it is selected to be the active or standby sub-interface.
                         *     "port-active": When port active MH LAG is enabled, the active and standby function is handled at the interface level.
                         * @default all-active
                         * @enum {string}
                         */
                        mode: "all-active" | "single-active" | "port-active";
                        /**
                         * Preferred Active Node
                         * @description To be used in single-active or port-active modes.  This references the Node object and when set, the DF algorithm is configured to type preference and the selected Node is set with a higher preference value.  All other Nodes have a lower value configured.
                         */
                        preferredActiveNode?: string;
                        /**
                         * Reload Delay Timer
                         * @description After the system boots, the reload-delay timer in seconds keeps an interface shut down with the laser off for a configured amount of time until connectivity with the rest of network is established. [default=100]
                         * @default 100
                         */
                        reloadDelayTimer: number;
                        /**
                         * Revertive
                         * @description To be used in single-active or port-active modes.  When true, if there is a switch of active interface in the LAG and the original interface comes back up, the LAG will switch back to using the original interface as active. [default=false]
                         * @default false
                         */
                        revertive: boolean;
                    };
                    /**
                     * Type
                     * @description This type defines whether whether it is a static or LACP LAG. [default=lacp]
                     * @default lacp
                     * @enum {string}
                     */
                    type: "lacp" | "static";
                };
                /**
                 * Link Layer Discovery Protocol
                 * @description Enable or disable LLDP on the members of the interface.
                 * @default true
                 */
                lldp: boolean;
                /**
                 * Members
                 * @description List of members on which to apply properties, for single interface this would be a list of 1.
                 */
                members: {
                    /**
                     * Aggregate ID
                     * @description When using a LAG, the aggregateId can be specified per set of interfaces on a node.
                     *     LAG interface with which this interface is associated.
                     */
                    aggregateId?: string;
                    /**
                     * Description
                     * @description Description of the member, inherited from the interface if not provided.
                     */
                    description?: string;
                    /**
                     * Enabled
                     * @description Enable or disable this member.
                     * @default true
                     */
                    enabled: boolean;
                    /**
                     * Interface
                     * @description Reference to an interface in the normalized format. Ex: SRL ethernet-1/1 would be ethernet-1-1. SROS port 2/1/1 would be ethernet-2-1.
                     */
                    interface: string;
                    /**
                     * LACP Port Priority
                     * @description Configure the port priority for LACP. This value is used to determine which port should be activated with LACP fallback mode. Lower values are more preferred.[default=32768]
                     * @default 32768
                     */
                    lacpPortPriority: number;
                    /**
                     * Node Name
                     * @description Node name.
                     */
                    node: string;
                }[];
                /**
                 * MTU
                 * @description MTU to apply on the interface(s).
                 */
                mtu?: number;
                /**
                 * Type
                 * @description Type defines whether the interface is a Lag or Interface.
                 * @default interface
                 * @enum {string}
                 */
                type: "lag" | "interface" | "loopback";
            };
            /** Status */
            readonly status?: {
                /**
                 * Enabled
                 * @description The administrative status of the Interface.
                 */
                enabled?: boolean;
                /** Lag */
                lag?: {
                    /** Admin Key */
                    adminKey?: number;
                    /** System ID MAC */
                    systemIdMac?: string;
                };
                /**
                 * Last Change
                 * Format: date
                 * @description Indicates when this Interface last changed state.
                 */
                lastChange?: string;
                /**
                 * Members
                 * @description List of members in this Interface.
                 */
                members?: {
                    /**
                     * Enabled
                     * @description The administrative status of this member.
                     */
                    enabled?: boolean;
                    /**
                     * Interface
                     * @description The name of the interface in normalized format.
                     */
                    interface?: string;
                    /**
                     * Last Change
                     * Format: date
                     * @description Indicates when this member last changed state.
                     */
                    lastChange?: string;
                    /**
                     * Neighbors
                     * @description List of discovered neighbors on this member.
                     */
                    neighbors?: {
                        /**
                         * Interface
                         * @description The name of a neighbor interface of this member in node specific format.
                         */
                        interface?: string;
                        /**
                         * Node
                         * @description The name of a neighbor node of this member in node specific format.
                         */
                        node?: string;
                    }[];
                    /**
                     * Node
                     * @description The node on which the interface is configured.
                     */
                    node?: string;
                    /**
                     * Node Interface
                     * @description Node specific interface name, for example "ethernet-1/1", "1/1/c1/1".
                     */
                    nodeInterface: string;
                    /**
                     * Operational State
                     * @description Indicates the current operational state of this member.
                     */
                    operationalState?: string;
                    /**
                     * Speed
                     * @description Indicates the operational speed of the member.
                     */
                    speed?: string;
                }[];
                /**
                 * Operational State
                 * @description Indicates the current operational state of the Interface.
                 */
                operationalState?: string;
                /**
                 * Speed
                 * @description Indicates the operational speed of the Interface in aggregate.
                 */
                speed?: string;
            };
        };
        /** @description InterfaceList is a list of interfaces */
        "com.nokia.eda.interfaces.v1alpha1.InterfaceList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface"][];
            kind: string;
        };
        /** @description InterfaceState is the Schema for the interfacestates API */
        "com.nokia.eda.interfaces.v1alpha1.InterfaceState": {
            /** @default interfaces.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default InterfaceState */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState_metadata"];
            /** Specification */
            spec: {
                /** @description Enable or disable the interface. */
                enabled?: boolean;
                /** Lag */
                lag?: {
                    /** Admin Key */
                    adminKey?: number;
                    /** System ID MAC */
                    systemIdMac?: string;
                };
                /** @description List of members on which to monitor state for */
                members: {
                    /** @description LAG interface with which this interface is associated */
                    aggregateId?: string;
                    /** @description Enable or disable this member. */
                    enabled?: boolean;
                    /** @description Normalized interface name */
                    interface: string;
                    /** @description Reference to the TopoNode on which this member resides */
                    node: string;
                    /** @description Node specific interface name, for example "ethernet-1/1", "1/1/c1/1" */
                    nodeInterface: string;
                    /** @description The operating system of the TopoNode on which this member resides */
                    operatingSystem: string;
                    /** @description The version of the TopoNode on which this interface resides */
                    version: string;
                }[];
                /**
                 * @description Role of this interface. This is used to calculate severity of alarms. [default="edge"]
                 * @default edge
                 * @enum {string}
                 */
                role: "isl" | "edge" | "loopback";
            };
            /**
             * Status
             * @description InterfaceStateStatus defines the observed state of Interface
             */
            readonly status?: Record<string, never>;
        };
        /** @description InterfaceStateList is a list of interfacestates */
        "com.nokia.eda.interfaces.v1alpha1.InterfaceStateList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState"][];
            kind: string;
        };
        "com.nokia.eda.interfaces.v1alpha1.InterfaceState_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.interfaces.v1alpha1.InterfaceState_DeletedResources": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState_DeletedResourceEntry"][];
        "com.nokia.eda.interfaces.v1alpha1.InterfaceState_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        "com.nokia.eda.interfaces.v1alpha1.Interface_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.interfaces.v1alpha1.Interface_DeletedResources": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface_DeletedResourceEntry"][];
        "com.nokia.eda.interfaces.v1alpha1.Interface_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionInterfacesEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesInterfacesEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiInterfacesEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listInterfacesEdaNokiaComV1alpha1Breakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.BreakoutList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listInterfacesEdaNokiaComV1alpha1Interfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listInterfacesEdaNokiaComV1alpha1Interfacestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.BreakoutList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.BreakoutList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Breakout to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Breakout to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Breakout"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryInterfacesEdaNokiaComV1alpha1NamespaceBreakouts: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Breakout to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Interface to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Interface to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.Interface"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryInterfacesEdaNokiaComV1alpha1NamespaceInterfaces: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Interface to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the InterfaceState to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the InterfaceState to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.interfaces.v1alpha1.InterfaceState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryInterfacesEdaNokiaComV1alpha1NamespaceInterfacestates: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the InterfaceState to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
