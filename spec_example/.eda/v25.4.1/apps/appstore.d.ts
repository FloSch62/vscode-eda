/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/appstore.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from appstore.eda.nokia.com */
        get: operations["getVersionAppstoreEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from appstore.eda.nokia.com/v1 */
        get: operations["getResourcesAppstoreEdaNokiaComV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for appstore.eda.nokia.com v1 */
        get: operations["uiAppstoreEdaNokiaComV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/catalogs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list catalogs */
        get: operations["listAppstoreEdaNokiaComV1Catalogs"];
        put?: never;
        /** @description create a non-namespaced Catalog */
        post: operations["createAppstoreEdaNokiaComV1Catalogs"];
        /** @description Delete all instances of Catalog.  If Catalog is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced Catalog, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllAppstoreEdaNokiaComV1Catalogs"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/catalogs/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Catalog that have been deleted. */
        get: operations["getDeletedAppstoreEdaNokiaComV1Catalogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/catalogs/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced Catalog.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readAppstoreEdaNokiaComV1Catalogs"];
        /** @description replace a non-namespaced Catalog */
        put: operations["replaceAppstoreEdaNokiaComV1Catalogs"];
        post?: never;
        /** @description delete the specified non-namespaced Catalog */
        delete: operations["deleteAppstoreEdaNokiaComV1Catalogs"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced Catalog */
        patch: operations["patchAppstoreEdaNokiaComV1Catalogs"];
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/catalogs/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced Catalog. */
        get: operations["getHistoryAppstoreEdaNokiaComV1Catalogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/registries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list registries */
        get: operations["listAppstoreEdaNokiaComV1Registries"];
        put?: never;
        /** @description create a non-namespaced Registry */
        post: operations["createAppstoreEdaNokiaComV1Registries"];
        /** @description Delete all instances of Registry.  If Registry is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced Registry, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllAppstoreEdaNokiaComV1Registries"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/registries/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Registry that have been deleted. */
        get: operations["getDeletedAppstoreEdaNokiaComV1Registries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/registries/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced Registry.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readAppstoreEdaNokiaComV1Registries"];
        /** @description replace a non-namespaced Registry */
        put: operations["replaceAppstoreEdaNokiaComV1Registries"];
        post?: never;
        /** @description delete the specified non-namespaced Registry */
        delete: operations["deleteAppstoreEdaNokiaComV1Registries"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced Registry */
        patch: operations["patchAppstoreEdaNokiaComV1Registries"];
        trace?: never;
    };
    "/apps/appstore.eda.nokia.com/v1/registries/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced Registry. */
        get: operations["getHistoryAppstoreEdaNokiaComV1Registries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description Catalog is the Schema for the catalogs API */
        "com.nokia.eda.appstore.v1.Catalog": {
            /** @default appstore.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Catalog */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.appstore.v1.Catalog_metadata"];
            /**
             * Specification
             * @description CatalogSpec defines the desired state of a Catalog.
             */
            spec: {
                /**
                 * Authentication Secret Reference
                 * @description AuthSecretRef is the authentication secret reference, used for authentication.
                 *     Must be in the same namespace as the catalog.
                 */
                authSecretRef?: string;
                /**
                 * Description
                 * @description Description is an optional short description of the catalog.
                 */
                description?: string;
                /**
                 * Refresh Interval
                 * Format: int32
                 * @description RefreshInterval tells the controller how often it should check the remote catalog for new updates, in seconds.
                 *     Default is 180 seconds. Minimum is 30 seconds for production environments; 10 seconds for test environments.
                 * @default 180
                 */
                refreshInterval: number;
                /**
                 * Remote Type
                 * @description RemoteType type of the catalog, only 'git' is supported at the moment.
                 * @default git
                 * @enum {string}
                 */
                remoteType: "git";
                /**
                 * Remote URL
                 * @description RemoteURL is the HTTP(S) remote URL of the catalog. Supported URI schemes: 'https://' and 'http://'.
                 *     Default is HTTPS if no scheme is given.
                 */
                remoteURL?: string;
                /**
                 * Skip TLS Verify
                 * @description SkipTLSVerify skips the validity check for the server's certificate. This will make HTTPS connections insecure.
                 * @default false
                 */
                skipTLSVerify: boolean;
                /**
                 * Title
                 * @description Title is an UI-friendly name for the catalog.
                 */
                title?: string;
            };
            /**
             * Status
             * @description CatalogStatus defines the observed state of a Catalog.
             */
            readonly status?: {
                /**
                 * Error
                 * @description Error denotes the last error that was encountered by the controller.
                 */
                error?: string;
                /**
                 * Last Refresh Time
                 * Format: date-time
                 * @description LastRefreshTime is the last attempt to refresh the catalog cache by the controller.
                 */
                lastRefreshTime?: string;
                /**
                 * Operational
                 * @description Operational reports whether the catalog remote is operational.
                 * @default false
                 */
                operational: boolean;
            };
        };
        /** @description CatalogList is a list of catalogs */
        "com.nokia.eda.appstore.v1.CatalogList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.appstore.v1.Catalog"][];
            kind: string;
        };
        "com.nokia.eda.appstore.v1.Catalog_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.appstore.v1.Catalog_DeletedResources": components["schemas"]["com.nokia.eda.appstore.v1.Catalog_DeletedResourceEntry"][];
        "com.nokia.eda.appstore.v1.Catalog_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
        /** @description Registry is the Schema for the registries API */
        "com.nokia.eda.appstore.v1.Registry": {
            /** @default appstore.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Registry */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.appstore.v1.Registry_metadata"];
            /**
             * Specification
             * @description RegistrySpec defines the desired state of a Registry
             */
            spec: {
                /**
                 * Authentication Secret Reference
                 * @description AuthSecretRef is the authentication secret reference, used for authentication.
                 *     Must be in the same namespace as the catalog.
                 */
                authSecretRef?: string;
                /**
                 * Mirror
                 * @description Mirror registry of the original remote registry.
                 *     App store will use the mirror instead of the original registry that is referenced by a catalog.
                 */
                mirror?: string;
                /**
                 * Remote URL
                 * @description RemoteURL is the remote URL of the registry. Supported URI schemes: 'https://' and 'http://'.
                 *     	Default is HTTPS if no scheme is given.
                 */
                remoteURL: string;
                /**
                 * Skip TLS Verify
                 * @description Skip TLS Verification on connection
                 * @default false
                 */
                skipTLSVerify: boolean;
                /**
                 * Title
                 * @description Title is an UI-friendly name for the catalog.
                 */
                title?: string;
            };
            /**
             * Status
             * @description RegistryStatus defines the observed state of Registry
             */
            readonly status?: {
                /**
                 * Error
                 * @description Error denotes the last error that was encountered by the controller.
                 */
                error: string;
                /**
                 * Reachable
                 * @description Reachable indicates if the registry is reachable.
                 * @default false
                 */
                reachable: boolean;
            };
        };
        /** @description RegistryList is a list of registries */
        "com.nokia.eda.appstore.v1.RegistryList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.appstore.v1.Registry"][];
            kind: string;
        };
        "com.nokia.eda.appstore.v1.Registry_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.appstore.v1.Registry_DeletedResources": components["schemas"]["com.nokia.eda.appstore.v1.Registry_DeletedResourceEntry"][];
        "com.nokia.eda.appstore.v1.Registry_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionAppstoreEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesAppstoreEdaNokiaComV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiAppstoreEdaNokiaComV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.CatalogList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Catalog"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Catalog"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.CatalogList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Catalog_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the Catalog to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Catalog"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Catalog"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Catalog"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the Catalog to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Catalog"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryAppstoreEdaNokiaComV1Catalogs: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Catalog to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.RegistryList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Registry"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Registry"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.RegistryList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Registry_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the Registry to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Registry"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Registry"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Registry"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the Registry to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.appstore.v1.Registry"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryAppstoreEdaNokiaComV1Registries: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Registry to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
