/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/prom.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from prom.eda.nokia.com */
        get: operations["getVersionPromEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/prom.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from prom.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesPromEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/prom.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for prom.eda.nokia.com v1alpha1 */
        get: operations["uiPromEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/prom.eda.nokia.com/v1alpha1/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list exports */
        get: operations["listPromEdaNokiaComV1alpha1Exports"];
        put?: never;
        /** @description create a non-namespaced Export */
        post: operations["createPromEdaNokiaComV1alpha1Exports"];
        /** @description Delete all instances of Export.  If Export is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced Export, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllPromEdaNokiaComV1alpha1Exports"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/prom.eda.nokia.com/v1alpha1/exports/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Export that have been deleted. */
        get: operations["getDeletedPromEdaNokiaComV1alpha1Exports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/prom.eda.nokia.com/v1alpha1/exports/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced Export.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readPromEdaNokiaComV1alpha1Exports"];
        /** @description replace a non-namespaced Export */
        put: operations["replacePromEdaNokiaComV1alpha1Exports"];
        post?: never;
        /** @description delete the specified non-namespaced Export */
        delete: operations["deletePromEdaNokiaComV1alpha1Exports"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced Export */
        patch: operations["patchPromEdaNokiaComV1alpha1Exports"];
        trace?: never;
    };
    "/apps/prom.eda.nokia.com/v1alpha1/exports/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced Export. */
        get: operations["getHistoryPromEdaNokiaComV1alpha1Exports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description Export is the Schema for the exports API */
        "com.nokia.eda.prom.v1alpha1.Export": {
            /** @default prom.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Export */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.prom.v1alpha1.Export_metadata"];
            /**
             * Specification
             * @description ExportSpec defines the desired state of Export
             */
            spec: {
                /**
                 * Exports
                 * @description Exports is the list of metrics and their sources to be exposed to Prometheus
                 */
                exports: {
                    /**
                     * Fields
                     * @description An optional set of fields to be exposed by this export.
                     */
                    fields?: string[];
                    /**
                     * Labels
                     * @description Labels allows to add labels to the generated metrics,
                     *     either statically (predefined set of label/value) or
                     *     dynamically based on a path+field
                     *     retrieved from EDB.
                     */
                    labels?: {
                        /**
                         * Dynamic Labels
                         * @description DynamicLabels defines a list of dynamic labels to add to the metrics.
                         *     The only supported dynamic source is a path+field from SA.
                         *     The regex and replacement are used to extract the Label value from SA response.
                         */
                        dynamic?: {
                            /**
                             * Field
                             * @description The field name to add as a label
                             */
                            field?: string;
                            /**
                             * Path
                             * @description The state DB path to export, in the format '.node.srl.interface'
                             */
                            path?: string;
                            /**
                             * Regex
                             * @description A regular expression to be applied to the field value.
                             */
                            regex?: string;
                            /**
                             * Replacement
                             * @description A regular expression replacement to be applied to the field value.
                             */
                            replacement?: string;
                        }[];
                        /**
                         * Static Labels
                         * @description StaticLabels defines a list of static labels and values to
                         *     be added to the default labels of the generated metric.
                         */
                        static?: {
                            /**
                             * Name
                             * @description Label name.
                             */
                            name?: string;
                            /**
                             * Value
                             * @description Label value.
                             */
                            value?: string;
                        }[];
                    };
                    /**
                     * Mappings
                     * @description Mappings are a set of rules used to map metrics values to values
                     *     that can be ingested by Prometheus, e.g: DOWN->1, UP->2
                     */
                    mappings?: {
                        /**
                         * Destination
                         * @description Destination defines the new value.
                         *     It can be a regular expression with replacement groups.
                         *     Its data type must be convertible to a float64.
                         */
                        destination?: string;
                        /**
                         * Source
                         * @description Source defines the value to be mapped.
                         *     It can be a regular expression with capture groups.
                         */
                        source?: string;
                    }[];
                    /**
                     * Metric Name
                     * @description metric name renaming regex and replacement
                     */
                    metricName?: {
                        /**
                         * Regex
                         * @description A regular expression to be applied to the metric name
                         */
                        regex?: string;
                        /**
                         * Replacement
                         * @description A regular expression replacement to be applied to the metric name
                         */
                        replacement?: string;
                    };
                    /**
                     * Path
                     * @description The state DB path to export, in the format '.namespace.node.srl.interface'
                     */
                    path?: string;
                    /**
                     * Prefix
                     * @description An optional prefix to add to all metrics exposed by this export, for example 'interface'
                     */
                    prefix?: string;
                    /**
                     * Custom Resource
                     * @description A Custom resource to be used as a source for the metric.
                     *     It will generate a metric with the CR labels and a value of 1.
                     */
                    resource?: {
                        /**
                         * Group
                         * @description The CR group such as `core.eda.nokia.com`.
                         */
                        group?: string;
                        /**
                         * Kind
                         * @description The CR kind such as `toponode`.
                         */
                        kind?: string;
                        /**
                         * Labels
                         * @description List of labels to include with the metric.
                         *     Include all if not set.
                         */
                        labels?: string[];
                        /**
                         * Name
                         * @description CR name to be queried.
                         *     Get all of not set.
                         */
                        name?: string;
                        /**
                         * Namespace
                         * @description The CR namespace, it defaults to all if not specified.
                         */
                        namespace?: string;
                        /**
                         * Version
                         * @description The CR version such as `v1` or `v1alpha1`.
                         */
                        version?: string;
                    };
                    /**
                     * Where
                     * @description A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.
                     */
                    where?: string;
                }[];
                /**
                 * Group
                 * @description Metric group, defines the collector the metrics belong to.
                 */
                group?: string;
            };
            /**
             * Status
             * @description ExportStatus defines the observed state of Export
             */
            readonly status?: Record<string, never>;
        };
        /** @description ExportList is a list of exports */
        "com.nokia.eda.prom.v1alpha1.ExportList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.prom.v1alpha1.Export"][];
            kind: string;
        };
        "com.nokia.eda.prom.v1alpha1.Export_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.prom.v1alpha1.Export_DeletedResources": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export_DeletedResourceEntry"][];
        "com.nokia.eda.prom.v1alpha1.Export_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionPromEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesPromEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiPromEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listPromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.ExportList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createPromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllPromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.ExportList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedPromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readPromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the Export to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replacePromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deletePromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the Export to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchPromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.prom.v1alpha1.Export"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryPromEdaNokiaComV1alpha1Exports: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Export to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
