/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/qos.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from qos.eda.nokia.com */
        get: operations["getVersionQosEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from qos.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesQosEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for qos.eda.nokia.com v1alpha1 */
        get: operations["uiQosEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/egresspolicys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list egresspolicys */
        get: operations["listQosEdaNokiaComV1alpha1Egresspolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/forwardingclasss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list forwardingclasss */
        get: operations["listQosEdaNokiaComV1alpha1Forwardingclasss"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/ingresspolicys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ingresspolicys */
        get: operations["listQosEdaNokiaComV1alpha1Ingresspolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/egresspolicys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list egresspolicys in namespace */
        get: operations["listQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        put?: never;
        /** @description create a EgressPolicy */
        post: operations["createQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        /** Delete all instances of EgressPolicy in the specified namespace. */
        delete: operations["deleteAllQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/egresspolicys/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of EgressPolicy that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/egresspolicys/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified EgressPolicy.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        /** @description replace a EgressPolicy */
        put: operations["replaceQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        post?: never;
        /** @description delete the specified EgressPolicy */
        delete: operations["deleteQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        options?: never;
        head?: never;
        /** @description patch a EgressPolicy */
        patch: operations["patchQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/egresspolicys/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced EgressPolicy. */
        get: operations["getHistoryQosEdaNokiaComV1alpha1NamespaceEgresspolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/forwardingclasss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list forwardingclasss in namespace */
        get: operations["listQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        put?: never;
        /** @description create a ForwardingClass */
        post: operations["createQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        /** Delete all instances of ForwardingClass in the specified namespace. */
        delete: operations["deleteAllQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/forwardingclasss/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of ForwardingClass that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/forwardingclasss/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified ForwardingClass.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        /** @description replace a ForwardingClass */
        put: operations["replaceQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        post?: never;
        /** @description delete the specified ForwardingClass */
        delete: operations["deleteQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        options?: never;
        head?: never;
        /** @description patch a ForwardingClass */
        patch: operations["patchQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/forwardingclasss/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced ForwardingClass. */
        get: operations["getHistoryQosEdaNokiaComV1alpha1NamespaceForwardingclasss"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/ingresspolicys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list ingresspolicys in namespace */
        get: operations["listQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        put?: never;
        /** @description create a IngressPolicy */
        post: operations["createQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        /** Delete all instances of IngressPolicy in the specified namespace. */
        delete: operations["deleteAllQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/ingresspolicys/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of IngressPolicy that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/ingresspolicys/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified IngressPolicy.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        /** @description replace a IngressPolicy */
        put: operations["replaceQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        post?: never;
        /** @description delete the specified IngressPolicy */
        delete: operations["deleteQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        options?: never;
        head?: never;
        /** @description patch a IngressPolicy */
        patch: operations["patchQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/ingresspolicys/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced IngressPolicy. */
        get: operations["getHistoryQosEdaNokiaComV1alpha1NamespaceIngresspolicys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policyattachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list policyattachments in namespace */
        get: operations["listQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        put?: never;
        /** @description create a PolicyAttachment */
        post: operations["createQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        /** Delete all instances of PolicyAttachment in the specified namespace. */
        delete: operations["deleteAllQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policyattachments/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of PolicyAttachment that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policyattachments/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified PolicyAttachment.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        /** @description replace a PolicyAttachment */
        put: operations["replaceQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        post?: never;
        /** @description delete the specified PolicyAttachment */
        delete: operations["deleteQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        options?: never;
        head?: never;
        /** @description patch a PolicyAttachment */
        patch: operations["patchQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policyattachments/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced PolicyAttachment. */
        get: operations["getHistoryQosEdaNokiaComV1alpha1NamespacePolicyattachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policydeployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list policydeployments in namespace */
        get: operations["listQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        put?: never;
        /** @description create a PolicyDeployment */
        post: operations["createQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        /** Delete all instances of PolicyDeployment in the specified namespace. */
        delete: operations["deleteAllQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policydeployments/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of PolicyDeployment that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policydeployments/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified PolicyDeployment.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        /** @description replace a PolicyDeployment */
        put: operations["replaceQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        post?: never;
        /** @description delete the specified PolicyDeployment */
        delete: operations["deleteQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        options?: never;
        head?: never;
        /** @description patch a PolicyDeployment */
        patch: operations["patchQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/policydeployments/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced PolicyDeployment. */
        get: operations["getHistoryQosEdaNokiaComV1alpha1NamespacePolicydeployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list queues in namespace */
        get: operations["listQosEdaNokiaComV1alpha1NamespaceQueues"];
        put?: never;
        /** @description create a Queue */
        post: operations["createQosEdaNokiaComV1alpha1NamespaceQueues"];
        /** Delete all instances of Queue in the specified namespace. */
        delete: operations["deleteAllQosEdaNokiaComV1alpha1NamespaceQueues"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/queues/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Queue that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedQosEdaNokiaComV1alpha1NamespaceQueues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/queues/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Queue.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readQosEdaNokiaComV1alpha1NamespaceQueues"];
        /** @description replace a Queue */
        put: operations["replaceQosEdaNokiaComV1alpha1NamespaceQueues"];
        post?: never;
        /** @description delete the specified Queue */
        delete: operations["deleteQosEdaNokiaComV1alpha1NamespaceQueues"];
        options?: never;
        head?: never;
        /** @description patch a Queue */
        patch: operations["patchQosEdaNokiaComV1alpha1NamespaceQueues"];
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/namespaces/{namespace}/queues/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Queue. */
        get: operations["getHistoryQosEdaNokiaComV1alpha1NamespaceQueues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/policyattachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list policyattachments */
        get: operations["listQosEdaNokiaComV1alpha1Policyattachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/policydeployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list policydeployments */
        get: operations["listQosEdaNokiaComV1alpha1Policydeployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/qos.eda.nokia.com/v1alpha1/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list queues */
        get: operations["listQosEdaNokiaComV1alpha1Queues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description EgressPolicy is the Schema for the egresspolicys API */
        "com.nokia.eda.qos.v1alpha1.EgressPolicy": {
            /** @default qos.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default EgressPolicy */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy_metadata"];
            /**
             * Specification
             * @description EgressPolicySpec defines the desired state of EgressPolicy
             */
            spec: {
                /**
                 * Dot1p Rewrite Policy
                 * @description Dot1pRewritePolicy enables the configuration of rewrite policies for Dot1p values. It includes mappings of forwarding classes to Dot1p values, with options for drop probability-specific overrides within each forwarding class.
                 */
                dot1pRewritePolicy?: {
                    /**
                     * Map
                     * @description Map of forwarding classes to PCP values
                     */
                    dot1pMap: {
                        /**
                         * Drop Probability
                         * @description Drop probability specific overrides within the forwarding class
                         */
                        dropProbability?: {
                            /**
                             * Level
                             * @description A drop probability level within the forwarding class for which a different remarking is desired
                             * @enum {string}
                             */
                            level?: "High" | "Medium" | "Low";
                            /**
                             * PCP Value
                             * @description The PCP value to be used for packets associated with the forwarding class and the specific drop probability. This overrides the general PCP value.
                             */
                            pcpValue?: number;
                        }[];
                        /**
                         * Forwarding Class
                         * @description The forwarding class matched to apply the rewrite policy
                         */
                        forwardingClasses: string[];
                        /**
                         * PCP Value
                         * @description The PCP value to be used for all packets associated with the forwarding class, except those with a drop-probability-specific or profile-specific override
                         */
                        pcpValue?: number;
                    }[];
                };
                /**
                 * DSCP Rewrite Policy
                 * @description DSCPRewritePolicy enables the configuration of rewrite policies for Differentiated Services Code Point (DSCP) values. It includes mappings of forwarding classes to DSCP values, with options for drop probability-specific overrides within each forwarding class.  If a DSCPRewritePolicy is not specified, the DSCP value of the packet is unchanged. If a DSCP policy is specific and ECN is enabled on any of the queues, the DSCP policy will be applied to all ECN capable packets.
                 */
                dscpRewritePolicy?: {
                    /**
                     * Map
                     * @description Map of forwarding classes to DSCP values.
                     */
                    dscpMap: {
                        /**
                         * Drop Probability
                         * @description A drop probability within the forwarding class for which a different remarking is desired.
                         */
                        dropProbability?: {
                            /**
                             * DSCP
                             * @description The DSCP value to be used for packets associated with the forwarding class and the specific drop probability. This overrides the general DSCP value.
                             */
                            dscp?: number;
                            /**
                             * Level
                             * @description A drop probability level within the forwarding class for which a different remarking is desired.
                             * @enum {string}
                             */
                            level?: "High" | "Medium" | "Low";
                        }[];
                        /**
                         * DSCP
                         * @description The DSCP value to be used for all packets associated with the forwarding class, except those with a drop-probability-specific or profile-specific override.
                         */
                        dscp?: number;
                        /**
                         * Forwarding Class
                         * @description The forwarding class matched to apply the rewrite policy.
                         */
                        forwardingClasses: string[];
                    }[];
                };
                /**
                 * Forwarding Class to Queue Mapping
                 * @description Forwarding class to queue mapping policy.
                 */
                forwardingClassToQueueMapping?: {
                    /**
                     * Forwarding Classes
                     * @description The forwarding classes to which the mapping applies, these are references to ForwardingClass resources.
                     */
                    forwardingClasses: string[];
                    /**
                     * Queue
                     * @description The queue to which the forwarding classes are mapped, this is a reference to a Queue resource.
                     */
                    queue: string;
                    /**
                     * Queue Group
                     * @description The queue-group name for queue to forwarding class mapping.
                     */
                    queueGroup?: string;
                }[];
                /**
                 * Deadlock Avoidance
                 * @description Parameters related to avoid a deadlock related to pfc on outgoing interface.
                 */
                pfcDeadlockAvoidance?: {
                    /**
                     * Deadlock Avoidance
                     * @description Parameters related to avoid a deadlock related to pfc on outgoing interface
                     */
                    deadlockAvoidance: boolean;
                    /**
                     * Deadlock Detection Timer
                     * @description Number of milliseconds during which outgoing interface is receiving pfc-pause-frames before triggering recovery-timer.
                     */
                    deadlockDetectionTimer: number;
                    /**
                     * Deadlock Recovery Timer
                     * @description Number of milliseconds during which the pfc-pause-frames will be ignored.
                     */
                    deadlockRecoveryTimer: number;
                };
                /**
                 * Queue Management
                 * @description Queue management policy for egress queues.
                 */
                queueManagement?: {
                    /**
                     * Queues
                     * @description List of queues.
                     */
                    queues: {
                        /**
                         * Committed Burst Size
                         * Format: int32
                         * @description Committed Burst Size.
                         */
                        committedBurstSize?: number;
                        /**
                         * Maximum Burst Size
                         * Format: int32
                         * @description Maximum amount of shared buffer memory available to the queue in bytes.
                         */
                        maximumBurstSize: number;
                        /**
                         * PFC Priority
                         * @description The pfc-priority received in pfc-pause-frame.
                         */
                        pfcPauseFramePriority?: number;
                        /**
                         * Queue
                         * @description Reference to a Queue resource.
                         */
                        queue: string;
                        /**
                         * Scheduler Peak Rate Percent
                         * @description The peak rate percent used by the scheduler for the queue.
                         */
                        schedulerPeakRatePercent?: number;
                        /**
                         * Scheduler Priority Level
                         * @description The priority level at this Port Scheduler Policy.
                         */
                        schedulerPriorityLevel?: number;
                        /**
                         * Scheduler Weight
                         * @description The weight factor used for the WRR scheduler. If any of the queues have a configured weight the set of queues will use a WRR scheduler and thus all queues must have a weight configured.  If no weights are set then the queues are scheduled in strict priority from lowest to higher queue ID.
                         */
                        schedulerWeight?: number;
                    }[];
                    /**
                     * Slope Policy Weight
                     * @description The average queue size is calculated using both the previous average and the current queue size: average = (previous average)(1 - 2^(-n)) + (current size)(2^(-n)), where n is a user-configurable weight factor. A higher n gives more importance to the previous average, smoothing peaks and lows in the queue. Lower n makes the average closer to the current queue size. If this leaf is absent, the default value is used.
                     * @default 0
                     */
                    slopePolicyWeight: number;
                    /**
                     * Slope Policy
                     * @description Slope policy to apply to the set of queues.
                     */
                    wredSlopPolicies?: {
                        /**
                         * Drop
                         * @description When set to true, and if the ECN field in the packet indicates that the endpoints are not ECN-capable, and the WRED algorithm determines that the packet should be dropped based on the drop probability, the packet will be dropped
                         * @default false
                         */
                        drop: boolean;
                        /**
                         * Drop Probability
                         * @default All
                         * @enum {string}
                         */
                        dropProbability: "High" | "Medium" | "Low" | "All";
                        /**
                         * ECN
                         * @description When set to true and the queue length is between the thresholds and the ECN field indicates ECN-capable endpoints, the CE bits are set to 1, and the packet is transmitted based on WRED. If false, such packets are discarded.
                         * @default false
                         */
                        ecn: boolean;
                        /**
                         * Max Drop Probability Percent
                         * @description If the queue depth is between min and max threshold then this the probability with which packets are dropped or marked.
                         */
                        maxDropProbabilityPercent?: number;
                        /**
                         * Max Threshold
                         * Format: int64
                         * @description The maximum threshold parameter for a RED-managed queue in bytes. When the average queue length exceeds the max value, all packets are dropped (or marked if ECN is enabled). Mutually exclusive with min-threshold-percent and max-threshold-percent.
                         */
                        maxThreshold?: number;
                        /**
                         * Max Threshold Percent
                         * @description The maximum threshold parameter for a RED-managed queue in percent. When the average queue length exceeds the max value, all packets are dropped (or marked if ECN is enabled). Mutually exclusive with min-threshold and max-threshold.
                         */
                        maxThresholdPercent?: number;
                        /**
                         * Min Threshold
                         * Format: int64
                         * @description The mininum threshold parameter for a RED-managed queue in bytes. When the average queue length is less than min, all packets are admitted to the queue. Mututally exclusive with min-threshold-percent and max-threshold-percent.
                         */
                        minThreshold?: number;
                        /**
                         * Min Threshold Percent
                         * @description The mininum threshold parameter for a RED-managed queue in percent. When the average queue length is less than min, all packets are admitted to the queue. Mutually exclusive with min-threshold and max-threshold.
                         */
                        minThresholdPercent?: number;
                        /**
                         * Traffic Type
                         * @description The traffic type to which the WRED slope applies.
                         * @default All
                         * @enum {string}
                         */
                        trafficType: "Tcp" | "NonTcp" | "All";
                    }[];
                }[];
            };
            /**
             * Status
             * @description EgressPolicyStatus defines the observed state of EgressPolicy
             */
            readonly status?: Record<string, never>;
        };
        /** @description EgressPolicyList is a list of egresspolicys */
        "com.nokia.eda.qos.v1alpha1.EgressPolicyList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy"][];
            kind: string;
        };
        "com.nokia.eda.qos.v1alpha1.EgressPolicy_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.qos.v1alpha1.EgressPolicy_DeletedResources": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy_DeletedResourceEntry"][];
        "com.nokia.eda.qos.v1alpha1.EgressPolicy_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description ForwardingClass is the Schema for the forwardingclasss API */
        "com.nokia.eda.qos.v1alpha1.ForwardingClass": {
            /** @default qos.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default ForwardingClass */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass_metadata"];
            /**
             * Specification
             * @description The ForwaringClass is used as a placeholder for to allow multiple other resources to reference the same forwarding class.
             */
            spec: Record<string, never>;
            /**
             * Status
             * @description ForwardingClassStatus defines the observed state of ForwardingClass
             */
            readonly status?: Record<string, never>;
        };
        /** @description ForwardingClassList is a list of forwardingclasss */
        "com.nokia.eda.qos.v1alpha1.ForwardingClassList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass"][];
            kind: string;
        };
        "com.nokia.eda.qos.v1alpha1.ForwardingClass_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.qos.v1alpha1.ForwardingClass_DeletedResources": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass_DeletedResourceEntry"][];
        "com.nokia.eda.qos.v1alpha1.ForwardingClass_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description IngressPolicy is the Schema for the ingresspolicys API */
        "com.nokia.eda.qos.v1alpha1.IngressPolicy": {
            /** @default qos.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default IngressPolicy */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy_metadata"];
            /**
             * Specification
             * @description IngressPolicySpec defines the desired state of IngressPolicy
             */
            spec: {
                /**
                 * Classifiers
                 * @description Classifier manages the configuration of traffic classification policies in a network. It includes various entry types like IPv4, IPv6, Dot1p, and DSCP policies. Each entry specifies how traffic should be classified and what actions should be taken on the matched packets.
                 */
                classifier?: {
                    /**
                     * Entries
                     * @description Specifies the list of filter entries, in order.
                     *     A classifier containing multiple entry types may result in multiple classifiers being created on the target node.
                     *     IPV4 and IPV6 entries will create multifield classifier policies.
                     */
                    entries: {
                        /**
                         * Dot1p Policy Entry
                         * @description A Dot1p policy entry - only a single Dot1p entry is allowed per classifier resource.
                         */
                        dot1pPolicyEntry?: {
                            /**
                             * Direct to PFC Queue
                             * @description In addition to creating a Dot1p PCP value to Forwarding Class mapping, this will map the PCP values directly to the PFC queue specified in the Forwarding Class to Queue mapping.
                             */
                            directToPFCQueue?: boolean;
                            /**
                             * Drop Probability Level
                             * @description Assign matching packets to the specified drop probability level.
                             * @default Low
                             * @enum {string}
                             */
                            dropProbabilityLevel: "High" | "Medium" | "Low";
                            /**
                             * Forwarding Class
                             * @description Reference to a ForwardingClass resource to which the value is mapped.
                             */
                            forwardingClass?: string;
                            /**
                             * PCP Values
                             * @description List of PCP values or ranges used to match packets to classify into Forwarding Classes.
                             */
                            pcpValues: {
                                /**
                                 * PCP Range End
                                 * @description Optional end of PCP range (inclusive) which would start from the Value to the RangeEnd.
                                 */
                                rangeEnd?: number;
                                /**
                                 * PCP Value
                                 * @description Single PCP value or start of range.
                                 */
                                value: number;
                            }[];
                        };
                        /**
                         * DSCP Policy Entry
                         * @description A DSCP policy entry - only a single DSCP entry is allowed per classifier resource.
                         */
                        dscpPolicyEntry?: {
                            /**
                             * Drop Probability Level
                             * @description Assign matching packets to the specified drop probability level.
                             * @default Low
                             * @enum {string}
                             */
                            dropProbabilityLevel: "High" | "Medium" | "Low";
                            /**
                             * DSCP Values
                             * @description List of DSCP values or ranges used to match packets to classify into Forwarding Classes.
                             */
                            dscpValues: {
                                /**
                                 * DSCP Range End
                                 * @description Optional end of DSCP range (inclusive) which would start from the Value to the RangeEnd.
                                 */
                                rangeEnd?: number;
                                /**
                                 * DSCP Value
                                 * @description Single DSCP value or start of range.
                                 */
                                value: number;
                            }[];
                            /**
                             * Forwarding Class
                             * @description Reference to a ForwardingClass resource to which the value is mapped.
                             */
                            forwardingClass?: string;
                        };
                        /**
                         * IP Entry
                         * @description An IPv4 or IPv6 multifield classifier entry.
                         */
                        ipEntry?: {
                            /**
                             * Action
                             * @description An action to take on the matched packets.
                             */
                            action: {
                                /**
                                 * Drop Probability Level
                                 * @description Assign matching packets to the specified drop probability level.
                                 * @default Low
                                 * @enum {string}
                                 */
                                dropProbabilityLevel: "High" | "Medium" | "Low";
                                /**
                                 * DSCP Rewrite Value
                                 * @description Rewrite actions associated with packets that match the classifier entry.
                                 */
                                dscpRewriteValue?: number;
                                /**
                                 * Forwarding Class
                                 * @description Reference to a ForwardingClass resource to which the value is mapped.
                                 */
                                forwardingClass?: string;
                            };
                            /**
                             * Destination Port Name
                             * @description Destination port to match by name.
                             * @enum {string}
                             */
                            destinationPortName?: "ACAP" | "AFP-TCP" | "ARNS" | "ASF-RMCP" | "ASHARE" | "ATALK-RM" | "AURP" | "AUTH" | "BFD" | "BFD-ECHO" | "BFTP" | "BGMP" | "BGP" | "BOOTPC" | "BOOTPS" | "CCSO-NS" | "CHARGEN" | "CISCO-TDP" | "CITADEL" | "CLEARCASE" | "COMMERCE" | "COURIER" | "DAYTIME" | "DHCP-FAILOVER" | "DHCPV6-CLIENT" | "DHCPV6-SERVER" | "DICOM" | "DISCARD" | "DNSIX" | "DOMAIN" | "DSP" | "ECHO" | "EPP" | "ESRO" | "EXEC" | "FINGER" | "FTP" | "FTP-DATA" | "FTPS" | "FTPS-DATA" | "GODI" | "GOPHER" | "GTP-C" | "GTP-PRIME" | "GTP-U" | "HA-CLUSTER" | "HOSTNAME" | "HP-ALARM-MGR" | "HTTP" | "HTTP-ALT" | "HTTP-MGMT" | "HTTP-RPC" | "HTTPS" | "IEEE-MMS-SSL" | "IMAP" | "IMAP3" | "IMAPS" | "IPP" | "IPSEC" | "IPX" | "IRC" | "IRIS-BEEP" | "ISAKMP" | "ISAKMP-NAT" | "ISCSI" | "ISO-TSAP" | "KERBEROS" | "KERBEROS-ADM" | "KLOGIN" | "KPASSWD" | "KSHELL" | "L2TP" | "LDAP" | "LDAPS" | "LDP" | "LMP" | "LOGIN" | "LPD" | "LSP-PING" | "MAC-SERVER-ADM" | "MATIP-A" | "MATIP-B" | "MICRO-BFD" | "MICROSOFT-DS" | "MOBILE-IP" | "MONITOR" | "MPP" | "MS-EXCHANGE" | "MSDP" | "MSP" | "MSSQL-M" | "MSSQL-S" | "MULTIHOP-BFD" | "NAS" | "NCP" | "NETBIOS-DATA" | "NETBIOS-NS" | "NETBIOS-SS" | "NETNEWS" | "NETRJS-1" | "NETRJS-2" | "NETRJS-3" | "NETRJS-4" | "NETWALL" | "NEW-RWHO" | "NFS" | "NNTP" | "NNTPS" | "NTP" | "ODMR" | "OLSR" | "OPENVPN" | "PIM-AUTO-RP" | "PKIX-TIMESTAMP" | "POP2" | "POP3" | "POP3S" | "PPTP" | "PRINT-SRV" | "PTP-EVENT" | "PTP-GENERAL" | "QMTP" | "QOTD" | "RADIUS" | "RADIUS-ACCT" | "REMOTE-MAIL" | "REMOTEFS" | "REMOTECMD" | "RIP" | "RJE" | "RLP" | "RLZDB" | "RMC" | "RMONITOR" | "RPC2PORTMAP" | "RSYNC" | "RTELNET" | "RTSP" | "SGMP" | "SILC" | "SMUX" | "SNA-GW" | "SNMP" | "SNMP-TRAP" | "SNPP" | "SMTP" | "SQL-SVCS" | "SQL" | "SSH" | "SUBMISSION" | "SUNRPC" | "SVCLOC" | "SYSLOG" | "SYSTAT" | "TACACS" | "TALK" | "TCPMUX" | "TCPNETHASPSRV" | "TFTP" | "TIME" | "TIMED" | "UPS" | "XDMCP" | "XNS-CH" | "XNS-MAIL" | "XNS-TIME" | "Z3950";
                            /**
                             * Destination Port Number
                             * @description Destination port to match by numerical value.
                             */
                            destinationPortNumber?: number;
                            /**
                             * Destination Port Operator
                             * @description Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.
                             * @enum {string}
                             */
                            destinationPortOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                            /**
                             * Destination Port Range
                             * @description Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.
                             */
                            destinationPortRange?: string;
                            /**
                             * Destination Prefix
                             * Format: ip
                             * @description Destination prefix to match.
                             */
                            destinationPrefix?: string;
                            /**
                             * First Fragment
                             * @description Match the first fragment only.
                             */
                            firstFragment?: boolean;
                            /**
                             * Fragment
                             * @description Match any fragment.
                             */
                            fragment?: boolean;
                            /**
                             * ICMP Code
                             * @description Match a specific ICMP code, as a number between 0-255, e.g. 0.
                             */
                            icmpCode?: number[];
                            /**
                             * ICMP Type Name
                             * @description Match a specific ICMP type by name, e.g. dest-unreachable.
                             * @enum {string}
                             */
                            icmpTypeName?: "DestUnreachable" | "Echo" | "EchoReply" | "EchoRequest" | "McastRtrAdv" | "McastRtrSolicit" | "McastRtrTerm" | "MldDone" | "MldQuery" | "MldReport" | "MldV2" | "NeighborAdvertise" | "NeighborSolicit" | "NodeInfoQuery" | "NodeInfoResponse" | "PacketTooBig" | "ParamProblem" | "Redirect" | "RouterAdvertise" | "RouterRenumber" | "RouterSolicit" | "SourceQuench" | "TimeExceeded" | "Timestamp" | "TimestampReply";
                            /**
                             * ICMP Type Number
                             * @description Match a specific ICMP type by number.
                             */
                            icmpTypeNumber?: number;
                            /**
                             * Protocol Name
                             * @description Match a specific IP protocol name (specified in the type field of the IP header).
                             * @enum {string}
                             */
                            protocolName?: "AH" | "EGP" | "EIGRP" | "ESP" | "GGP" | "GRE" | "ICMP" | "ICMP6" | "IDRP" | "IGMP" | "IGP" | "IPV4" | "IPV6" | "IPV6-DEST-OPTS" | "IPV6-HOP" | "L2TP" | "MPLS-IN-IP" | "NO-NEXT-HDR" | "OSPF" | "PIM" | "ROHC" | "RSVP" | "SCTP" | "ST" | "TCP" | "UDP" | "VRRP";
                            /**
                             * Protocol Number
                             * @description Match a specific IP protocol number (specified in the type field of the IP header).
                             */
                            protocolNumber?: number;
                            /**
                             * Source Port Name
                             * @description Source port to match by name.
                             * @enum {string}
                             */
                            sourcePortName?: "ACAP" | "AFP-TCP" | "ARNS" | "ASF-RMCP" | "ASHARE" | "ATALK-RM" | "AURP" | "AUTH" | "BFD" | "BFD-ECHO" | "BFTP" | "BGMP" | "BGP" | "BOOTPC" | "BOOTPS" | "CCSO-NS" | "CHARGEN" | "CISCO-TDP" | "CITADEL" | "CLEARCASE" | "COMMERCE" | "COURIER" | "DAYTIME" | "DHCP-FAILOVER" | "DHCPV6-CLIENT" | "DHCPV6-SERVER" | "DICOM" | "DISCARD" | "DNSIX" | "DOMAIN" | "DSP" | "ECHO" | "EPP" | "ESRO" | "EXEC" | "FINGER" | "FTP" | "FTP-DATA" | "FTPS" | "FTPS-DATA" | "GODI" | "GOPHER" | "GTP-C" | "GTP-PRIME" | "GTP-U" | "HA-CLUSTER" | "HOSTNAME" | "HP-ALARM-MGR" | "HTTP" | "HTTP-ALT" | "HTTP-MGMT" | "HTTP-RPC" | "HTTPS" | "IEEE-MMS-SSL" | "IMAP" | "IMAP3" | "IMAPS" | "IPP" | "IPSEC" | "IPX" | "IRC" | "IRIS-BEEP" | "ISAKMP" | "ISAKMP-NAT" | "ISCSI" | "ISO-TSAP" | "KERBEROS" | "KERBEROS-ADM" | "KLOGIN" | "KPASSWD" | "KSHELL" | "L2TP" | "LDAP" | "LDAPS" | "LDP" | "LMP" | "LOGIN" | "LPD" | "LSP-PING" | "MAC-SERVER-ADM" | "MATIP-A" | "MATIP-B" | "MICRO-BFD" | "MICROSOFT-DS" | "MOBILE-IP" | "MONITOR" | "MPP" | "MS-EXCHANGE" | "MSDP" | "MSP" | "MSSQL-M" | "MSSQL-S" | "MULTIHOP-BFD" | "NAS" | "NCP" | "NETBIOS-DATA" | "NETBIOS-NS" | "NETBIOS-SS" | "NETNEWS" | "NETRJS-1" | "NETRJS-2" | "NETRJS-3" | "NETRJS-4" | "NETWALL" | "NEW-RWHO" | "NFS" | "NNTP" | "NNTPS" | "NTP" | "ODMR" | "OLSR" | "OPENVPN" | "PIM-AUTO-RP" | "PKIX-TIMESTAMP" | "POP2" | "POP3" | "POP3S" | "PPTP" | "PRINT-SRV" | "PTP-EVENT" | "PTP-GENERAL" | "QMTP" | "QOTD" | "RADIUS" | "RADIUS-ACCT" | "REMOTE-MAIL" | "REMOTEFS" | "REMOTECMD" | "RIP" | "RJE" | "RLP" | "RLZDB" | "RMC" | "RMONITOR" | "RPC2PORTMAP" | "RSYNC" | "RTELNET" | "RTSP" | "SGMP" | "SILC" | "SMUX" | "SNA-GW" | "SNMP" | "SNMP-TRAP" | "SNPP" | "SMTP" | "SQL-SVCS" | "SQL" | "SSH" | "SUBMISSION" | "SUNRPC" | "SVCLOC" | "SYSLOG" | "SYSTAT" | "TACACS" | "TALK" | "TCPMUX" | "TCPNETHASPSRV" | "TFTP" | "TIME" | "TIMED" | "UPS" | "XDMCP" | "XNS-CH" | "XNS-MAIL" | "XNS-TIME" | "Z3950";
                            /**
                             * Source Port Number
                             * @description Source port to match by numerical value.
                             */
                            sourcePortNumber?: number;
                            /**
                             * Source Port Operator
                             * @description Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.
                             * @enum {string}
                             */
                            sourcePortOperator?: "Equals" | "GreaterOrEquals" | "LessOrEquals";
                            /**
                             * Source Port Range
                             * @description Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.
                             */
                            sourcePortRange?: string;
                            /**
                             * Source Prefix
                             * Format: ip
                             * @description Source prefix to match.
                             */
                            sourcePrefix?: string;
                            /**
                             * TCP Flags
                             * @description Match TCP flags, usable with !, &, | and the flags RST, SYN, and ACK.
                             */
                            tcpFlags?: string;
                        };
                        /**
                         * Type
                         * @description Type of the entry which can be IPV4, IPV6, Dot1pPolicy, DSCPPolicy, or Auto.
                         * @default AUTO
                         * @enum {string}
                         */
                        type: "IPV4" | "IPV6" | "DOT1P" | "DSCP" | "AUTO";
                    }[];
                };
                /**
                 * Forwarding Class to Queue Mapping
                 * @description Forwarding class to queue mapping policy.
                 */
                forwardingClassToQueueMapping?: {
                    /**
                     * Forwarding Classes
                     * @description The forwarding classes to which the mapping applies, these are references to ForwardingClass resources.
                     */
                    forwardingClasses: string[];
                    /**
                     * Queue
                     * @description The queue to which the forwarding classes are mapped, this is a reference to a Queue resource.
                     */
                    queue: string;
                }[];
                /**
                 * Policers
                 * @description Ordered list of policers where the first policer is evaluated first before proceeding to the next.
                 */
                policers?: {
                    /**
                     * Committed Burst Size
                     * Format: int32
                     * @description Maximum CIR bucket depth in bytes.
                     */
                    committedBurstSize?: number;
                    /**
                     * Committed Rate
                     * Format: int32
                     * @description The committed information rate (CIR) of the policer, defined in kilobits (1024 bits) per second.
                     */
                    committedRate?: number;
                    /**
                     * Committed Rate Percentage
                     * @description The committed information rate (CIR) of the policer, defined as a percentage of the Interface speed on which it is applied.
                     */
                    committedRatePercent?: number;
                    /**
                     * Exceed Action
                     * @description Applies a drop-probability to packets that the policer has determined are exceeding (yellow).
                     */
                    exceedAction?: {
                        /**
                         * Drop Probability Level
                         * @default Medium
                         * @enum {string}
                         */
                        dropProbabilityLevel: "High" | "Medium" | "Low";
                    };
                    /**
                     * Forwarding Class
                     * @description The list of forwarding classes with traffic to be sent to the policer.  Unless specified all traffic is matched for this policer.
                     */
                    forwardingClasses?: {
                        /**
                         * Forwarding Class
                         * @description The forwarding class of the packets on which to apply the Policer.  To match all traffic set this to 'ALL'.
                         */
                        forwardingClasses?: string[];
                        /**
                         * Forwarding Type
                         * @default [
                         *       "All"
                         *     ]
                         */
                        forwardingTypes: ("Broadcast" | "Unicast" | "Multicast" | "UnknownMulticast" | "UnknownUnicast" | "All")[];
                    }[];
                    /**
                     * Maximum Burst Size
                     * Format: int32
                     * @description Maximum PIR bucket depth in bytes.
                     */
                    maximumBurstSize?: number;
                    /**
                     * Minimum Interface Speed
                     * Format: int32
                     * @description Minimum interface speed (kbps) to calculate PeakRate and CommittedRate for devices where configuration is not supported in percentage.
                     */
                    minInterfaceSpeed?: number;
                    /**
                     * Peak Rate
                     * Format: int32
                     * @description The peak information rate (PIR) of the policer, defined in kilobits (1024 bits) per second.
                     */
                    peakRate?: number;
                    /**
                     * Peak Rate Percentage
                     * @description The peak information rate (PIR) of the policer, defined as a percentage of the Interface speed on which it is applied.
                     */
                    peakRatePercent?: number;
                    /**
                     * Violate Action
                     * @description Applies a drop-probability to packets that the policer has determined are exceeding (red).
                     */
                    violateAction?: {
                        /**
                         * Drop Probability Level
                         * @default High
                         * @enum {string}
                         */
                        dropProbabilityLevel: "High" | "Medium" | "Low" | "All";
                    };
                }[];
                /**
                 * Queue Management
                 * @description Queue management policy for egress queues.
                 */
                queueManagement?: {
                    /**
                     * PFC Reserved Linecard Buffer Percent
                     * @description Percentage of the linecard buffer reserved for accomodating incoming traffic while upstream node reacts to generated PFC-pause frames. Note: this percentage must be common across all EgressPolicies and QueuesSets used on the same linecard.
                     */
                    pfcReservedBufferPercent?: number;
                    /**
                     * Queues
                     * @description List of queues.
                     */
                    queues: {
                        /**
                         * Committed Burst Size
                         * Format: int32
                         * @description Committed Burst Size.
                         */
                        committedBurstSize?: number;
                        /**
                         * Maximum Burst Size
                         * Format: int32
                         * @description Maximum amount of shared buffer memory available to the queue in bytes.
                         */
                        maximumBurstSize?: number;
                        /**
                         * PFC Off Threshold
                         * @description PFC off threshold.
                         */
                        pfcOffThreshold?: number;
                        /**
                         * PFC On Threshold
                         * @description PFC on threshold.
                         */
                        pfcOnThreshold?: number;
                        /**
                         * PFC Priority
                         * @description PFC priorities indicated in generated pfc-pause-frame if congestion occurs in a given pfc-queue.
                         */
                        pfcPauseFramePriority?: number;
                        /**
                         * PFC Reserved Buffer
                         * @description Maximum level the pfc-queue can take from pfc-reserved buffer configured per given forwarding-complex.
                         */
                        pfcReservedShareBufferPercent?: number;
                        /**
                         * Queue
                         * @description Reference to a Queue resource.
                         */
                        queue: string;
                    }[];
                }[];
            };
            /**
             * Status
             * @description IngressPolicyStatus defines the observed state of IngressPolicy
             */
            readonly status?: Record<string, never>;
        };
        /** @description IngressPolicyList is a list of ingresspolicys */
        "com.nokia.eda.qos.v1alpha1.IngressPolicyList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy"][];
            kind: string;
        };
        "com.nokia.eda.qos.v1alpha1.IngressPolicy_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.qos.v1alpha1.IngressPolicy_DeletedResources": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy_DeletedResourceEntry"][];
        "com.nokia.eda.qos.v1alpha1.IngressPolicy_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description PolicyAttachment is the Schema for the policyattachments API */
        "com.nokia.eda.qos.v1alpha1.PolicyAttachment": {
            /** @default qos.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default PolicyAttachment */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment_metadata"];
            /**
             * Specification
             * @description PolicyAttachmentSpec defines the desired state of PolicyAttachment
             */
            spec: {
                /**
                 * Interfaces
                 * @description Specifies a list of Interfaces and subinterfaces on which to deploy the policies.
                 */
                attachments: {
                    /**
                     * Interface
                     * @description Specifies the Interface on which to deploy the policies.
                     */
                    interface?: string;
                    /**
                     * Interface Type
                     * @description Used for platforms that differentiate between access/service interfaces and network interface.  These platforms may require different classifiers depending on whether they are applied on access/service interfaces or network interfaces.  Specifies whether the classifier should be configured as a service Egress classifier or network Egress classifier
                     * @enum {string}
                     */
                    interfaceType?: "ACCESS" | "NETWORK";
                    /**
                     * SubInterface Index
                     * @description Specifies the SubInterfaceIndex on which to deploy the policies.
                     */
                    subInterfaceIndex?: number;
                }[];
                /**
                 * Egress Policy
                 * @description Specifies an EgressPolicy to deploy on the specified Node.
                 */
                egressPolicy?: string;
                /**
                 * Ingress Policy
                 * @description Specifies the IngressPolicy to deploy on the specified Node.
                 */
                ingressPolicy?: string;
            };
            /**
             * Status
             * @description PolicyAttachmentStatus defines the observed state of PolicyAttachment
             */
            readonly status?: Record<string, never>;
        };
        /** @description PolicyAttachmentList is a list of policyattachments */
        "com.nokia.eda.qos.v1alpha1.PolicyAttachmentList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment"][];
            kind: string;
        };
        "com.nokia.eda.qos.v1alpha1.PolicyAttachment_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.qos.v1alpha1.PolicyAttachment_DeletedResources": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment_DeletedResourceEntry"][];
        "com.nokia.eda.qos.v1alpha1.PolicyAttachment_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description PolicyDeployment is the Schema for the policydeployments API */
        "com.nokia.eda.qos.v1alpha1.PolicyDeployment": {
            /** @default qos.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default PolicyDeployment */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment_metadata"];
            /**
             * Specification
             * @description PolicyDeploymentSpec defines the desired state of PolicyDeployment
             */
            spec: {
                /**
                 * Egress Policy
                 * @description Specifies an EgressPolicy to deploy on the specified Node.
                 */
                egressPolicy?: string;
                /**
                 * Ingress Policy
                 * @description Specifies the IngressPolicy to deploy on the specified Node.
                 */
                ingressPolicy?: string;
                /**
                 * Interface Selector
                 * Format: labelselector
                 * @description Specifies a label selector to filter the interfaces on which to deploy the policies.
                 */
                interfaceSelector?: string;
                /**
                 * Interface Type
                 * @description Used for platforms that differentiate between access/service interfaces and network interface.  These platforms may require different classifiers depending on whether they are applied on access/service interfaces or network interfaces.  Specifies whether the classifier should be configured as a service Egress classifier or network Egress classifier
                 * @enum {string}
                 */
                interfaceType?: "ACCESS" | "NETWORK";
                /**
                 * Interfaces
                 * @description Specifies a list of Interfaces on which to deploy the policies.
                 */
                interfaces?: string[];
                /**
                 * Node
                 * @description Specifies a Node to deploy the policies on.
                 */
                node?: string;
                /**
                 * Node Selector
                 * Format: labelselector
                 * @description Specifies a label selector to filter the nodes on which to deploy the policies.
                 */
                nodeSelector?: string;
            };
            /**
             * Status
             * @description PolicyDeploymentStatus defines the observed state of PolicyDeployment
             */
            readonly status?: Record<string, never>;
        };
        /** @description PolicyDeploymentList is a list of policydeployments */
        "com.nokia.eda.qos.v1alpha1.PolicyDeploymentList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment"][];
            kind: string;
        };
        "com.nokia.eda.qos.v1alpha1.PolicyDeployment_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.qos.v1alpha1.PolicyDeployment_DeletedResources": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment_DeletedResourceEntry"][];
        "com.nokia.eda.qos.v1alpha1.PolicyDeployment_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Queue is the Schema for the queues API */
        "com.nokia.eda.qos.v1alpha1.Queue": {
            /** @default qos.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Queue */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue_metadata"];
            /**
             * Specification
             * @description The Queue resource is used to define the properties of a queue, which can then be referenced by other resources.
             */
            spec: {
                /**
                 * Queue ID
                 * @description The ID of the queue on which to apply the properties.  This is mandatory for usage of queus on SROS and is ignored on other operating systems.
                 */
                queueID?: number;
                /**
                 * Queue Type
                 * @description QueueType specifies whether this is a normal queue or a PFC queue
                 * @enum {string}
                 */
                queueType: "Normal" | "Pfc";
                /**
                 * Traffic Type
                 * @description The traffic type of the queue, either unicast or multicast.
                 * @enum {string}
                 */
                trafficType: "Unicast" | "Multicast";
            };
            /**
             * Status
             * @description QueueStatus defines the observed state of Queue
             */
            readonly status?: Record<string, never>;
        };
        /** @description QueueList is a list of queues */
        "com.nokia.eda.qos.v1alpha1.QueueList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue"][];
            kind: string;
        };
        "com.nokia.eda.qos.v1alpha1.Queue_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.qos.v1alpha1.Queue_DeletedResources": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue_DeletedResourceEntry"][];
        "com.nokia.eda.qos.v1alpha1.Queue_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionQosEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesQosEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiQosEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1Egresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1Forwardingclasss: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClassList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1Ingresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the EgressPolicy to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the EgressPolicy to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.EgressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryQosEdaNokiaComV1alpha1NamespaceEgresspolicys: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the EgressPolicy to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClassList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClassList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the ForwardingClass to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the ForwardingClass to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.ForwardingClass"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryQosEdaNokiaComV1alpha1NamespaceForwardingclasss: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the ForwardingClass to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the IngressPolicy to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the IngressPolicy to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.IngressPolicy"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryQosEdaNokiaComV1alpha1NamespaceIngresspolicys: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the IngressPolicy to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachmentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachmentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the PolicyAttachment to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the PolicyAttachment to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryQosEdaNokiaComV1alpha1NamespacePolicyattachments: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the PolicyAttachment to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeploymentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeploymentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the PolicyDeployment to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the PolicyDeployment to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeployment"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryQosEdaNokiaComV1alpha1NamespacePolicydeployments: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the PolicyDeployment to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.QueueList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.QueueList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Queue to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Queue to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.Queue"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryQosEdaNokiaComV1alpha1NamespaceQueues: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Queue to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1Policyattachments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyAttachmentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1Policydeployments: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.PolicyDeploymentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listQosEdaNokiaComV1alpha1Queues: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.qos.v1alpha1.QueueList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
