/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/system.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from system.eda.nokia.com */
        get: operations["getVersionSystemEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from system.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesSystemEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for system.eda.nokia.com v1alpha1 */
        get: operations["uiSystemEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/monitoraggregatestates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitoraggregatestates */
        get: operations["listSystemEdaNokiaComV1alpha1Monitoraggregatestates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/monitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitors */
        get: operations["listSystemEdaNokiaComV1alpha1Monitors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/monitorstates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitorstates */
        get: operations["listSystemEdaNokiaComV1alpha1Monitorstates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitoraggregatestates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitoraggregatestates in namespace */
        get: operations["listSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        put?: never;
        /** @description create a MonitorAggregateState */
        post: operations["createSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        /** Delete all instances of MonitorAggregateState in the specified namespace. */
        delete: operations["deleteAllSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitoraggregatestates/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of MonitorAggregateState that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitoraggregatestates/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified MonitorAggregateState.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        /** @description replace a MonitorAggregateState */
        put: operations["replaceSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        post?: never;
        /** @description delete the specified MonitorAggregateState */
        delete: operations["deleteSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        options?: never;
        head?: never;
        /** @description patch a MonitorAggregateState */
        patch: operations["patchSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitoraggregatestates/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced MonitorAggregateState. */
        get: operations["getHistorySystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitors in namespace */
        get: operations["listSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        put?: never;
        /** @description create a Monitor */
        post: operations["createSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        /** Delete all instances of Monitor in the specified namespace. */
        delete: operations["deleteAllSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitors/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Monitor that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitors/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Monitor.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        /** @description replace a Monitor */
        put: operations["replaceSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        post?: never;
        /** @description delete the specified Monitor */
        delete: operations["deleteSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        options?: never;
        head?: never;
        /** @description patch a Monitor */
        patch: operations["patchSystemEdaNokiaComV1alpha1NamespaceMonitors"];
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitors/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Monitor. */
        get: operations["getHistorySystemEdaNokiaComV1alpha1NamespaceMonitors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitorstates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitorstates in namespace */
        get: operations["listSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        put?: never;
        /** @description create a MonitorState */
        post: operations["createSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        /** Delete all instances of MonitorState in the specified namespace. */
        delete: operations["deleteAllSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitorstates/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of MonitorState that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitorstates/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified MonitorState.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        /** @description replace a MonitorState */
        put: operations["replaceSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        post?: never;
        /** @description delete the specified MonitorState */
        delete: operations["deleteSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        options?: never;
        head?: never;
        /** @description patch a MonitorState */
        patch: operations["patchSystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        trace?: never;
    };
    "/apps/system.eda.nokia.com/v1alpha1/namespaces/{namespace}/monitorstates/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced MonitorState. */
        get: operations["getHistorySystemEdaNokiaComV1alpha1NamespaceMonitorstates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description Monitor is the Schema for the monitors API */
        "com.nokia.eda.system.v1alpha1.Monitor": {
            /** @default system.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Monitor */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor_metadata"];
            /**
             * Specification
             * @description MonitorSpec defines the desired state of Monitor
             */
            spec: {
                /**
                 * CPU
                 * @description CPU monitoring for targets matching this Monitor.
                 */
                cpu?: {
                    /**
                     * Enabled
                     * @description Enable or disable CPU monitoring.
                     * @default true
                     */
                    enabled: boolean;
                    /**
                     * Thresholds
                     * @description Parameters relating to CPU utilization monitoring.
                     */
                    utilization?: {
                        /**
                         * Critical Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                         *     This value must be greater than the majorThreshold.
                         * @default 95
                         */
                        criticalThreshold: number;
                        /**
                         * Falling Delta
                         * @description The delta in which a triggered threshold must drop below to clear an alarm.
                         *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                         * @default 5
                         */
                        fallingDelta: number;
                        /**
                         * Major Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                         *     This value must be greater than the minorThreshold.
                         * @default 90
                         */
                        majorThreshold: number;
                        /**
                         * Minor Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                         * @default 80
                         */
                        minorThreshold: number;
                    };
                };
                /**
                 * Disk
                 * @description Disk monitoring for targets matching this Monitor.
                 */
                disk?: {
                    /**
                     * Enabled
                     * @description Enable or disable disk monitoring.
                     * @default true
                     */
                    enabled: boolean;
                    /**
                     * Thresholds
                     * @description Parameters relating to disk utilization monitoring.
                     */
                    utilization?: {
                        /**
                         * Critical Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                         *     This value must be greater than the majorThreshold.
                         * @default 95
                         */
                        criticalThreshold: number;
                        /**
                         * Falling Delta
                         * @description The delta in which a triggered threshold must drop below to clear an alarm.
                         *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                         * @default 5
                         */
                        fallingDelta: number;
                        /**
                         * Major Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                         *     This value must be greater than the minorThreshold.
                         * @default 90
                         */
                        majorThreshold: number;
                        /**
                         * Minor Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                         * @default 80
                         */
                        minorThreshold: number;
                    };
                };
                /**
                 * Memory
                 * @description Memory monitoring for targets matching this Monitor.
                 */
                memory?: {
                    /**
                     * Enabled
                     * @description Enable or disable memory monitoring.
                     * @default true
                     */
                    enabled: boolean;
                    /**
                     * Thresholds
                     * @description Parameters relating to memory utilization monitoring.
                     */
                    utilization?: {
                        /**
                         * Critical Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                         *     This value must be greater than the majorThreshold.
                         * @default 95
                         */
                        criticalThreshold: number;
                        /**
                         * Falling Delta
                         * @description The delta in which a triggered threshold must drop below to clear an alarm.
                         *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                         * @default 5
                         */
                        fallingDelta: number;
                        /**
                         * Major Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                         *     This value must be greater than the minorThreshold.
                         * @default 90
                         */
                        majorThreshold: number;
                        /**
                         * Minor Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                         * @default 80
                         */
                        minorThreshold: number;
                    };
                };
                /**
                 * Node Selector
                 * Format: labelselector
                 * @description Selector to use when including TopoNodes to monitor.
                 */
                nodeSelector?: string[];
                /**
                 * Nodes
                 * @description References to TopoNodes to monitor.
                 */
                nodes?: string[];
            };
            /**
             * Status
             * @description MonitorStatus defines the observed state of Monitor
             */
            readonly status?: {
                /**
                 * Nodes
                 * @description TopoNodes being monitored.
                 */
                nodes?: string[];
            };
        };
        /** @description MonitorAggregateState is the Schema for the monitoraggregatestates API */
        "com.nokia.eda.system.v1alpha1.MonitorAggregateState": {
            /** @default system.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default MonitorAggregateState */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState_metadata"];
            /**
             * Specification
             * @description MonitorAggregateStateSpec defines the desired state of MonitorAggregateState
             */
            spec: {
                /**
                 * Nodes
                 * @description List of TopoNodes monitored by this instance
                 */
                nodes?: string[];
            };
            /**
             * Status
             * @description MonitorAggregateStateStatus defines the observed state of MonitorAggregateState
             */
            readonly status?: Record<string, never>;
        };
        /** @description MonitorAggregateStateList is a list of monitoraggregatestates */
        "com.nokia.eda.system.v1alpha1.MonitorAggregateStateList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState"][];
            kind: string;
        };
        "com.nokia.eda.system.v1alpha1.MonitorAggregateState_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.system.v1alpha1.MonitorAggregateState_DeletedResources": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState_DeletedResourceEntry"][];
        "com.nokia.eda.system.v1alpha1.MonitorAggregateState_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description MonitorList is a list of monitors */
        "com.nokia.eda.system.v1alpha1.MonitorList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor"][];
            kind: string;
        };
        /** @description MonitorState is the Schema for the monitorstates API */
        "com.nokia.eda.system.v1alpha1.MonitorState": {
            /** @default system.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default MonitorState */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState_metadata"];
            /**
             * Specification
             * @description MonitorStateSpec defines the desired state of MonitorState
             */
            spec: {
                /** @description The spec of the input Monitor */
                monitorSpec: {
                    /**
                     * CPU
                     * @description CPU monitoring for targets matching this Monitor.
                     */
                    cpu?: {
                        /**
                         * Enabled
                         * @description Enable or disable CPU monitoring.
                         * @default true
                         */
                        enabled: boolean;
                        /**
                         * Thresholds
                         * @description Parameters relating to CPU utilization monitoring.
                         */
                        utilization?: {
                            /**
                             * Critical Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                             *     This value must be greater than the majorThreshold.
                             * @default 95
                             */
                            criticalThreshold: number;
                            /**
                             * Falling Delta
                             * @description The delta in which a triggered threshold must drop below to clear an alarm.
                             *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                             * @default 5
                             */
                            fallingDelta: number;
                            /**
                             * Major Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                             *     This value must be greater than the minorThreshold.
                             * @default 90
                             */
                            majorThreshold: number;
                            /**
                             * Minor Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                             * @default 80
                             */
                            minorThreshold: number;
                        };
                    };
                    /**
                     * Disk
                     * @description Disk monitoring for targets matching this Monitor.
                     */
                    disk?: {
                        /**
                         * Enabled
                         * @description Enable or disable disk monitoring.
                         * @default true
                         */
                        enabled: boolean;
                        /**
                         * Thresholds
                         * @description Parameters relating to disk utilization monitoring.
                         */
                        utilization?: {
                            /**
                             * Critical Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                             *     This value must be greater than the majorThreshold.
                             * @default 95
                             */
                            criticalThreshold: number;
                            /**
                             * Falling Delta
                             * @description The delta in which a triggered threshold must drop below to clear an alarm.
                             *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                             * @default 5
                             */
                            fallingDelta: number;
                            /**
                             * Major Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                             *     This value must be greater than the minorThreshold.
                             * @default 90
                             */
                            majorThreshold: number;
                            /**
                             * Minor Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                             * @default 80
                             */
                            minorThreshold: number;
                        };
                    };
                    /**
                     * Memory
                     * @description Memory monitoring for targets matching this Monitor.
                     */
                    memory?: {
                        /**
                         * Enabled
                         * @description Enable or disable memory monitoring.
                         * @default true
                         */
                        enabled: boolean;
                        /**
                         * Thresholds
                         * @description Parameters relating to memory utilization monitoring.
                         */
                        utilization?: {
                            /**
                             * Critical Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                             *     This value must be greater than the majorThreshold.
                             * @default 95
                             */
                            criticalThreshold: number;
                            /**
                             * Falling Delta
                             * @description The delta in which a triggered threshold must drop below to clear an alarm.
                             *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                             * @default 5
                             */
                            fallingDelta: number;
                            /**
                             * Major Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                             *     This value must be greater than the minorThreshold.
                             * @default 90
                             */
                            majorThreshold: number;
                            /**
                             * Minor Threshold
                             * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                             * @default 80
                             */
                            minorThreshold: number;
                        };
                    };
                    /**
                     * Node Selector
                     * Format: labelselector
                     * @description Selector to use when including TopoNodes to monitor.
                     */
                    nodeSelector?: string[];
                    /**
                     * Nodes
                     * @description References to TopoNodes to monitor.
                     */
                    nodes?: string[];
                };
                /** @description Reference to the TopoNode being monitored */
                node: string;
                /** @description The operating system of the TopoNode being monitored */
                operatingSystem: string;
                /** @description The version of the TopoNode being monitored */
                version: string;
            };
            /**
             * Status
             * @description MonitorStateStatus defines the observed state of MonitorState
             */
            readonly status?: Record<string, never>;
        };
        /** @description MonitorStateList is a list of monitorstates */
        "com.nokia.eda.system.v1alpha1.MonitorStateList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState"][];
            kind: string;
        };
        "com.nokia.eda.system.v1alpha1.MonitorState_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.system.v1alpha1.MonitorState_DeletedResources": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState_DeletedResourceEntry"][];
        "com.nokia.eda.system.v1alpha1.MonitorState_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        "com.nokia.eda.system.v1alpha1.Monitor_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.system.v1alpha1.Monitor_DeletedResources": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor_DeletedResourceEntry"][];
        "com.nokia.eda.system.v1alpha1.Monitor_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionSystemEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesSystemEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiSystemEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSystemEdaNokiaComV1alpha1Monitoraggregatestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSystemEdaNokiaComV1alpha1Monitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSystemEdaNokiaComV1alpha1Monitorstates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the MonitorAggregateState to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the MonitorAggregateState to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchSystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorAggregateState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistorySystemEdaNokiaComV1alpha1NamespaceMonitoraggregatestates: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the MonitorAggregateState to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Monitor to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Monitor to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchSystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistorySystemEdaNokiaComV1alpha1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Monitor to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorStateList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the MonitorState to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the MonitorState to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchSystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.system.v1alpha1.MonitorState"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistorySystemEdaNokiaComV1alpha1NamespaceMonitorstates: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the MonitorState to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
