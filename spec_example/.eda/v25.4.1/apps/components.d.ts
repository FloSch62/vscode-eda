/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/components.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from components.eda.nokia.com */
        get: operations["getVersionComponentsEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from components.eda.nokia.com/v1 */
        get: operations["getResourcesComponentsEdaNokiaComV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for components.eda.nokia.com v1 */
        get: operations["uiComponentsEdaNokiaComV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/chassis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list chassis */
        get: operations["listComponentsEdaNokiaComV1Chassis"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list components */
        get: operations["listComponentsEdaNokiaComV1Components"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/controlmodules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list controlmodules */
        get: operations["listComponentsEdaNokiaComV1Controlmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/fabricmodules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list fabricmodules */
        get: operations["listComponentsEdaNokiaComV1Fabricmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/fans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list fans */
        get: operations["listComponentsEdaNokiaComV1Fans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/interfacemodules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list interfacemodules */
        get: operations["listComponentsEdaNokiaComV1Interfacemodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/monitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitors */
        get: operations["listComponentsEdaNokiaComV1Monitors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/chassis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list chassis in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespaceChassis"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/chassis/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Chassis.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespaceChassis"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/chassis/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Chassis. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespaceChassis"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list components in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespaceComponents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/components/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Component.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespaceComponents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/components/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Component. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespaceComponents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/controlmodules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list controlmodules in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespaceControlmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/controlmodules/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified ControlModule.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespaceControlmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/controlmodules/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced ControlModule. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespaceControlmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/fabricmodules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list fabricmodules in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespaceFabricmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/fabricmodules/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified FabricModule.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespaceFabricmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/fabricmodules/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced FabricModule. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespaceFabricmodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/fans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list fans in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespaceFans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/fans/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Fan.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespaceFans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/fans/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Fan. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespaceFans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/interfacemodules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list interfacemodules in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespaceInterfacemodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/interfacemodules/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified InterfaceModule.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespaceInterfacemodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/interfacemodules/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced InterfaceModule. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespaceInterfacemodules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/monitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list monitors in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespaceMonitors"];
        put?: never;
        /** @description create a Monitor */
        post: operations["createComponentsEdaNokiaComV1NamespaceMonitors"];
        /** Delete all instances of Monitor in the specified namespace. */
        delete: operations["deleteAllComponentsEdaNokiaComV1NamespaceMonitors"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/monitors/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Monitor that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedComponentsEdaNokiaComV1NamespaceMonitors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/monitors/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Monitor.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespaceMonitors"];
        /** @description replace a Monitor */
        put: operations["replaceComponentsEdaNokiaComV1NamespaceMonitors"];
        post?: never;
        /** @description delete the specified Monitor */
        delete: operations["deleteComponentsEdaNokiaComV1NamespaceMonitors"];
        options?: never;
        head?: never;
        /** @description patch a Monitor */
        patch: operations["patchComponentsEdaNokiaComV1NamespaceMonitors"];
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/monitors/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Monitor. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespaceMonitors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/powersupplies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list powersupplies in namespace */
        get: operations["listComponentsEdaNokiaComV1NamespacePowersupplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/powersupplies/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified PowerSupply.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readComponentsEdaNokiaComV1NamespacePowersupplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/namespaces/{namespace}/powersupplies/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced PowerSupply. */
        get: operations["getHistoryComponentsEdaNokiaComV1NamespacePowersupplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/components.eda.nokia.com/v1/powersupplies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list powersupplies */
        get: operations["listComponentsEdaNokiaComV1Powersupplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description Chassis is the Schema for the chassis API */
        "com.nokia.eda.components.v1.Chassis": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Chassis */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.Chassis_metadata"];
            /**
             * Specification
             * @description ChassisSpec defines the desired state of Chassis
             */
            spec: Record<string, never>;
            /**
             * Status
             * @description ChassisStatus defines the observed state of Chassis
             */
            readonly status?: {
                /**
                 * Chassis MAC Address
                 * @description MAC Address of the Chassis
                 */
                chassisMacAddress?: string;
                /**
                 * Children
                 * @description References to children components
                 */
                children?: {
                    /**
                     * Name
                     * @description Reference to a child component
                     */
                    name?: string;
                    /**
                     * Type
                     * @description Type of the child component
                     * @enum {string}
                     */
                    type?: "Fan" | "FanTray" | "PowerSupply" | "PowerModule" | "PowerShelf" | "InterfaceModule" | "ControlModule" | "FabricModule" | "Chassis" | "Transceiver";
                }[];
                /**
                 * CLEI Code
                 * @description The CLEI code of this component
                 */
                commonLanguageEquipmentIdentifier?: string;
                /**
                 * Last Booted
                 * Format: date
                 * @description The date and time this component last booted
                 */
                lastBooted?: string;
                /**
                 * Last Change
                 * Format: date
                 * @description The date and time this component last changed operational state
                 */
                lastChange?: string;
                /**
                 * Manufactured Date
                 * Format: date
                 * @description The date this component was manufactured
                 */
                manufacturedDate?: string;
                /**
                 * Operational State
                 * @description Indicates the current operational state of this component.
                 * @enum {string}
                 */
                operationalState?: "Up" | "Down" | "Rebooting" | "Unknown" | "Starting" | "Empty";
                /**
                 * Part Number
                 * @description The discovered part number of this component
                 */
                partNumber?: string;
                /**
                 * Removable
                 * @description Indicates if this component is removable
                 */
                removable?: boolean;
                /**
                 * Serial Number
                 * @description The discovered serial number of this component
                 */
                serialNumber?: string;
                /**
                 * Target
                 * @description Target this component resides on.
                 */
                target?: string;
                /**
                 * Type
                 * @description Component type, as provided by the target
                 */
                type?: string;
            };
        };
        /** @description ChassisList is a list of chassis */
        "com.nokia.eda.components.v1.ChassisList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.Chassis"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.Chassis_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Component is the Schema for the components API */
        "com.nokia.eda.components.v1.Component": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Component */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.Component_metadata"];
            /**
             * Specification
             * @description ComponentSpec defines the desired state of Component
             */
            spec: {
                /**
                 * Node
                 * @description TopologyNode this Component resides on.
                 *     Indicates the operation in which to apply the configuration
                 */
                node: string;
                /**
                 * Slot
                 * @description Slot this Component resides in, unset for Components that do not have a slot or ID.
                 */
                slot?: string;
                /**
                 * Type
                 * @description Type of Component.
                 * @enum {string}
                 */
                type: "Fan" | "FanTray" | "PowerSupply" | "PowerModule" | "PowerShelf" | "InterfaceModule" | "ControlModule" | "FabricModule" | "Chassis" | "Transceiver";
            };
            /**
             * Status
             * @description ComponentStatus defines the observed state of Component
             */
            readonly status?: {
                /**
                 * Enabled
                 * @description The administrative status of this Component.
                 */
                enabled?: boolean;
                /**
                 * Last Change
                 * Format: date
                 * @description The date and time this Component last changed operational state
                 */
                lastChange?: string;
                /**
                 * Manufactured Date
                 * Format: date
                 * @description The date this Component was manufactured
                 */
                manufacturedDate?: string;
                /**
                 * Operational State
                 * @description Indicates the current operational state of this Component.
                 * @enum {string}
                 */
                operationalState?: "Up" | "Down" | "Rebooting" | "Unknown" | "Starting" | "Empty";
                /**
                 * Part Number
                 * @description The discovered part number of this Component
                 */
                partNumber?: string;
                /**
                 * Serial Number
                 * @description The discovered serial number of this Component
                 */
                serialNumber?: string;
                /**
                 * Type
                 * @description Component type, as provided by the node.
                 */
                type?: string;
            };
        };
        /** @description ComponentList is a list of components */
        "com.nokia.eda.components.v1.ComponentList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.Component"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.Component_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description ControlModule is the Schema for the controlmodules API */
        "com.nokia.eda.components.v1.ControlModule": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default ControlModule */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.ControlModule_metadata"];
            /**
             * Specification
             * @description ControlModuleSpec defines the desired state of ControlModule
             */
            spec: Record<string, never>;
            /**
             * Status
             * @description ControlModuleStatus defines the observed state of ControlModule
             */
            readonly status?: {
                /**
                 * CLEI Code
                 * @description The CLEI code of this component
                 */
                commonLanguageEquipmentIdentifier?: string;
                /**
                 * Last Booted
                 * Format: date
                 * @description The date and time this component last booted
                 */
                lastBooted?: string;
                /**
                 * Last Change
                 * Format: date
                 * @description The date and time this component last changed operational state
                 */
                lastChange?: string;
                /**
                 * Locator Enabled
                 * @description Indicates if the locator LED for the component is active
                 */
                locatorEnabled?: boolean;
                /**
                 * Manufactured Date
                 * Format: date
                 * @description The date this component was manufactured
                 */
                manufacturedDate?: string;
                /**
                 * Operational State
                 * @description Indicates the current operational state of this component.
                 * @enum {string}
                 */
                operationalState?: "Up" | "Down" | "Rebooting" | "Unknown" | "Starting" | "Empty";
                /**
                 * Parent
                 * @description Reference to a parent component
                 */
                parent?: string;
                /**
                 * Parent Type
                 * @description Type of the parent component
                 * @enum {string}
                 */
                parentType?: "Fan" | "FanTray" | "PowerSupply" | "PowerModule" | "PowerShelf" | "InterfaceModule" | "ControlModule" | "FabricModule" | "Chassis" | "Transceiver";
                /**
                 * Part Number
                 * @description The discovered part number of this component
                 */
                partNumber?: string;
                /**
                 * Removable
                 * @description Indicates if this component is removable
                 */
                removable?: boolean;
                /**
                 * Role
                 * @description Role of the control module
                 * @enum {string}
                 */
                role?: "Active" | "Standby";
                /**
                 * Serial Number
                 * @description The discovered serial number of this component
                 */
                serialNumber?: string;
                /**
                 * Slot
                 * @description Slot this component resides in, unset for components that do not have a slot or ID
                 */
                slot?: string;
                /**
                 * Software Version
                 * @description Version string of the software running on this component
                 */
                softwareVersion?: string;
                /**
                 * Target
                 * @description Target this component resides on.
                 */
                target?: string;
                /**
                 * Temperature
                 * @description Temperature information for this component
                 */
                temperature?: {
                    /**
                     * Alarm State
                     * @description The temperature alarm state, as reported by the component
                     */
                    alarmState?: boolean;
                    /**
                     * Instant
                     * @description The current temperature of this component
                     */
                    instant?: number;
                    /**
                     * Margin
                     * @description The margin temperature of this component
                     */
                    margin?: number;
                    /**
                     * Maximum
                     * @description The maximum temperature of this component
                     */
                    maximum?: number;
                    /**
                     * Threshold
                     * @description The threshold temperature of this component
                     */
                    threshold?: number;
                };
                /**
                 * Type
                 * @description Component type, as provided by the target
                 */
                type?: string;
            };
        };
        /** @description ControlModuleList is a list of controlmodules */
        "com.nokia.eda.components.v1.ControlModuleList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.ControlModule"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.ControlModule_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description FabricModule is the Schema for the fabricmodules API */
        "com.nokia.eda.components.v1.FabricModule": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default FabricModule */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.FabricModule_metadata"];
            /**
             * Specification
             * @description FabricModuleSpec defines the desired state of FabricModule
             */
            spec: Record<string, never>;
            /**
             * Status
             * @description FabricModuleStatus defines the observed state of FabricModule
             */
            readonly status?: {
                /**
                 * CLEI Code
                 * @description The CLEI code of this component
                 */
                commonLanguageEquipmentIdentifier?: string;
                /**
                 * Last Booted
                 * Format: date
                 * @description The date and time this component last booted
                 */
                lastBooted?: string;
                /**
                 * Last Change
                 * Format: date
                 * @description The date and time this component last changed operational state
                 */
                lastChange?: string;
                /**
                 * Locator Enabled
                 * @description Indicates if the locator LED for the component is active
                 */
                locatorEnabled?: boolean;
                /**
                 * Manufactured Date
                 * Format: date
                 * @description The date this component was manufactured
                 */
                manufacturedDate?: string;
                /**
                 * Operational State
                 * @description Indicates the current operational state of this component.
                 * @enum {string}
                 */
                operationalState?: "Up" | "Down" | "Rebooting" | "Unknown" | "Starting" | "Empty";
                /**
                 * Parent
                 * @description Reference to a parent component
                 */
                parent?: string;
                /**
                 * Parent Type
                 * @description Type of the parent component
                 * @enum {string}
                 */
                parentType?: "Fan" | "FanTray" | "PowerSupply" | "PowerModule" | "PowerShelf" | "InterfaceModule" | "ControlModule" | "FabricModule" | "Chassis" | "Transceiver";
                /**
                 * Part Number
                 * @description The discovered part number of this component
                 */
                partNumber?: string;
                /**
                 * Removable
                 * @description Indicates if this component is removable
                 */
                removable?: boolean;
                /**
                 * Serial Number
                 * @description The discovered serial number of this component
                 */
                serialNumber?: string;
                /**
                 * Slot
                 * @description Slot this component resides in, unset for components that do not have a slot or ID
                 */
                slot?: string;
                /**
                 * Software Version
                 * @description Version string of the software running on this component
                 */
                softwareVersion?: string;
                /**
                 * Target
                 * @description Target this component resides on.
                 */
                target?: string;
                /**
                 * Temperature
                 * @description Temperature information for this component
                 */
                temperature?: {
                    /**
                     * Alarm State
                     * @description The temperature alarm state, as reported by the component
                     */
                    alarmState?: boolean;
                    /**
                     * Instant
                     * @description The current temperature of this component
                     */
                    instant?: number;
                    /**
                     * Margin
                     * @description The margin temperature of this component
                     */
                    margin?: number;
                    /**
                     * Maximum
                     * @description The maximum temperature of this component
                     */
                    maximum?: number;
                    /**
                     * Threshold
                     * @description The threshold temperature of this component
                     */
                    threshold?: number;
                };
                /**
                 * Type
                 * @description Component type, as provided by the target
                 */
                type?: string;
            };
        };
        /** @description FabricModuleList is a list of fabricmodules */
        "com.nokia.eda.components.v1.FabricModuleList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.FabricModule"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.FabricModule_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Fan is the Schema for the fans API */
        "com.nokia.eda.components.v1.Fan": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Fan */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.Fan_metadata"];
            /**
             * Specification
             * @description FanSpec defines the desired state of Fan
             */
            spec: Record<string, never>;
            /**
             * Status
             * @description FanStatus defines the observed state of Fan
             */
            readonly status?: {
                /**
                 * CLEI Code
                 * @description The CLEI code of this component
                 */
                commonLanguageEquipmentIdentifier?: string;
                /**
                 * Last Booted
                 * Format: date
                 * @description The date and time this component last booted
                 */
                lastBooted?: string;
                /**
                 * Last Change
                 * Format: date
                 * @description The date and time this component last changed operational state
                 */
                lastChange?: string;
                /**
                 * Locator Enabled
                 * @description Indicates if the locator LED for the component is active
                 */
                locatorEnabled?: boolean;
                /**
                 * Manufactured Date
                 * Format: date
                 * @description The date this component was manufactured
                 */
                manufacturedDate?: string;
                /**
                 * Operational State
                 * @description Indicates the current operational state of this component.
                 * @enum {string}
                 */
                operationalState?: "Up" | "Down" | "Rebooting" | "Unknown" | "Starting" | "Empty";
                /**
                 * Parent
                 * @description Reference to a parent component
                 */
                parent?: string;
                /**
                 * Parent Type
                 * @description Type of the parent component
                 * @enum {string}
                 */
                parentType?: "Fan" | "FanTray" | "PowerSupply" | "PowerModule" | "PowerShelf" | "InterfaceModule" | "ControlModule" | "FabricModule" | "Chassis" | "Transceiver";
                /**
                 * Part Number
                 * @description The discovered part number of this component
                 */
                partNumber?: string;
                /**
                 * Removable
                 * @description Indicates if this component is removable
                 */
                removable?: boolean;
                /**
                 * Serial Number
                 * @description The discovered serial number of this component
                 */
                serialNumber?: string;
                /**
                 * Slot
                 * @description Slot this component resides in, unset for components that do not have a slot or ID
                 */
                slot?: string;
                /**
                 * Target
                 * @description Target this component resides on.
                 */
                target?: string;
                /**
                 * Type
                 * @description Component type, as provided by the target
                 */
                type?: string;
            };
        };
        /** @description FanList is a list of fans */
        "com.nokia.eda.components.v1.FanList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.Fan"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.Fan_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description InterfaceModule is the Schema for the interfacemodules API */
        "com.nokia.eda.components.v1.InterfaceModule": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default InterfaceModule */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.InterfaceModule_metadata"];
            /**
             * Specification
             * @description InterfaceModuleSpec defines the desired state of InterfaceModule
             */
            spec: Record<string, never>;
            /**
             * Status
             * @description InterfaceModuleStatus defines the observed state of InterfaceModule
             */
            readonly status?: {
                /**
                 * CLEI Code
                 * @description The CLEI code of this component
                 */
                commonLanguageEquipmentIdentifier?: string;
                /**
                 * Last Booted
                 * Format: date
                 * @description The date and time this component last booted
                 */
                lastBooted?: string;
                /**
                 * Last Change
                 * Format: date
                 * @description The date and time this component last changed operational state
                 */
                lastChange?: string;
                /**
                 * Locator Enabled
                 * @description Indicates if the locator LED for the component is active
                 */
                locatorEnabled?: boolean;
                /**
                 * Manufactured Date
                 * Format: date
                 * @description The date this component was manufactured
                 */
                manufacturedDate?: string;
                /**
                 * Operational State
                 * @description Indicates the current operational state of this component.
                 * @enum {string}
                 */
                operationalState?: "Up" | "Down" | "Rebooting" | "Unknown" | "Starting" | "Empty";
                /**
                 * Parent
                 * @description Reference to a parent component
                 */
                parent?: string;
                /**
                 * Parent Type
                 * @description Type of the parent component
                 * @enum {string}
                 */
                parentType?: "Fan" | "FanTray" | "PowerSupply" | "PowerModule" | "PowerShelf" | "InterfaceModule" | "ControlModule" | "FabricModule" | "Chassis" | "Transceiver";
                /**
                 * Part Number
                 * @description The discovered part number of this component
                 */
                partNumber?: string;
                /**
                 * Removable
                 * @description Indicates if this component is removable
                 */
                removable?: boolean;
                /**
                 * Serial Number
                 * @description The discovered serial number of this component
                 */
                serialNumber?: string;
                /**
                 * Slot
                 * @description Slot this component resides in, unset for components that do not have a slot or ID
                 */
                slot?: string;
                /**
                 * Software Version
                 * @description Version string of the software running on this component
                 */
                softwareVersion?: string;
                /**
                 * Target
                 * @description Target this component resides on.
                 */
                target?: string;
                /**
                 * Temperature
                 * @description Temperature information for this component
                 */
                temperature?: {
                    /**
                     * Alarm State
                     * @description The temperature alarm state, as reported by the component
                     */
                    alarmState?: boolean;
                    /**
                     * Instant
                     * @description The current temperature of this component
                     */
                    instant?: number;
                    /**
                     * Margin
                     * @description The margin temperature of this component
                     */
                    margin?: number;
                    /**
                     * Maximum
                     * @description The maximum temperature of this component
                     */
                    maximum?: number;
                    /**
                     * Threshold
                     * @description The threshold temperature of this component
                     */
                    threshold?: number;
                };
                /**
                 * Type
                 * @description Component type, as provided by the target
                 */
                type?: string;
            };
        };
        /** @description InterfaceModuleList is a list of interfacemodules */
        "com.nokia.eda.components.v1.InterfaceModuleList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.InterfaceModule"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.InterfaceModule_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description Monitor is the Schema for the monitors API */
        "com.nokia.eda.components.v1.Monitor": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default Monitor */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.Monitor_metadata"];
            /**
             * Specification
             * @description MonitorSpec defines the desired state of Monitor
             */
            spec: {
                /**
                 * CPU
                 * @description CPU monitoring for targets matching this Monitor.
                 */
                cpu?: {
                    /**
                     * Enabled
                     * @description Enable or disable CPU monitoring.
                     * @default true
                     */
                    enabled: boolean;
                    /**
                     * Thresholds
                     * @description Parameters relating to CPU utilization monitoring.
                     */
                    utilization?: {
                        /**
                         * Critical Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                         *     This value must be greater than the majorThreshold.
                         * @default 95
                         */
                        criticalThreshold: number;
                        /**
                         * Falling Delta
                         * @description The delta in which a triggered threshold must drop below to clear an alarm.
                         *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                         * @default 5
                         */
                        fallingDelta: number;
                        /**
                         * Major Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                         *     This value must be greater than the minorThreshold.
                         * @default 90
                         */
                        majorThreshold: number;
                        /**
                         * Minor Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                         * @default 80
                         */
                        minorThreshold: number;
                    };
                };
                /**
                 * Memory
                 * @description Memory monitoring for targets matching this Monitor.
                 */
                memory?: {
                    /**
                     * Enabled
                     * @description Enable or disable memory monitoring.
                     * @default true
                     */
                    enabled: boolean;
                    /**
                     * Thresholds
                     * @description Parameters relating to memory utilization monitoring.
                     */
                    utilization?: {
                        /**
                         * Critical Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                         *     This value must be greater than the majorThreshold.
                         * @default 95
                         */
                        criticalThreshold: number;
                        /**
                         * Falling Delta
                         * @description The delta in which a triggered threshold must drop below to clear an alarm.
                         *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                         * @default 5
                         */
                        fallingDelta: number;
                        /**
                         * Major Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                         *     This value must be greater than the minorThreshold.
                         * @default 90
                         */
                        majorThreshold: number;
                        /**
                         * Minor Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                         * @default 80
                         */
                        minorThreshold: number;
                    };
                };
                /**
                 * Target Selector
                 * Format: labelselector
                 * @description Selector to use when including targets to monitor.
                 */
                targetSelector?: string[];
                /**
                 * Targets
                 * @description References to targets to monitor.
                 */
                targets?: string[];
                /**
                 * Volume
                 * @description Volume monitoring for targets matching this Monitor.
                 */
                volume?: {
                    /**
                     * Enabled
                     * @description Enable or disable volume monitoring.
                     * @default true
                     */
                    enabled: boolean;
                    /**
                     * Thresholds
                     * @description Parameters relating to volume utilization monitoring.
                     */
                    utilization?: {
                        /**
                         * Critical Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a critical alarm.
                         *     This value must be greater than the majorThreshold.
                         * @default 95
                         */
                        criticalThreshold: number;
                        /**
                         * Falling Delta
                         * @description The delta in which a triggered threshold must drop below to clear an alarm.
                         *     For example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.
                         * @default 5
                         */
                        fallingDelta: number;
                        /**
                         * Major Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a major alarm.
                         *     This value must be greater than the minorThreshold.
                         * @default 90
                         */
                        majorThreshold: number;
                        /**
                         * Minor Threshold
                         * @description The minimum average utilization over the last 1 minute to trigger a minor alarm.
                         * @default 80
                         */
                        minorThreshold: number;
                    };
                };
            };
            /**
             * Status
             * @description MonitorStatus defines the observed state of Monitor
             */
            readonly status?: {
                /**
                 * Targets
                 * @description Targets being monitored.
                 */
                targets?: string[];
            };
        };
        /** @description MonitorList is a list of monitors */
        "com.nokia.eda.components.v1.MonitorList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.Monitor"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.Monitor_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.components.v1.Monitor_DeletedResources": components["schemas"]["com.nokia.eda.components.v1.Monitor_DeletedResourceEntry"][];
        "com.nokia.eda.components.v1.Monitor_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
        /** @description PowerSupply is the Schema for the powersupplies API */
        "com.nokia.eda.components.v1.PowerSupply": {
            /** @default components.eda.nokia.com/v1 */
            apiVersion: string;
            /** @default PowerSupply */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.components.v1.PowerSupply_metadata"];
            /**
             * Specification
             * @description PowerSupplySpec defines the desired state of PowerSupply
             */
            spec: {
                /** @description INSERT ADDITIONAL SPEC FIELDS - define desired state of cluster
                 *     Important: Run "edabuilder generate" to regenerate code after modifying this file */
                foo: string;
            };
            /**
             * Status
             * @description PowerSupplyStatus defines the observed state of PowerSupply
             */
            readonly status?: {
                /**
                 * CLEI Code
                 * @description The CLEI code of this component
                 */
                commonLanguageEquipmentIdentifier?: string;
                /**
                 * Last Booted
                 * Format: date
                 * @description The date and time this component last booted
                 */
                lastBooted?: string;
                /**
                 * Last Change
                 * Format: date
                 * @description The date and time this component last changed operational state
                 */
                lastChange?: string;
                /**
                 * Locator Enabled
                 * @description Indicates if the locator LED for the component is active
                 */
                locatorEnabled?: boolean;
                /**
                 * Manufactured Date
                 * Format: date
                 * @description The date this component was manufactured
                 */
                manufacturedDate?: string;
                /**
                 * Operational State
                 * @description Indicates the current operational state of this component.
                 * @enum {string}
                 */
                operationalState?: "Up" | "Down" | "Rebooting" | "Unknown" | "Starting" | "Empty";
                /**
                 * Parent
                 * @description Reference to a parent component
                 */
                parent?: string;
                /**
                 * Parent Type
                 * @description Type of the parent component
                 * @enum {string}
                 */
                parentType?: "Fan" | "FanTray" | "PowerSupply" | "PowerModule" | "PowerShelf" | "InterfaceModule" | "ControlModule" | "FabricModule" | "Chassis" | "Transceiver";
                /**
                 * Part Number
                 * @description The discovered part number of this component
                 */
                partNumber?: string;
                /**
                 * Removable
                 * @description Indicates if this component is removable
                 */
                removable?: boolean;
                /**
                 * Serial Number
                 * @description The discovered serial number of this component
                 */
                serialNumber?: string;
                /**
                 * Slot
                 * @description Slot this component resides in, unset for components that do not have a slot or ID
                 */
                slot?: string;
                /**
                 * Software Version
                 * @description Version string of the software running on this component
                 */
                softwareVersion?: string;
                /**
                 * Target
                 * @description Target this component resides on.
                 */
                target?: string;
                /**
                 * Temperature
                 * @description Temperature information for this component
                 */
                temperature?: {
                    /**
                     * Alarm State
                     * @description The temperature alarm state, as reported by the component
                     */
                    alarmState?: boolean;
                    /**
                     * Instant
                     * @description The current temperature of this component
                     */
                    instant?: number;
                    /**
                     * Margin
                     * @description The margin temperature of this component
                     */
                    margin?: number;
                    /**
                     * Maximum
                     * @description The maximum temperature of this component
                     */
                    maximum?: number;
                    /**
                     * Threshold
                     * @description The threshold temperature of this component
                     */
                    threshold?: number;
                };
                /**
                 * Type
                 * @description Component type, as provided by the target
                 */
                type?: string;
            };
        };
        /** @description PowerSupplyList is a list of powersupplies */
        "com.nokia.eda.components.v1.PowerSupplyList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.components.v1.PowerSupply"][];
            kind: string;
        };
        "com.nokia.eda.components.v1.PowerSupply_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionComponentsEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesComponentsEdaNokiaComV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiComponentsEdaNokiaComV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Chassis: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.ChassisList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Components: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.ComponentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Controlmodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.ControlModuleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Fabricmodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.FabricModuleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Fans: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.FanList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Interfacemodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.InterfaceModuleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Monitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.MonitorList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespaceChassis: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.ChassisList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespaceChassis: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Chassis to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Chassis"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespaceChassis: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Chassis to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespaceComponents: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.ComponentList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespaceComponents: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Component to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Component"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespaceComponents: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Component to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespaceControlmodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.ControlModuleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespaceControlmodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the ControlModule to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.ControlModule"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespaceControlmodules: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the ControlModule to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespaceFabricmodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.FabricModuleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespaceFabricmodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the FabricModule to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.FabricModule"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespaceFabricmodules: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the FabricModule to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespaceFans: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.FanList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespaceFans: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Fan to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Fan"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespaceFans: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Fan to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespaceInterfacemodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.InterfaceModuleList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespaceInterfacemodules: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the InterfaceModule to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.InterfaceModule"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespaceInterfacemodules: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the InterfaceModule to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.MonitorList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.components.v1.Monitor"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.MonitorList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Monitor_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Monitor to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.components.v1.Monitor"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Monitor to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.Monitor"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespaceMonitors: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Monitor to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1NamespacePowersupplies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.PowerSupplyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readComponentsEdaNokiaComV1NamespacePowersupplies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the PowerSupply to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.PowerSupply"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryComponentsEdaNokiaComV1NamespacePowersupplies: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the PowerSupply to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listComponentsEdaNokiaComV1Powersupplies: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.components.v1.PowerSupplyList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
