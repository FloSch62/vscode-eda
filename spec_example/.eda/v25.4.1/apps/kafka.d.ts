/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps/kafka.eda.nokia.com": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list versions available from kafka.eda.nokia.com */
        get: operations["getVersionKafkaEdaNokiaCom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list resources available from kafka.eda.nokia.com/v1alpha1 */
        get: operations["getResourcesKafkaEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/_ui/{pathname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description get UI specification for kafka.eda.nokia.com v1alpha1 */
        get: operations["uiKafkaEdaNokiaComV1alpha1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list clusterproducers */
        get: operations["listKafkaEdaNokiaComV1alpha1Clusterproducers"];
        put?: never;
        /** @description create a non-namespaced ClusterProducer */
        post: operations["createKafkaEdaNokiaComV1alpha1Clusterproducers"];
        /** @description Delete all instances of ClusterProducer.  If ClusterProducer is a namespaced resource, all instances in all namespaces will
         *     be deleted, and this is restricted to users with the system-administrator role.
         *     If a non-namespaced ClusterProducer, it deletes all instances of that non-namespaced resource. */
        delete: operations["deleteAllKafkaEdaNokiaComV1alpha1Clusterproducers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of ClusterProducer that have been deleted. */
        get: operations["getDeletedKafkaEdaNokiaComV1alpha1Clusterproducers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified non-namespaced ClusterProducer.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readKafkaEdaNokiaComV1alpha1Clusterproducers"];
        /** @description replace a non-namespaced ClusterProducer */
        put: operations["replaceKafkaEdaNokiaComV1alpha1Clusterproducers"];
        post?: never;
        /** @description delete the specified non-namespaced ClusterProducer */
        delete: operations["deleteKafkaEdaNokiaComV1alpha1Clusterproducers"];
        options?: never;
        head?: never;
        /** @description patch a non-namespaced ClusterProducer */
        patch: operations["patchKafkaEdaNokiaComV1alpha1Clusterproducers"];
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/clusterproducers/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified non-namespaced ClusterProducer. */
        get: operations["getHistoryKafkaEdaNokiaComV1alpha1Clusterproducers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list producers in namespace */
        get: operations["listKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        put?: never;
        /** @description create a Producer */
        post: operations["createKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        /** Delete all instances of Producer in the specified namespace. */
        delete: operations["deleteAllKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers/_deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the instances of Producer that have been deleted that existed in the specified namespace. */
        get: operations["getDeletedKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read the specified Producer.  If a git hash query parameter
         *     is supplied, the resource as it existed at the time of the git hash
         *     will be returned. Streaming is not supported when a particular revision
         *     is asked for. */
        get: operations["readKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        /** @description replace a Producer */
        put: operations["replaceKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        post?: never;
        /** @description delete the specified Producer */
        delete: operations["deleteKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        options?: never;
        head?: never;
        /** @description patch a Producer */
        patch: operations["patchKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/namespaces/{namespace}/producers/{name}/_revs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision history for the specified namespaced Producer. */
        get: operations["getHistoryKafkaEdaNokiaComV1alpha1NamespaceProducers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/kafka.eda.nokia.com/v1alpha1/producers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list producers */
        get: operations["listKafkaEdaNokiaComV1alpha1Producers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppGroup: {
            apiVersion?: string;
            kind?: string;
            name?: string;
            preferredVersion?: components["schemas"]["AppGroupVersion"];
            versions?: components["schemas"]["AppGroupVersion"][];
        };
        AppGroupVersion: {
            groupVersion?: string;
            version?: string;
        };
        /** Wrapper for index information inside an error. */
        ErrorIndex: {
            /** Format: int64 */
            index?: number;
        };
        ErrorItem: {
            error?: Record<string, never>;
            type?: string;
        };
        /** @description Generic error response for REST APIs */
        ErrorResponse: {
            /**
             * Format: int64
             * @description the numeric HTTP error code for the response.
             */
            code: number;
            /** @description The optional details of the error response. */
            details?: string;
            /** @description Dictionary/map of associated data/information relevant to the error.
             *     The error "message" may contain {{name}} escapes that should be substituted
             *     with information from this dictionary. */
            dictionary?: {
                [key: string]: unknown;
            };
            /** @description Collection of errors in cases where more than one exists. This needs to be
             *     flexible so we can support multiple formats */
            errors?: components["schemas"]["ErrorItem"][];
            index?: components["schemas"]["ErrorIndex"];
            /**
             * Format: int64
             * @description Internal error code in cases where we don't have an array of errors
             */
            internal?: number;
            /** @description The basic text error message for the error response. */
            message: string;
            /** @description Reference to the error source. Should typically be the URI of the request */
            ref?: string;
            /** @description URI pointing at a document that describes the error and mitigation steps
             *     If there is no document, point to the RFC for the HTTP error code */
            type?: string;
        };
        K8SPatchOp: {
            from?: string;
            op: string;
            path: string;
            value?: Record<string, never>;
            "x-permissive"?: boolean;
        };
        Patch: components["schemas"]["K8SPatchOp"][];
        Resource: {
            kind?: string;
            name?: string;
            namespaced?: boolean;
            readOnly?: boolean;
            singularName?: string;
            uiCategory?: string;
        };
        ResourceHistory: components["schemas"]["ResourceHistoryEntry"][];
        ResourceHistoryEntry: {
            author?: string;
            changeType?: string;
            commitTime?: string;
            hash?: string;
            message?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        ResourceList: {
            apiVersion?: string;
            groupVersion?: string;
            kind?: string;
            resources?: components["schemas"]["Resource"][];
        };
        /** Status is a return value for calls that don't return other objects. */
        Status: {
            apiVersion?: string;
            details?: components["schemas"]["StatusDetails"];
            kind?: string;
            string?: string;
        };
        StatusDetails: {
            group?: string;
            kind?: string;
            name?: string;
        };
        UIResult: string;
        /** @description ClusterProducer is the Schema for the clusterproducers API */
        "com.nokia.eda.kafka.v1alpha1.ClusterProducer": {
            /** @default kafka.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default ClusterProducer */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer_metadata"];
            /**
             * Specification
             * @description ClusterProducerSpec defines the desired state of ClusterProducer
             */
            spec: {
                /**
                 * Brokers
                 * @description Comma separated Kafka brokers list
                 */
                brokers: string;
                /**
                 * Compression Codec
                 * @description Data compression codec
                 * @default none
                 * @enum {string}
                 */
                "compression-codec": "none" | "gzip" | "snappy" | "zstd" | "lz4";
                /**
                 * Exports
                 * @description Exports is the list of paths to be exported as well as the topic and mode for each.
                 */
                exports: {
                    /**
                     * Fields
                     * @description list of fields to be exported from the configured EDB table.
                     */
                    fields?: string[];
                    /**
                     * Mode
                     * @description Export Mode
                     * @default on-change
                     * @enum {string}
                     */
                    mode: "on-change" | "periodic" | "periodic-on-change";
                    /**
                     * Path
                     * @description The EDB path to export, in the format '.namespace.node.srl.interface'
                     */
                    path: string;
                    /**
                     * Period
                     * @description Export Period. A 1s minimum is enforced.
                     * @default 10s
                     */
                    period: string;
                    /**
                     * Topic
                     * @description A topic name to which the producer must write
                     *     updates from this export path
                     */
                    topic: string;
                    /**
                     * Where
                     * @description A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.
                     */
                    where?: string;
                }[];
                /**
                 * Flush Frequency
                 * @description The best-effort frequency of flushes
                 */
                "flush-frequency"?: string;
                /**
                 * Max Retry
                 * @description The total number of times to retry sending a message
                 * @default 3
                 */
                "max-retry": number;
                /**
                 * Required Acks
                 * @description Number of replica acknowledgements the broker must see before responding
                 * @default no-response
                 * @enum {string}
                 */
                "required-acks": "no-response" | "wait-for-local" | "wait-for-all";
                /**
                 * SASL
                 * @description Kafka SASL configuration
                 */
                sasl?: {
                    /**
                     * Mechanism
                     * @description SASL Mechanism
                     * @default plain
                     * @enum {string}
                     */
                    mechanism: "plain" | "scram-sha-256" | "scram-sha-512" | "oauthbearer";
                    /**
                     * Password
                     * @description SASL password
                     */
                    password?: string;
                    /**
                     * TokenURL
                     * @description token url for OAUTHBEARER SASL mechanism
                     */
                    "token-url"?: string;
                    /**
                     * User
                     * @description SASL user name
                     */
                    user?: string;
                };
                /**
                 * Sync Producer
                 * @description Start a sync producer
                 */
                "sync-producer"?: boolean;
                /**
                 * Timeout
                 * @description Kafka producer timeout
                 * @default 10s
                 */
                timeout: string;
                /**
                 * TLS
                 * @description Kafka TLS configuration
                 */
                tls?: {
                    /**
                     * CA
                     * @description TLS Certificate Authority file path
                     */
                    "ca-file"?: string;
                    /**
                     * Certificate
                     * @description TLS Certificate file path
                     */
                    "cert-file"?: string;
                    /**
                     * Key
                     * @description TLS Key file path
                     */
                    "key-file"?: string;
                    /**
                     * Skip Verify
                     * @description Skip verifying the server certificate
                     */
                    "skip-verify"?: boolean;
                };
            };
            /**
             * Status
             * @description ClusterProducerStatus defines the observed state of ClusterProducer
             */
            readonly status?: Record<string, never>;
        };
        /** @description ClusterProducerList is a list of clusterproducers */
        "com.nokia.eda.kafka.v1alpha1.ClusterProducerList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer"][];
            kind: string;
        };
        "com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResources": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResourceEntry"][];
        "com.nokia.eda.kafka.v1alpha1.ClusterProducer_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
        };
        /** @description Producer is the Schema for the producers API */
        "com.nokia.eda.kafka.v1alpha1.Producer": {
            /** @default kafka.eda.nokia.com/v1alpha1 */
            apiVersion: string;
            /** @default Producer */
            kind: string;
            metadata: components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer_metadata"];
            /**
             * Specification
             * @description ProducerSpec defines the desired state of Producer
             */
            spec: {
                /**
                 * Brokers
                 * @description Comma separated Kafka brokers list
                 */
                brokers: string;
                /**
                 * Compression Codec
                 * @description Data compression codec
                 * @default none
                 * @enum {string}
                 */
                "compression-codec": "none" | "gzip" | "snappy" | "zstd" | "lz4";
                /**
                 * Exports
                 * @description Exports is the list of paths to be exported as well as the topic and mode for each.
                 */
                exports: {
                    /**
                     * Fields
                     * @description list of fields to be exported from the configured EDB table.
                     */
                    fields?: string[];
                    /**
                     * Mode
                     * @description Export Mode
                     * @default on-change
                     * @enum {string}
                     */
                    mode: "on-change" | "periodic" | "periodic-on-change";
                    /**
                     * Path
                     * @description The EDB path to export, in the format '.namespace.node.srl.interface'
                     */
                    path: string;
                    /**
                     * Period
                     * @description Export Period. A 1s minimum is enforced.
                     * @default 10s
                     */
                    period: string;
                    /**
                     * Topic
                     * @description A topic name to which the producer must write
                     *     updates from this export path
                     */
                    topic: string;
                    /**
                     * Where
                     * @description A where clause to use for the query, e.g. 'oper-state = down'. You can omit enclosing parentheses.
                     */
                    where?: string;
                }[];
                /**
                 * Flush Frequency
                 * @description The best-effort frequency of flushes
                 */
                "flush-frequency"?: string;
                /**
                 * Max Retry
                 * @description The total number of times to retry sending a message
                 * @default 3
                 */
                "max-retry": number;
                /**
                 * Required Acks
                 * @description Number of replica acknowledgements the broker must see before responding
                 * @default no-response
                 * @enum {string}
                 */
                "required-acks": "no-response" | "wait-for-local" | "wait-for-all";
                /**
                 * SASL
                 * @description Kafka SASL configuration
                 */
                sasl?: {
                    /**
                     * Mechanism
                     * @description SASL Mechanism
                     * @default plain
                     * @enum {string}
                     */
                    mechanism: "plain" | "scram-sha-256" | "scram-sha-512" | "oauthbearer";
                    /**
                     * Password
                     * @description SASL password
                     */
                    password?: string;
                    /**
                     * TokenURL
                     * @description token url for OAUTHBEARER SASL mechanism
                     */
                    "token-url"?: string;
                    /**
                     * User
                     * @description SASL user name
                     */
                    user?: string;
                };
                /**
                 * Sync Producer
                 * @description Start a sync producer
                 */
                "sync-producer"?: boolean;
                /**
                 * Timeout
                 * @description Kafka producer timeout
                 * @default 10s
                 */
                timeout: string;
                /**
                 * TLS
                 * @description Kafka TLS configuration
                 */
                tls?: {
                    /**
                     * CA
                     * @description TLS Certificate Authority file path
                     */
                    "ca-file"?: string;
                    /**
                     * Certificate
                     * @description TLS Certificate file path
                     */
                    "cert-file"?: string;
                    /**
                     * Key
                     * @description TLS Key file path
                     */
                    "key-file"?: string;
                    /**
                     * Skip Verify
                     * @description Skip verifying the server certificate
                     */
                    "skip-verify"?: boolean;
                };
            };
            /**
             * Status
             * @description ProducerStatus defines the observed state of Producer
             */
            readonly status?: Record<string, never>;
        };
        /** @description ProducerList is a list of producers */
        "com.nokia.eda.kafka.v1alpha1.ProducerList": {
            apiVersion: string;
            items?: components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer"][];
            kind: string;
        };
        "com.nokia.eda.kafka.v1alpha1.Producer_DeletedResourceEntry": {
            commitTime?: string;
            hash?: string;
            name?: string;
            namespace?: string;
            /** Format: uint64 */
            transactionId?: number;
        };
        "com.nokia.eda.kafka.v1alpha1.Producer_DeletedResources": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer_DeletedResourceEntry"][];
        "com.nokia.eda.kafka.v1alpha1.Producer_metadata": {
            annotations?: {
                [key: string]: string;
            };
            labels?: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getVersionKafkaEdaNokiaCom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppGroup"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getResourcesKafkaEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    uiKafkaEdaNokiaComV1alpha1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pathname to the UI specification to retrieve */
                pathname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UIResult"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducerList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducerList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description name of the ClusterProducer to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description name of the ClusterProducer to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ClusterProducer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryKafkaEdaNokiaComV1alpha1Clusterproducers: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the ClusterProducer to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ProducerList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAllKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the set of CRs deleted based on CR labels */
                "label-selector"?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ProducerList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDeletedKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns list of deleted resource entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer_DeletedResources"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description resource content will be returned as it was at the time of this git hash */
                hash?: string;
            };
            header?: never;
            path: {
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
                /** @description name of the Producer to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    replaceKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the namespace scope from which to perform the delete */
                namespace: string;
                /** @description name of the Producer to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patch"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.Producer"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getHistoryKafkaEdaNokiaComV1alpha1NamespaceProducers: {
        parameters: {
            query?: {
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
                /** @description maximum number of history entries to return */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description name of the Producer to retrieve */
                name: string;
                /** @description the namespace scope from which to retrieve the result */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the change history of the specified resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceHistory"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listKafkaEdaNokiaComV1alpha1Producers: {
        parameters: {
            query?: {
                /** @description a label selector string to filter the results based on CR labels */
                "label-selector"?: string;
                /** @description client information for streaming request */
                eventclient?: string;
                /** @description stream information for streaming request */
                stream?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["com.nokia.eda.kafka.v1alpha1.ProducerList"];
                };
            };
            /** @description Details of an error in response to an API REST request. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
